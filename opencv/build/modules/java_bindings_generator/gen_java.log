
Remapped configured files (3):
{'C:\\Users\\d_dan\\Desktop\\opencv-master\\modules\\core\\misc\\java\\src\\java\\core+Core.jcode.in': 'C:/Users/d_dan/Desktop/opencv-master/build/configured/modules/core/misc/java/src/java/core+Core.jcode',
 'C:\\Users\\d_dan\\Desktop\\opencv-master\\modules\\java\\generator\\android\\java\\org\\opencv\\android\\OpenCVLoader.java.in': 'C:/Users/d_dan/Desktop/opencv-master/build/configured/modules/java/generator/android/java/org/opencv/android/OpenCVLoader.java',
 'C:\\Users\\d_dan\\Desktop\\opencv-master\\modules\\java\\generator\\src\\java\\org\\opencv\\osgi\\OpenCVNativeLoader.java.in': 'C:/Users/d_dan/Desktop/opencv-master/build/configured/modules/java/generator/src/java/org/opencv/osgi/OpenCVNativeLoader.java'}

=== MODULE: core (C:/Users/d_dan/Desktop/opencv-master\modules/core) ===


Files (4):
['C:/Users/d_dan/Desktop/opencv-master\\modules/core\\include/opencv2/core/base.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/core\\include/opencv2/core.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/core\\include/opencv2/core/utility.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/core\\misc/java/src/cpp/core_manual.hpp']

Common headers (0):
[]
ok: class CLASS ::.Core : , name: Core, base: 


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/core\include/opencv2/core/base.hpp =====
Namespaces: {'cv', 'cv.ogl', 'cv.cudev', 'cv.ipp', 'cv.Error', 'cv.cuda'}

--- Incoming ---
['const cv.Error.StsOk', '0', [], [], None]
ok: CONST StsOk=0

--- Incoming ---
['const cv.Error.StsBackTrace', '-1', [], [], None]
ok: CONST StsBackTrace=-1

--- Incoming ---
['const cv.Error.StsError', '-2', [], [], None]
ok: CONST StsError=-2

--- Incoming ---
['const cv.Error.StsInternal', '-3', [], [], None]
ok: CONST StsInternal=-3

--- Incoming ---
['const cv.Error.StsNoMem', '-4', [], [], None]
ok: CONST StsNoMem=-4

--- Incoming ---
['const cv.Error.StsBadArg', '-5', [], [], None]
ok: CONST StsBadArg=-5

--- Incoming ---
['const cv.Error.StsBadFunc', '-6', [], [], None]
ok: CONST StsBadFunc=-6

--- Incoming ---
['const cv.Error.StsNoConv', '-7', [], [], None]
ok: CONST StsNoConv=-7

--- Incoming ---
['const cv.Error.StsAutoTrace', '-8', [], [], None]
ok: CONST StsAutoTrace=-8

--- Incoming ---
['const cv.Error.HeaderIsNull', '-9', [], [], None]
ok: CONST HeaderIsNull=-9

--- Incoming ---
['const cv.Error.BadImageSize', '-10', [], [], None]
ok: CONST BadImageSize=-10

--- Incoming ---
['const cv.Error.BadOffset', '-11', [], [], None]
ok: CONST BadOffset=-11

--- Incoming ---
['const cv.Error.BadDataPtr', '-12', [], [], None]
ok: CONST BadDataPtr=-12

--- Incoming ---
['const cv.Error.BadStep', '-13', [], [], None]
ok: CONST BadStep=-13

--- Incoming ---
['const cv.Error.BadModelOrChSeq', '-14', [], [], None]
ok: CONST BadModelOrChSeq=-14

--- Incoming ---
['const cv.Error.BadNumChannels', '-15', [], [], None]
ok: CONST BadNumChannels=-15

--- Incoming ---
['const cv.Error.BadNumChannel1U', '-16', [], [], None]
ok: CONST BadNumChannel1U=-16

--- Incoming ---
['const cv.Error.BadDepth', '-17', [], [], None]
ok: CONST BadDepth=-17

--- Incoming ---
['const cv.Error.BadAlphaChannel', '-18', [], [], None]
ok: CONST BadAlphaChannel=-18

--- Incoming ---
['const cv.Error.BadOrder', '-19', [], [], None]
ok: CONST BadOrder=-19

--- Incoming ---
['const cv.Error.BadOrigin', '-20', [], [], None]
ok: CONST BadOrigin=-20

--- Incoming ---
['const cv.Error.BadAlign', '-21', [], [], None]
ok: CONST BadAlign=-21

--- Incoming ---
['const cv.Error.BadCallBack', '-22', [], [], None]
ok: CONST BadCallBack=-22

--- Incoming ---
['const cv.Error.BadTileSize', '-23', [], [], None]
ok: CONST BadTileSize=-23

--- Incoming ---
['const cv.Error.BadCOI', '-24', [], [], None]
ok: CONST BadCOI=-24

--- Incoming ---
['const cv.Error.BadROISize', '-25', [], [], None]
ok: CONST BadROISize=-25

--- Incoming ---
['const cv.Error.MaskIsTiled', '-26', [], [], None]
ok: CONST MaskIsTiled=-26

--- Incoming ---
['const cv.Error.StsNullPtr', '-27', [], [], None]
ok: CONST StsNullPtr=-27

--- Incoming ---
['const cv.Error.StsVecLengthErr', '-28', [], [], None]
ok: CONST StsVecLengthErr=-28

--- Incoming ---
['const cv.Error.StsFilterStructContentErr', '-29', [], [], None]
ok: CONST StsFilterStructContentErr=-29

--- Incoming ---
['const cv.Error.StsKernelStructContentErr', '-30', [], [], None]
ok: CONST StsKernelStructContentErr=-30

--- Incoming ---
['const cv.Error.StsFilterOffsetErr', '-31', [], [], None]
ok: CONST StsFilterOffsetErr=-31

--- Incoming ---
['const cv.Error.StsBadSize', '-201', [], [], None]
ok: CONST StsBadSize=-201

--- Incoming ---
['const cv.Error.StsDivByZero', '-202', [], [], None]
ok: CONST StsDivByZero=-202

--- Incoming ---
['const cv.Error.StsInplaceNotSupported', '-203', [], [], None]
ok: CONST StsInplaceNotSupported=-203

--- Incoming ---
['const cv.Error.StsObjectNotFound', '-204', [], [], None]
ok: CONST StsObjectNotFound=-204

--- Incoming ---
['const cv.Error.StsUnmatchedFormats', '-205', [], [], None]
ok: CONST StsUnmatchedFormats=-205

--- Incoming ---
['const cv.Error.StsBadFlag', '-206', [], [], None]
ok: CONST StsBadFlag=-206

--- Incoming ---
['const cv.Error.StsBadPoint', '-207', [], [], None]
ok: CONST StsBadPoint=-207

--- Incoming ---
['const cv.Error.StsBadMask', '-208', [], [], None]
ok: CONST StsBadMask=-208

--- Incoming ---
['const cv.Error.StsUnmatchedSizes', '-209', [], [], None]
ok: CONST StsUnmatchedSizes=-209

--- Incoming ---
['const cv.Error.StsUnsupportedFormat', '-210', [], [], None]
ok: CONST StsUnsupportedFormat=-210

--- Incoming ---
['const cv.Error.StsOutOfRange', '-211', [], [], None]
ok: CONST StsOutOfRange=-211

--- Incoming ---
['const cv.Error.StsParseError', '-212', [], [], None]
ok: CONST StsParseError=-212

--- Incoming ---
['const cv.Error.StsNotImplemented', '-213', [], [], None]
ok: CONST StsNotImplemented=-213

--- Incoming ---
['const cv.Error.StsBadMemBlock', '-214', [], [], None]
ok: CONST StsBadMemBlock=-214

--- Incoming ---
['const cv.Error.StsAssert', '-215', [], [], None]
ok: CONST StsAssert=-215

--- Incoming ---
['const cv.Error.GpuNotSupported', '-216', [], [], None]
ok: CONST GpuNotSupported=-216

--- Incoming ---
['const cv.Error.GpuApiCallError', '-217', [], [], None]
ok: CONST GpuApiCallError=-217

--- Incoming ---
['const cv.Error.OpenGlNotSupported', '-218', [], [], None]
ok: CONST OpenGlNotSupported=-218

--- Incoming ---
['const cv.Error.OpenGlApiCallError', '-219', [], [], None]
ok: CONST OpenGlApiCallError=-219

--- Incoming ---
['const cv.Error.OpenCLApiCallError', '-220', [], [], None]
ok: CONST OpenCLApiCallError=-220

--- Incoming ---
['const cv.Error.OpenCLDoubleNotSupported', '-221', [], [], None]
ok: CONST OpenCLDoubleNotSupported=-221

--- Incoming ---
['const cv.Error.OpenCLInitError', '-222', [], [], None]
ok: CONST OpenCLInitError=-222

--- Incoming ---
['const cv.Error.OpenCLNoAMDBlasFft', '-223', [], [], None]
ok: CONST OpenCLNoAMDBlasFft=-223

--- Incoming ---
['const cv.DECOMP_LU', '0', [], [], None]
ok: CONST DECOMP_LU=0

--- Incoming ---
['const cv.DECOMP_SVD', '1', [], [], None]
ok: CONST DECOMP_SVD=1

--- Incoming ---
['const cv.DECOMP_EIG', '2', [], [], None]
ok: CONST DECOMP_EIG=2

--- Incoming ---
['const cv.DECOMP_CHOLESKY', '3', [], [], None]
ok: CONST DECOMP_CHOLESKY=3

--- Incoming ---
['const cv.DECOMP_QR', '4', [], [], None]
ok: CONST DECOMP_QR=4

--- Incoming ---
['const cv.DECOMP_NORMAL', '16', [], [], None]
ok: CONST DECOMP_NORMAL=16

--- Incoming ---
['const cv.NORM_INF', '1', [], [], None]
ok: CONST NORM_INF=1

--- Incoming ---
['const cv.NORM_L1', '2', [], [], None]
ok: CONST NORM_L1=2

--- Incoming ---
['const cv.NORM_L2', '4', [], [], None]
ok: CONST NORM_L2=4

--- Incoming ---
['const cv.NORM_L2SQR', '5', [], [], None]
ok: CONST NORM_L2SQR=5

--- Incoming ---
['const cv.NORM_HAMMING', '6', [], [], None]
ok: CONST NORM_HAMMING=6

--- Incoming ---
['const cv.NORM_HAMMING2', '7', [], [], None]
ok: CONST NORM_HAMMING2=7

--- Incoming ---
['const cv.NORM_TYPE_MASK', '7', [], [], None]
ok: CONST NORM_TYPE_MASK=7

--- Incoming ---
['const cv.NORM_RELATIVE', '8', [], [], None]
ok: CONST NORM_RELATIVE=8

--- Incoming ---
['const cv.NORM_MINMAX', '32', [], [], None]
ok: CONST NORM_MINMAX=32

--- Incoming ---
['const cv.CMP_EQ', '0', [], [], None]
ok: CONST CMP_EQ=0

--- Incoming ---
['const cv.CMP_GT', '1', [], [], None]
ok: CONST CMP_GT=1

--- Incoming ---
['const cv.CMP_GE', '2', [], [], None]
ok: CONST CMP_GE=2

--- Incoming ---
['const cv.CMP_LT', '3', [], [], None]
ok: CONST CMP_LT=3

--- Incoming ---
['const cv.CMP_LE', '4', [], [], None]
ok: CONST CMP_LE=4

--- Incoming ---
['const cv.CMP_NE', '5', [], [], None]
ok: CONST CMP_NE=5

--- Incoming ---
['const cv.GEMM_1_T', '1', [], [], None]
ok: CONST GEMM_1_T=1

--- Incoming ---
['const cv.GEMM_2_T', '2', [], [], None]
ok: CONST GEMM_2_T=2

--- Incoming ---
['const cv.GEMM_3_T', '4', [], [], None]
ok: CONST GEMM_3_T=4

--- Incoming ---
['const cv.DFT_INVERSE', '1', [], [], None]
ok: CONST DFT_INVERSE=1

--- Incoming ---
['const cv.DFT_SCALE', '2', [], [], None]
ok: CONST DFT_SCALE=2

--- Incoming ---
['const cv.DFT_ROWS', '4', [], [], None]
ok: CONST DFT_ROWS=4

--- Incoming ---
['const cv.DFT_COMPLEX_OUTPUT', '16', [], [], None]
ok: CONST DFT_COMPLEX_OUTPUT=16

--- Incoming ---
['const cv.DFT_REAL_OUTPUT', '32', [], [], None]
ok: CONST DFT_REAL_OUTPUT=32

--- Incoming ---
['const cv.DFT_COMPLEX_INPUT', '64', [], [], None]
ok: CONST DFT_COMPLEX_INPUT=64

--- Incoming ---
['const cv.DCT_INVERSE', 'DFT_INVERSE', [], [], None]
ok: CONST DCT_INVERSE=DFT_INVERSE

--- Incoming ---
['const cv.DCT_ROWS', 'DFT_ROWS', [], [], None]
ok: CONST DCT_ROWS=DFT_ROWS

--- Incoming ---
['const cv.BORDER_CONSTANT', '0', [], [], None]
ok: CONST BORDER_CONSTANT=0

--- Incoming ---
['const cv.BORDER_REPLICATE', '1', [], [], None]
ok: CONST BORDER_REPLICATE=1

--- Incoming ---
['const cv.BORDER_REFLECT', '2', [], [], None]
ok: CONST BORDER_REFLECT=2

--- Incoming ---
['const cv.BORDER_WRAP', '3', [], [], None]
ok: CONST BORDER_WRAP=3

--- Incoming ---
['const cv.BORDER_REFLECT_101', '4', [], [], None]
ok: CONST BORDER_REFLECT_101=4

--- Incoming ---
['const cv.BORDER_TRANSPARENT', '5', [], [], None]
ok: CONST BORDER_TRANSPARENT=5

--- Incoming ---
['const cv.BORDER_REFLECT101', 'BORDER_REFLECT_101', [], [], None]
ok: CONST BORDER_REFLECT101=BORDER_REFLECT_101

--- Incoming ---
['const cv.BORDER_DEFAULT', 'BORDER_REFLECT_101', [], [], None]
ok: CONST BORDER_DEFAULT=BORDER_REFLECT_101

--- Incoming ---
['const cv.BORDER_ISOLATED', '16', [], [], None]
ok: CONST BORDER_ISOLATED=16

--- Incoming ---
['const cv.Hamming.normType', 'NORM_HAMMING', [], [], None]
class not found: CONST normType=NORM_HAMMING

--- Incoming ---
['cv.cubeRoot', 'float', [], [['float', 'val', '', []]], 'float']
ok: FUNC <float cv..cubeRoot [ARG float val=]>

--- Incoming ---
[   'cv.fastAtan2',
    'float',
    [],
    [['float', 'y', '', []], ['float', 'x', '', []]],
    'float']
ok: FUNC <float cv..fastAtan2 [ARG float y=, ARG float x=]>

--- Incoming ---
['cv.ipp.useIPP', 'bool', [], [], 'bool']
ok: FUNC <bool cv.ipp..useIPP []>

--- Incoming ---
['cv.ipp.setUseIPP', 'void', [], [['bool', 'flag', '', []]], 'void']
ok: FUNC <void cv.ipp..setUseIPP [ARG bool flag=]>

--- Incoming ---
['cv.ipp.getIppVersion', 'String', [], [], 'String']
ok: FUNC <String cv.ipp..getIppVersion []>

--- Incoming ---
['cv.ipp.useIPP_NE', 'bool', [], [], 'bool']
ok: FUNC <bool cv.ipp..useIPP_NE []>

--- Incoming ---
['cv.ipp.setUseIPP_NE', 'void', [], [['bool', 'flag', '', []]], 'void']
ok: FUNC <void cv.ipp..setUseIPP_NE [ARG bool flag=]>


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/core\include/opencv2/core.hpp =====
Namespaces: {'cv', 'cv.ogl', 'cv.cudev', 'cv.ipp', 'cv.Error', 'cv.cuda'}

--- Incoming ---
['const cv.SORT_EVERY_ROW', '0', [], [], None]
ok: CONST SORT_EVERY_ROW=0

--- Incoming ---
['const cv.SORT_EVERY_COLUMN', '1', [], [], None]
ok: CONST SORT_EVERY_COLUMN=1

--- Incoming ---
['const cv.SORT_ASCENDING', '0', [], [], None]
ok: CONST SORT_ASCENDING=0

--- Incoming ---
['const cv.SORT_DESCENDING', '16', [], [], None]
ok: CONST SORT_DESCENDING=16

--- Incoming ---
['const cv.COVAR_SCRAMBLED', '0', [], [], None]
ok: CONST COVAR_SCRAMBLED=0

--- Incoming ---
['const cv.COVAR_NORMAL', '1', [], [], None]
ok: CONST COVAR_NORMAL=1

--- Incoming ---
['const cv.COVAR_USE_AVG', '2', [], [], None]
ok: CONST COVAR_USE_AVG=2

--- Incoming ---
['const cv.COVAR_SCALE', '4', [], [], None]
ok: CONST COVAR_SCALE=4

--- Incoming ---
['const cv.COVAR_ROWS', '8', [], [], None]
ok: CONST COVAR_ROWS=8

--- Incoming ---
['const cv.COVAR_COLS', '16', [], [], None]
ok: CONST COVAR_COLS=16

--- Incoming ---
['const cv.KMEANS_RANDOM_CENTERS', '0', [], [], None]
ok: CONST KMEANS_RANDOM_CENTERS=0

--- Incoming ---
['const cv.KMEANS_PP_CENTERS', '2', [], [], None]
ok: CONST KMEANS_PP_CENTERS=2

--- Incoming ---
['const cv.KMEANS_USE_INITIAL_LABELS', '1', [], [], None]
ok: CONST KMEANS_USE_INITIAL_LABELS=1

--- Incoming ---
['const cv.FILLED', '-1', [], [], None]
manual: CONST FILLED=-1

--- Incoming ---
['const cv.LINE_4', '4', [], [], None]
ok: CONST LINE_4=4

--- Incoming ---
['const cv.LINE_8', '8', [], [], None]
ok: CONST LINE_8=8

--- Incoming ---
['const cv.LINE_AA', '16', [], [], None]
ok: CONST LINE_AA=16

--- Incoming ---
['const cv.FONT_HERSHEY_SIMPLEX', '0', [], [], None]
ok: CONST FONT_HERSHEY_SIMPLEX=0

--- Incoming ---
['const cv.FONT_HERSHEY_PLAIN', '1', [], [], None]
ok: CONST FONT_HERSHEY_PLAIN=1

--- Incoming ---
['const cv.FONT_HERSHEY_DUPLEX', '2', [], [], None]
ok: CONST FONT_HERSHEY_DUPLEX=2

--- Incoming ---
['const cv.FONT_HERSHEY_COMPLEX', '3', [], [], None]
ok: CONST FONT_HERSHEY_COMPLEX=3

--- Incoming ---
['const cv.FONT_HERSHEY_TRIPLEX', '4', [], [], None]
ok: CONST FONT_HERSHEY_TRIPLEX=4

--- Incoming ---
['const cv.FONT_HERSHEY_COMPLEX_SMALL', '5', [], [], None]
ok: CONST FONT_HERSHEY_COMPLEX_SMALL=5

--- Incoming ---
['const cv.FONT_HERSHEY_SCRIPT_SIMPLEX', '6', [], [], None]
ok: CONST FONT_HERSHEY_SCRIPT_SIMPLEX=6

--- Incoming ---
['const cv.FONT_HERSHEY_SCRIPT_COMPLEX', '7', [], [], None]
ok: CONST FONT_HERSHEY_SCRIPT_COMPLEX=7

--- Incoming ---
['const cv.FONT_ITALIC', '16', [], [], None]
ok: CONST FONT_ITALIC=16

--- Incoming ---
['const cv.REDUCE_SUM', '0', [], [], None]
manual: CONST REDUCE_SUM=0

--- Incoming ---
['const cv.REDUCE_AVG', '1', [], [], None]
manual: CONST REDUCE_AVG=1

--- Incoming ---
['const cv.REDUCE_MAX', '2', [], [], None]
manual: CONST REDUCE_MAX=2

--- Incoming ---
['const cv.REDUCE_MIN', '3', [], [], None]
manual: CONST REDUCE_MIN=3

--- Incoming ---
[   'cv.borderInterpolate',
    'int',
    [],
    [   ['int', 'p', '', []],
        ['int', 'len', '', []],
        ['int', 'borderType', '', []]],
    'int']
ok: FUNC <int cv..borderInterpolate [ARG int p=, ARG int len=, ARG int borderType=]>

--- Incoming ---
[   'cv.copyMakeBorder',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'top', '', []],
        ['int', 'bottom', '', []],
        ['int', 'left', '', []],
        ['int', 'right', '', []],
        ['int', 'borderType', '', []],
        ['Scalar', 'value', 'Scalar()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..copyMakeBorder [ARG Mat src=, ARG Mat dst=, ARG int top=, ARG int bottom=, ARG int left=, ARG int right=, ARG int borderType=, ARG Scalar value=Scalar()]>

--- Incoming ---
[   'cv.add',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..add [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>

--- Incoming ---
[   'cv.subtract',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..subtract [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>

--- Incoming ---
[   'cv.multiply',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..multiply [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   'cv.divide',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..divide [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   'cv.divide',
    'void',
    [],
    [   ['double', 'scale', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..divide [ARG double scale=, ARG Mat src2=, ARG Mat dst=, ARG int dtype=-1]>

--- Incoming ---
[   'cv.scaleAdd',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['double', 'alpha', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..scaleAdd [ARG Mat src1=, ARG double alpha=, ARG Mat src2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.addWeighted',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['double', 'alpha', '', []],
        ['Mat', 'src2', '', []],
        ['double', 'beta', '', []],
        ['double', 'gamma', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..addWeighted [ARG Mat src1=, ARG double alpha=, ARG Mat src2=, ARG double beta=, ARG double gamma=, ARG Mat dst=, ARG int dtype=-1]>

--- Incoming ---
[   'cv.convertScaleAbs',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'alpha', '1', []],
        ['double', 'beta', '0', []]],
    'void']
ok: FUNC <void cv..convertScaleAbs [ARG Mat src=, ARG Mat dst=, ARG double alpha=1, ARG double beta=0]>

--- Incoming ---
[   'cv.convertFp16',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..convertFp16 [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.LUT',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'lut', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..LUT [ARG Mat src=, ARG Mat lut=, ARG Mat dst=]>

--- Incoming ---
['cv.sum', 'Scalar', ['=sumElems'], [['Mat', 'src', '', []]], 'Scalar']
ok: FUNC <Scalar cv..sum [ARG Mat src=]>

--- Incoming ---
['cv.countNonZero', 'int', [], [['Mat', 'src', '', []]], 'int']
ok: FUNC <int cv..countNonZero [ARG Mat src=]>

--- Incoming ---
[   'cv.findNonZero',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'idx', '', ['/O']]],
    'void']
ok: FUNC <void cv..findNonZero [ARG Mat src=, ARG Mat idx=]>

--- Incoming ---
[   'cv.mean',
    'Scalar',
    [],
    [['Mat', 'src', '', []], ['Mat', 'mask', 'Mat()', []]],
    'Scalar']
ok: FUNC <Scalar cv..mean [ARG Mat src=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.meanStdDev',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'mean', '', ['/O']],
        ['Mat', 'stddev', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..meanStdDev [ARG Mat src=, ARG vector_double mean=, ARG vector_double stddev=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.norm',
    'double',
    [],
    [   ['Mat', 'src1', '', []],
        ['int', 'normType', 'NORM_L2', []],
        ['Mat', 'mask', 'Mat()', []]],
    'double']
ok: FUNC <double cv..norm [ARG Mat src1=, ARG int normType=NORM_L2, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.norm',
    'double',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['int', 'normType', 'NORM_L2', []],
        ['Mat', 'mask', 'Mat()', []]],
    'double']
ok: FUNC <double cv..norm [ARG Mat src1=, ARG Mat src2=, ARG int normType=NORM_L2, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.PSNR',
    'double',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['double', 'R', '255.', []]],
    'double']
ok: FUNC <double cv..PSNR [ARG Mat src1=, ARG Mat src2=, ARG double R=255.]>

--- Incoming ---
[   'cv.batchDistance',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dist', '', ['/O']],
        ['int', 'dtype', '', []],
        ['Mat', 'nidx', '', ['/O']],
        ['int', 'normType', 'NORM_L2', []],
        ['int', 'K', '0', []],
        ['Mat', 'mask', 'Mat()', []],
        ['int', 'update', '0', []],
        ['bool', 'crosscheck', 'false', []]],
    'void']
ok: FUNC <void cv..batchDistance [ARG Mat src1=, ARG Mat src2=, ARG Mat dist=, ARG int dtype=, ARG Mat nidx=, ARG int normType=NORM_L2, ARG int K=0, ARG Mat mask=Mat(), ARG int update=0, ARG bool crosscheck=false]>

--- Incoming ---
[   'cv.normalize',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/IO']],
        ['double', 'alpha', '1', []],
        ['double', 'beta', '0', []],
        ['int', 'norm_type', 'NORM_L2', []],
        ['int', 'dtype', '-1', []],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..normalize [ARG Mat src=, ARG Mat dst=, ARG double alpha=1, ARG double beta=0, ARG int norm_type=NORM_L2, ARG int dtype=-1, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.minMaxLoc',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['double*', 'minVal', '', ['/O']],
        ['double*', 'maxVal', '0', ['/O']],
        ['Point*', 'minLoc', '0', ['/O']],
        ['Point*', 'maxLoc', '0', ['/O']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
manual: FUNC <void cv..minMaxLoc [ARG Mat src=, ARG double * minVal=, ARG double * maxVal=0, ARG Point * minLoc=0, ARG Point * maxLoc=0, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.reduce',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'dim', '', []],
        ['int', 'rtype', '', []],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..reduce [ARG Mat src=, ARG Mat dst=, ARG int dim=, ARG int rtype=, ARG int dtype=-1]>

--- Incoming ---
[   'cv.merge',
    'void',
    [],
    [['vector_Mat', 'mv', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..merge [ARG vector_Mat mv=, ARG Mat dst=]>

--- Incoming ---
[   'cv.split',
    'void',
    [],
    [['Mat', 'm', '', []], ['vector_Mat', 'mv', '', ['/O']]],
    'void']
ok: FUNC <void cv..split [ARG Mat m=, ARG vector_Mat mv=]>

--- Incoming ---
[   'cv.mixChannels',
    'void',
    [],
    [   ['vector_Mat', 'src', '', []],
        ['vector_Mat', 'dst', '', ['/IO']],
        ['vector_int', 'fromTo', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..mixChannels [ARG vector_Mat src=, ARG vector_Mat dst=, ARG vector_int fromTo=]>

--- Incoming ---
[   'cv.extractChannel',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'coi', '', []]],
    'void']
ok: FUNC <void cv..extractChannel [ARG Mat src=, ARG Mat dst=, ARG int coi=]>

--- Incoming ---
[   'cv.insertChannel',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/IO']],
        ['int', 'coi', '', []]],
    'void']
ok: FUNC <void cv..insertChannel [ARG Mat src=, ARG Mat dst=, ARG int coi=]>

--- Incoming ---
[   'cv.flip',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flipCode', '', []]],
    'void']
ok: FUNC <void cv..flip [ARG Mat src=, ARG Mat dst=, ARG int flipCode=]>

--- Incoming ---
['const cv.ROTATE_90_CLOCKWISE', '0', [], [], None]
ok: CONST ROTATE_90_CLOCKWISE=0

--- Incoming ---
['const cv.ROTATE_180', '1', [], [], None]
ok: CONST ROTATE_180=1

--- Incoming ---
['const cv.ROTATE_90_COUNTERCLOCKWISE', '2', [], [], None]
ok: CONST ROTATE_90_COUNTERCLOCKWISE=2

--- Incoming ---
[   'cv.rotate',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'rotateCode', '', []]],
    'void']
ok: FUNC <void cv..rotate [ARG Mat src=, ARG Mat dst=, ARG int rotateCode=]>

--- Incoming ---
[   'cv.repeat',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['int', 'ny', '', []],
        ['int', 'nx', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..repeat [ARG Mat src=, ARG int ny=, ARG int nx=, ARG Mat dst=]>

--- Incoming ---
[   'cv.hconcat',
    'void',
    [],
    [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..hconcat [ARG vector_Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.vconcat',
    'void',
    [],
    [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..vconcat [ARG vector_Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.bitwise_and',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..bitwise_and [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.bitwise_or',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..bitwise_or [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.bitwise_xor',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..bitwise_xor [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.bitwise_not',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..bitwise_not [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.absdiff',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..absdiff [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.inRange',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'lowerb', '', []],
        ['Mat', 'upperb', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..inRange [ARG Mat src=, ARG Scalar lowerb=, ARG Scalar upperb=, ARG Mat dst=]>

--- Incoming ---
[   'cv.compare',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'cmpop', '', []]],
    'void']
ok: FUNC <void cv..compare [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int cmpop=]>

--- Incoming ---
[   'cv.min',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..min [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.max',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..max [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.sqrt',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..sqrt [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.pow',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['double', 'power', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..pow [ARG Mat src=, ARG double power=, ARG Mat dst=]>

--- Incoming ---
[   'cv.exp',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..exp [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.log',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..log [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.polarToCart',
    'void',
    [],
    [   ['Mat', 'magnitude', '', []],
        ['Mat', 'angle', '', []],
        ['Mat', 'x', '', ['/O']],
        ['Mat', 'y', '', ['/O']],
        ['bool', 'angleInDegrees', 'false', []]],
    'void']
ok: FUNC <void cv..polarToCart [ARG Mat magnitude=, ARG Mat angle=, ARG Mat x=, ARG Mat y=, ARG bool angleInDegrees=false]>

--- Incoming ---
[   'cv.cartToPolar',
    'void',
    [],
    [   ['Mat', 'x', '', []],
        ['Mat', 'y', '', []],
        ['Mat', 'magnitude', '', ['/O']],
        ['Mat', 'angle', '', ['/O']],
        ['bool', 'angleInDegrees', 'false', []]],
    'void']
ok: FUNC <void cv..cartToPolar [ARG Mat x=, ARG Mat y=, ARG Mat magnitude=, ARG Mat angle=, ARG bool angleInDegrees=false]>

--- Incoming ---
[   'cv.phase',
    'void',
    [],
    [   ['Mat', 'x', '', []],
        ['Mat', 'y', '', []],
        ['Mat', 'angle', '', ['/O']],
        ['bool', 'angleInDegrees', 'false', []]],
    'void']
ok: FUNC <void cv..phase [ARG Mat x=, ARG Mat y=, ARG Mat angle=, ARG bool angleInDegrees=false]>

--- Incoming ---
[   'cv.magnitude',
    'void',
    [],
    [   ['Mat', 'x', '', []],
        ['Mat', 'y', '', []],
        ['Mat', 'magnitude', '', ['/O']]],
    'void']
ok: FUNC <void cv..magnitude [ARG Mat x=, ARG Mat y=, ARG Mat magnitude=]>

--- Incoming ---
[   'cv.checkRange',
    'bool',
    [],
    [   ['Mat', 'a', '', []],
        ['bool', 'quiet', 'true', []],
        ['Point*', 'pos', '0', ['/O']],
        ['double', 'minVal', '-DBL_MAX', []],
        ['double', 'maxVal', 'DBL_MAX', []]],
    'bool']
ok: FUNC <bool cv..checkRange [ARG Mat a=, ARG bool quiet=true, ARG  * pos=0, ARG double minVal=-DBL_MAX, ARG double maxVal=DBL_MAX]>

--- Incoming ---
[   'cv.patchNaNs',
    'void',
    [],
    [['Mat', 'a', '', ['/IO']], ['double', 'val', '0', []]],
    'void']
ok: FUNC <void cv..patchNaNs [ARG Mat a=, ARG double val=0]>

--- Incoming ---
[   'cv.gemm',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['double', 'alpha', '', []],
        ['Mat', 'src3', '', []],
        ['double', 'beta', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '0', []]],
    'void']
ok: FUNC <void cv..gemm [ARG Mat src1=, ARG Mat src2=, ARG double alpha=, ARG Mat src3=, ARG double beta=, ARG Mat dst=, ARG int flags=0]>

--- Incoming ---
[   'cv.mulTransposed',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['bool', 'aTa', '', []],
        ['Mat', 'delta', 'Mat()', []],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..mulTransposed [ARG Mat src=, ARG Mat dst=, ARG bool aTa=, ARG Mat delta=Mat(), ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   'cv.transpose',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..transpose [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.transform',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'm', '', []]],
    'void']
ok: FUNC <void cv..transform [ARG Mat src=, ARG Mat dst=, ARG Mat m=]>

--- Incoming ---
[   'cv.perspectiveTransform',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']], ['Mat', 'm', '', []]],
    'void']
ok: FUNC <void cv..perspectiveTransform [ARG Mat src=, ARG Mat dst=, ARG Mat m=]>

--- Incoming ---
[   'cv.completeSymm',
    'void',
    [],
    [['Mat', 'm', '', ['/IO']], ['bool', 'lowerToUpper', 'false', []]],
    'void']
ok: FUNC <void cv..completeSymm [ARG Mat m=, ARG bool lowerToUpper=false]>

--- Incoming ---
[   'cv.setIdentity',
    'void',
    [],
    [['Mat', 'mtx', '', ['/IO']], ['Scalar', 's', 'Scalar(1)', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..setIdentity [ARG Mat mtx=, ARG Scalar s=Scalar(1)]>

--- Incoming ---
['cv.determinant', 'double', [], [['Mat', 'mtx', '', []]], 'double']
ok: FUNC <double cv..determinant [ARG Mat mtx=]>

--- Incoming ---
['cv.trace', 'Scalar', [], [['Mat', 'mtx', '', []]], 'Scalar']
ok: FUNC <Scalar cv..trace [ARG Mat mtx=]>

--- Incoming ---
[   'cv.invert',
    'double',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', 'DECOMP_LU', []]],
    'double']
ok: FUNC <double cv..invert [ARG Mat src=, ARG Mat dst=, ARG int flags=DECOMP_LU]>

--- Incoming ---
[   'cv.solve',
    'bool',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', 'DECOMP_LU', []]],
    'bool']
ok: FUNC <bool cv..solve [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int flags=DECOMP_LU]>

--- Incoming ---
[   'cv.sort',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv..sort [ARG Mat src=, ARG Mat dst=, ARG int flags=]>

--- Incoming ---
[   'cv.sortIdx',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv..sortIdx [ARG Mat src=, ARG Mat dst=, ARG int flags=]>

--- Incoming ---
[   'cv.solveCubic',
    'int',
    [],
    [['Mat', 'coeffs', '', []], ['Mat', 'roots', '', ['/O']]],
    'int']
ok: FUNC <int cv..solveCubic [ARG Mat coeffs=, ARG Mat roots=]>

--- Incoming ---
[   'cv.solvePoly',
    'double',
    [],
    [   ['Mat', 'coeffs', '', []],
        ['Mat', 'roots', '', ['/O']],
        ['int', 'maxIters', '300', []]],
    'double']
ok: FUNC <double cv..solvePoly [ARG Mat coeffs=, ARG Mat roots=, ARG int maxIters=300]>

--- Incoming ---
[   'cv.eigen',
    'bool',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'eigenvalues', '', ['/O']],
        ['Mat', 'eigenvectors', 'Mat()', ['/O']]],
    'bool']
ok: FUNC <bool cv..eigen [ARG Mat src=, ARG Mat eigenvalues=, ARG Mat eigenvectors=Mat()]>

--- Incoming ---
[   'cv.eigenNonSymmetric',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'eigenvalues', '', ['/O']],
        ['Mat', 'eigenvectors', '', ['/O']]],
    'void']
ok: FUNC <void cv..eigenNonSymmetric [ARG Mat src=, ARG Mat eigenvalues=, ARG Mat eigenvectors=]>

--- Incoming ---
[   'cv.calcCovarMatrix',
    'void',
    [],
    [   ['Mat', 'samples', '', []],
        ['Mat', 'covar', '', ['/O']],
        ['Mat', 'mean', '', ['/IO']],
        ['int', 'flags', '', []],
        ['int', 'ctype', 'CV_64F', []]],
    'void']
ok: FUNC <void cv..calcCovarMatrix [ARG Mat samples=, ARG Mat covar=, ARG Mat mean=, ARG int flags=, ARG int ctype=CV_64F]>

--- Incoming ---
[   'cv.PCACompute',
    'void',
    [],
    [   ['Mat', 'data', '', []],
        ['Mat', 'mean', '', ['/IO']],
        ['Mat', 'eigenvectors', '', ['/O']],
        ['int', 'maxComponents', '0', []]],
    'void']
ok: FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG int maxComponents=0]>

--- Incoming ---
[   'cv.PCACompute',
    'void',
    ['=PCACompute2'],
    [   ['Mat', 'data', '', []],
        ['Mat', 'mean', '', ['/IO']],
        ['Mat', 'eigenvectors', '', ['/O']],
        ['Mat', 'eigenvalues', '', ['/O']],
        ['int', 'maxComponents', '0', []]],
    'void']
ok: FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat eigenvalues=, ARG int maxComponents=0]>

--- Incoming ---
[   'cv.PCACompute',
    'void',
    [],
    [   ['Mat', 'data', '', []],
        ['Mat', 'mean', '', ['/IO']],
        ['Mat', 'eigenvectors', '', ['/O']],
        ['double', 'retainedVariance', '', []]],
    'void']
ok: FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG double retainedVariance=]>

--- Incoming ---
[   'cv.PCACompute',
    'void',
    ['=PCACompute2'],
    [   ['Mat', 'data', '', []],
        ['Mat', 'mean', '', ['/IO']],
        ['Mat', 'eigenvectors', '', ['/O']],
        ['Mat', 'eigenvalues', '', ['/O']],
        ['double', 'retainedVariance', '', []]],
    'void']
ok: FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat eigenvalues=, ARG double retainedVariance=]>

--- Incoming ---
[   'cv.PCAProject',
    'void',
    [],
    [   ['Mat', 'data', '', []],
        ['Mat', 'mean', '', []],
        ['Mat', 'eigenvectors', '', []],
        ['Mat', 'result', '', ['/O']]],
    'void']
ok: FUNC <void cv..PCAProject [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat result=]>

--- Incoming ---
[   'cv.PCABackProject',
    'void',
    [],
    [   ['Mat', 'data', '', []],
        ['Mat', 'mean', '', []],
        ['Mat', 'eigenvectors', '', []],
        ['Mat', 'result', '', ['/O']]],
    'void']
ok: FUNC <void cv..PCABackProject [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat result=]>

--- Incoming ---
[   'cv.SVDecomp',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'w', '', ['/O']],
        ['Mat', 'u', '', ['/O']],
        ['Mat', 'vt', '', ['/O']],
        ['int', 'flags', '0', []]],
    'void']
ok: FUNC <void cv..SVDecomp [ARG Mat src=, ARG Mat w=, ARG Mat u=, ARG Mat vt=, ARG int flags=0]>

--- Incoming ---
[   'cv.SVBackSubst',
    'void',
    [],
    [   ['Mat', 'w', '', []],
        ['Mat', 'u', '', []],
        ['Mat', 'vt', '', []],
        ['Mat', 'rhs', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..SVBackSubst [ARG Mat w=, ARG Mat u=, ARG Mat vt=, ARG Mat rhs=, ARG Mat dst=]>

--- Incoming ---
[   'cv.Mahalanobis',
    'double',
    [],
    [['Mat', 'v1', '', []], ['Mat', 'v2', '', []], ['Mat', 'icovar', '', []]],
    'double']
ok: FUNC <double cv..Mahalanobis [ARG Mat v1=, ARG Mat v2=, ARG Mat icovar=]>

--- Incoming ---
[   'cv.dft',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '0', []],
        ['int', 'nonzeroRows', '0', []]],
    'void']
ok: FUNC <void cv..dft [ARG Mat src=, ARG Mat dst=, ARG int flags=0, ARG int nonzeroRows=0]>

--- Incoming ---
[   'cv.idft',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '0', []],
        ['int', 'nonzeroRows', '0', []]],
    'void']
ok: FUNC <void cv..idft [ARG Mat src=, ARG Mat dst=, ARG int flags=0, ARG int nonzeroRows=0]>

--- Incoming ---
[   'cv.dct',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '0', []]],
    'void']
ok: FUNC <void cv..dct [ARG Mat src=, ARG Mat dst=, ARG int flags=0]>

--- Incoming ---
[   'cv.idct',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '0', []]],
    'void']
ok: FUNC <void cv..idct [ARG Mat src=, ARG Mat dst=, ARG int flags=0]>

--- Incoming ---
[   'cv.mulSpectrums',
    'void',
    [],
    [   ['Mat', 'a', '', []],
        ['Mat', 'b', '', []],
        ['Mat', 'c', '', ['/O']],
        ['int', 'flags', '', []],
        ['bool', 'conjB', 'false', []]],
    'void']
ok: FUNC <void cv..mulSpectrums [ARG Mat a=, ARG Mat b=, ARG Mat c=, ARG int flags=, ARG bool conjB=false]>

--- Incoming ---
['cv.getOptimalDFTSize', 'int', [], [['int', 'vecsize', '', []]], 'int']
ok: FUNC <int cv..getOptimalDFTSize [ARG int vecsize=]>

--- Incoming ---
['cv.setRNGSeed', 'void', [], [['int', 'seed', '', []]], 'void']
ok: FUNC <void cv..setRNGSeed [ARG int seed=]>

--- Incoming ---
[   'cv.randu',
    'void',
    [],
    [   ['Mat', 'dst', '', ['/IO']],
        ['Mat', 'low', '', []],
        ['Mat', 'high', '', []]],
    'void']
ok: FUNC <void cv..randu [ARG Mat dst=, ARG double low=, ARG double high=]>

--- Incoming ---
[   'cv.randn',
    'void',
    [],
    [   ['Mat', 'dst', '', ['/IO']],
        ['Mat', 'mean', '', []],
        ['Mat', 'stddev', '', []]],
    'void']
ok: FUNC <void cv..randn [ARG Mat dst=, ARG double mean=, ARG double stddev=]>

--- Incoming ---
[   'cv.randShuffle',
    'void',
    [],
    [   ['Mat', 'dst', '', ['/IO']],
        ['double', 'iterFactor', '1.', []],
        ['RNG*', 'rng', '0', []]],
    'void']
ok: FUNC <void cv..randShuffle [ARG Mat dst=, ARG double iterFactor=1., ARG RNG * rng=0]>

--- Incoming ---
['const cv.PCA.DATA_AS_ROW', '0', [], [], None]
class not found: CONST DATA_AS_ROW=0

--- Incoming ---
['const cv.PCA.DATA_AS_COL', '1', [], [], None]
class not found: CONST DATA_AS_COL=1

--- Incoming ---
['const cv.PCA.USE_AVG', '2', [], [], None]
class not found: CONST USE_AVG=2

--- Incoming ---
['const cv.SVD.MODIFY_A', '1', [], [], None]
class not found: CONST MODIFY_A=1

--- Incoming ---
['const cv.SVD.NO_UV', '2', [], [], None]
class not found: CONST NO_UV=2

--- Incoming ---
['const cv.SVD.FULL_UV', '4', [], [], None]
class not found: CONST FULL_UV=4

--- Incoming ---
['const cv.RNG.UNIFORM', '0', [], [], None]
class not found: CONST UNIFORM=0

--- Incoming ---
['const cv.RNG.NORMAL', '1', [], [], None]
class not found: CONST NORMAL=1

--- Incoming ---
[   'cv.kmeans',
    'double',
    [],
    [   ['Mat', 'data', '', []],
        ['int', 'K', '', []],
        ['Mat', 'bestLabels', '', ['/IO']],
        ['TermCriteria', 'criteria', '', []],
        ['int', 'attempts', '', []],
        ['int', 'flags', '', []],
        ['Mat', 'centers', 'Mat()', ['/O']]],
    'double']
ok: FUNC <double cv..kmeans [ARG Mat data=, ARG int K=, ARG Mat bestLabels=, ARG TermCriteria criteria=, ARG int attempts=, ARG int flags=, ARG Mat centers=Mat()]>

--- Incoming ---
['const cv.Formatter.FMT_DEFAULT', '0', [], [], None]
class not found: CONST FMT_DEFAULT=0

--- Incoming ---
['const cv.Formatter.FMT_MATLAB', '1', [], [], None]
class not found: CONST FMT_MATLAB=1

--- Incoming ---
['const cv.Formatter.FMT_CSV', '2', [], [], None]
class not found: CONST FMT_CSV=2

--- Incoming ---
['const cv.Formatter.FMT_PYTHON', '3', [], [], None]
class not found: CONST FMT_PYTHON=3

--- Incoming ---
['const cv.Formatter.FMT_NUMPY', '4', [], [], None]
class not found: CONST FMT_NUMPY=4

--- Incoming ---
['const cv.Formatter.FMT_C', '5', [], [], None]
class not found: CONST FMT_C=5

--- Incoming ---
['class cv.Algorithm', '', [], [], None]
duplicated: CLASS cv::.Algorithm : 

--- Incoming ---
['cv.Algorithm.clear', 'void', ['/V'], [], 'void']
ok: FUNC <void cv.Algorithm.clear []>

--- Incoming ---
[   'cv.Algorithm.write',
    'void',
    ['/C'],
    [   ['Ptr_FileStorage', 'fs', '', ['/C', '/Ref']],
        ['String', 'name', 'String()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.Algorithm.write [ARG Ptr_FileStorage fs=, ARG String name=String()]>

--- Incoming ---
[   'cv.Algorithm.read',
    'void',
    ['/V'],
    [['FileNode', 'fn', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.Algorithm.read [ARG FileNode fn=]>

--- Incoming ---
['cv.Algorithm.empty', 'bool', ['/C', '/V'], [], 'bool']
ok: FUNC <bool cv.Algorithm.empty []>

--- Incoming ---
[   'cv.Algorithm.save',
    'void',
    ['/C', '/V'],
    [['String', 'filename', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.Algorithm.save [ARG String filename=]>

--- Incoming ---
['cv.Algorithm.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.Algorithm.getDefaultName []>

--- Incoming ---
['const cv.Param.INT', '0', [], [], None]
class not found: CONST INT=0

--- Incoming ---
['const cv.Param.BOOLEAN', '1', [], [], None]
class not found: CONST BOOLEAN=1

--- Incoming ---
['const cv.Param.REAL', '2', [], [], None]
class not found: CONST REAL=2

--- Incoming ---
['const cv.Param.STRING', '3', [], [], None]
class not found: CONST STRING=3

--- Incoming ---
['const cv.Param.MAT', '4', [], [], None]
class not found: CONST MAT=4

--- Incoming ---
['const cv.Param.MAT_VECTOR', '5', [], [], None]
class not found: CONST MAT_VECTOR=5

--- Incoming ---
['const cv.Param.ALGORITHM', '6', [], [], None]
class not found: CONST ALGORITHM=6

--- Incoming ---
['const cv.Param.FLOAT', '7', [], [], None]
class not found: CONST FLOAT=7

--- Incoming ---
['const cv.Param.UNSIGNED_INT', '8', [], [], None]
class not found: CONST UNSIGNED_INT=8

--- Incoming ---
['const cv.Param.UINT64', '9', [], [], None]
class not found: CONST UINT64=9

--- Incoming ---
['const cv.Param.UCHAR', '11', [], [], None]
class not found: CONST UCHAR=11

--- Incoming ---
['const cv.Param.SCALAR', '12', [], [], None]
class not found: CONST SCALAR=12


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/core\include/opencv2/core/utility.hpp =====
Namespaces: {'cv', 'cv.ogl', 'cv.cudev', 'cv.ipp', 'cv.Error', 'cv.cuda', 'cv.utils', 'cv.instr'}

--- Incoming ---
['cv.setNumThreads', 'void', [], [['int', 'nthreads', '', []]], 'void']
ok: FUNC <void cv..setNumThreads [ARG int nthreads=]>

--- Incoming ---
['cv.getNumThreads', 'int', [], [], 'int']
ok: FUNC <int cv..getNumThreads []>

--- Incoming ---
['cv.getThreadNum', 'int', [], [], 'int']
ok: FUNC <int cv..getThreadNum []>

--- Incoming ---
['cv.getBuildInformation', 'String', [], [], 'String']
ok: FUNC <String cv..getBuildInformation []>

--- Incoming ---
['cv.getVersionString', 'String', [], [], 'String']
ok: FUNC <String cv..getVersionString []>

--- Incoming ---
['cv.getVersionMajor', 'int', [], [], 'int']
ok: FUNC <int cv..getVersionMajor []>

--- Incoming ---
['cv.getVersionMinor', 'int', [], [], 'int']
ok: FUNC <int cv..getVersionMinor []>

--- Incoming ---
['cv.getVersionRevision', 'int', [], [], 'int']
ok: FUNC <int cv..getVersionRevision []>

--- Incoming ---
['cv.getTickCount', 'int64', [], [], 'int64']
ok: FUNC <int64 cv..getTickCount []>

--- Incoming ---
['cv.getTickFrequency', 'double', [], [], 'double']
ok: FUNC <double cv..getTickFrequency []>

--- Incoming ---
['class cv.TickMeter', '', [], [], None]
ok: class CLASS cv::.TickMeter : , name: TickMeter, base: 

--- Incoming ---
['cv.TickMeter.TickMeter', '', [], [], None]
ok: FUNC < cv.TickMeter.TickMeter []>

--- Incoming ---
['cv.TickMeter.start', 'void', [], [], 'void']
ok: FUNC <void cv.TickMeter.start []>

--- Incoming ---
['cv.TickMeter.stop', 'void', [], [], 'void']
ok: FUNC <void cv.TickMeter.stop []>

--- Incoming ---
['cv.TickMeter.getTimeTicks', 'int64', ['/C'], [], 'int64']
ok: FUNC <int64 cv.TickMeter.getTimeTicks []>

--- Incoming ---
['cv.TickMeter.getTimeMicro', 'double', ['/C'], [], 'double']
ok: FUNC <double cv.TickMeter.getTimeMicro []>

--- Incoming ---
['cv.TickMeter.getTimeMilli', 'double', ['/C'], [], 'double']
ok: FUNC <double cv.TickMeter.getTimeMilli []>

--- Incoming ---
['cv.TickMeter.getTimeSec', 'double', ['/C'], [], 'double']
ok: FUNC <double cv.TickMeter.getTimeSec []>

--- Incoming ---
['cv.TickMeter.getCounter', 'int64', ['/C'], [], 'int64']
ok: FUNC <int64 cv.TickMeter.getCounter []>

--- Incoming ---
['cv.TickMeter.reset', 'void', [], [], 'void']
ok: FUNC <void cv.TickMeter.reset []>

--- Incoming ---
['cv.getCPUTickCount', 'int64', [], [], 'int64']
ok: FUNC <int64 cv..getCPUTickCount []>

--- Incoming ---
['cv.checkHardwareSupport', 'bool', [], [['int', 'feature', '', []]], 'bool']
manual: FUNC <bool cv..checkHardwareSupport [ARG int feature=]>

--- Incoming ---
[   'cv.getHardwareFeatureName',
    'String',
    [],
    [['int', 'feature', '', []]],
    'String']
ok: FUNC <String cv..getHardwareFeatureName [ARG int feature=]>

--- Incoming ---
['cv.getNumberOfCPUs', 'int', [], [], 'int']
ok: FUNC <int cv..getNumberOfCPUs []>

--- Incoming ---
['cv.setUseOptimized', 'void', [], [['bool', 'onoff', '', []]], 'void']
manual: FUNC <void cv..setUseOptimized [ARG bool onoff=]>

--- Incoming ---
['cv.useOptimized', 'bool', [], [], 'bool']
manual: FUNC <bool cv..useOptimized []>

--- Incoming ---
['const cv.instr.TYPE_GENERAL', '0', [], [], None]
ok: CONST TYPE_GENERAL=0

--- Incoming ---
['const cv.instr.TYPE_MARKER', '0+1', [], [], None]
ok: CONST TYPE_MARKER=0+1

--- Incoming ---
['const cv.instr.TYPE_WRAPPER', '0+2', [], [], None]
ok: CONST TYPE_WRAPPER=0+2

--- Incoming ---
['const cv.instr.TYPE_FUN', '0+3', [], [], None]
ok: CONST TYPE_FUN=0+3

--- Incoming ---
['const cv.instr.IMPL_PLAIN', '0', [], [], None]
ok: CONST IMPL_PLAIN=0

--- Incoming ---
['const cv.instr.IMPL_IPP', '0+1', [], [], None]
ok: CONST IMPL_IPP=0+1

--- Incoming ---
['const cv.instr.IMPL_OPENCL', '0+2', [], [], None]
ok: CONST IMPL_OPENCL=0+2

--- Incoming ---
['const cv.instr.FLAGS_NONE', '0', [], [], None]
ok: CONST FLAGS_NONE=0

--- Incoming ---
['const cv.instr.FLAGS_MAPPING', '0x01', [], [], None]
ok: CONST FLAGS_MAPPING=0x01

--- Incoming ---
['const cv.instr.FLAGS_EXPAND_SAME_NAMES', '0x02', [], [], None]
ok: CONST FLAGS_EXPAND_SAME_NAMES=0x02


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/core\misc/java/src/cpp/core_manual.hpp =====
Namespaces: {'cv', 'cv.ogl', 'cv.cudev', 'cv.ipp', 'cv.Error', 'cv.cuda', 'cv.utils', 'cv.instr'}

--- Incoming ---
['cv.setErrorVerbosity', 'void', [], [['bool', 'verbose', '', []]], 'void']
ok: FUNC <void cv..setErrorVerbosity [ARG bool verbose=]>

--- Incoming ---
[   'cv.add',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..add [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>

--- Incoming ---
[   'cv.subtract',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'mask', 'Mat()', []],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..subtract [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>

--- Incoming ---
[   'cv.multiply',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..multiply [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   'cv.divide',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'scale', '1', []],
        ['int', 'dtype', '-1', []]],
    'void']
ok: FUNC <void cv..divide [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>

--- Incoming ---
[   'cv.absdiff',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..absdiff [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.compare',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'cmpop', '', []]],
    'void']
ok: FUNC <void cv..compare [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG int cmpop=]>

--- Incoming ---
[   'cv.min',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..min [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>

--- Incoming ---
[   'cv.max',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Scalar', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..max [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>


===== Generating... =====
CLASS ::.Core : 
[CONST CV_8U=0(manual), CONST CV_8S=1(manual), CONST CV_16U=2(manual), CONST CV_16S=3(manual), CONST CV_32S=4(manual), CONST CV_32F=5(manual), CONST CV_64F=6(manual), CONST CV_USRTYPE1=7(manual)]
[CONST SVD_MODIFY_A=1(manual), CONST SVD_NO_UV=2(manual), CONST SVD_FULL_UV=4(manual), CONST FILLED=-1(manual), CONST REDUCE_SUM=0(manual), CONST REDUCE_AVG=1(manual), CONST REDUCE_MAX=2(manual), CONST REDUCE_MIN=3(manual), CONST StsOk=0, CONST StsBackTrace=-1, CONST StsError=-2, CONST StsInternal=-3, CONST StsNoMem=-4, CONST StsBadArg=-5, CONST StsBadFunc=-6, CONST StsNoConv=-7, CONST StsAutoTrace=-8, CONST HeaderIsNull=-9, CONST BadImageSize=-10, CONST BadOffset=-11, CONST BadDataPtr=-12, CONST BadStep=-13, CONST BadModelOrChSeq=-14, CONST BadNumChannels=-15, CONST BadNumChannel1U=-16, CONST BadDepth=-17, CONST BadAlphaChannel=-18, CONST BadOrder=-19, CONST BadOrigin=-20, CONST BadAlign=-21, CONST BadCallBack=-22, CONST BadTileSize=-23, CONST BadCOI=-24, CONST BadROISize=-25, CONST MaskIsTiled=-26, CONST StsNullPtr=-27, CONST StsVecLengthErr=-28, CONST StsFilterStructContentErr=-29, CONST StsKernelStructContentErr=-30, CONST StsFilterOffsetErr=-31, CONST StsBadSize=-201, CONST StsDivByZero=-202, CONST StsInplaceNotSupported=-203, CONST StsObjectNotFound=-204, CONST StsUnmatchedFormats=-205, CONST StsBadFlag=-206, CONST StsBadPoint=-207, CONST StsBadMask=-208, CONST StsUnmatchedSizes=-209, CONST StsUnsupportedFormat=-210, CONST StsOutOfRange=-211, CONST StsParseError=-212, CONST StsNotImplemented=-213, CONST StsBadMemBlock=-214, CONST StsAssert=-215, CONST GpuNotSupported=-216, CONST GpuApiCallError=-217, CONST OpenGlNotSupported=-218, CONST OpenGlApiCallError=-219, CONST OpenCLApiCallError=-220, CONST OpenCLDoubleNotSupported=-221, CONST OpenCLInitError=-222, CONST OpenCLNoAMDBlasFft=-223, CONST DECOMP_LU=0, CONST DECOMP_SVD=1, CONST DECOMP_EIG=2, CONST DECOMP_CHOLESKY=3, CONST DECOMP_QR=4, CONST DECOMP_NORMAL=16, CONST NORM_INF=1, CONST NORM_L1=2, CONST NORM_L2=4, CONST NORM_L2SQR=5, CONST NORM_HAMMING=6, CONST NORM_HAMMING2=7, CONST NORM_TYPE_MASK=7, CONST NORM_RELATIVE=8, CONST NORM_MINMAX=32, CONST CMP_EQ=0, CONST CMP_GT=1, CONST CMP_GE=2, CONST CMP_LT=3, CONST CMP_LE=4, CONST CMP_NE=5, CONST GEMM_1_T=1, CONST GEMM_2_T=2, CONST GEMM_3_T=4, CONST DFT_INVERSE=1, CONST DFT_SCALE=2, CONST DFT_ROWS=4, CONST DFT_COMPLEX_OUTPUT=16, CONST DFT_REAL_OUTPUT=32, CONST DFT_COMPLEX_INPUT=64, CONST DCT_INVERSE=DFT_INVERSE, CONST DCT_ROWS=DFT_ROWS, CONST BORDER_CONSTANT=0, CONST BORDER_REPLICATE=1, CONST BORDER_REFLECT=2, CONST BORDER_WRAP=3, CONST BORDER_REFLECT_101=4, CONST BORDER_TRANSPARENT=5, CONST BORDER_REFLECT101=BORDER_REFLECT_101, CONST BORDER_DEFAULT=BORDER_REFLECT_101, CONST BORDER_ISOLATED=16, CONST SORT_EVERY_ROW=0, CONST SORT_EVERY_COLUMN=1, CONST SORT_ASCENDING=0, CONST SORT_DESCENDING=16, CONST COVAR_SCRAMBLED=0, CONST COVAR_NORMAL=1, CONST COVAR_USE_AVG=2, CONST COVAR_SCALE=4, CONST COVAR_ROWS=8, CONST COVAR_COLS=16, CONST KMEANS_RANDOM_CENTERS=0, CONST KMEANS_PP_CENTERS=2, CONST KMEANS_USE_INITIAL_LABELS=1, CONST LINE_4=4, CONST LINE_8=8, CONST LINE_AA=16, CONST FONT_HERSHEY_SIMPLEX=0, CONST FONT_HERSHEY_PLAIN=1, CONST FONT_HERSHEY_DUPLEX=2, CONST FONT_HERSHEY_COMPLEX=3, CONST FONT_HERSHEY_TRIPLEX=4, CONST FONT_HERSHEY_COMPLEX_SMALL=5, CONST FONT_HERSHEY_SCRIPT_SIMPLEX=6, CONST FONT_HERSHEY_SCRIPT_COMPLEX=7, CONST FONT_ITALIC=16, CONST ROTATE_90_CLOCKWISE=0, CONST ROTATE_180=1, CONST ROTATE_90_COUNTERCLOCKWISE=2, CONST TYPE_GENERAL=0, CONST TYPE_MARKER=0+1, CONST TYPE_WRAPPER=0+2, CONST TYPE_FUN=0+3, CONST IMPL_PLAIN=0, CONST IMPL_IPP=0+1, CONST IMPL_OPENCL=0+2, CONST FLAGS_NONE=0, CONST FLAGS_MAPPING=0x01, CONST FLAGS_EXPAND_SAME_NAMES=0x02]
FUNC <Scalar cv..mean [ARG Mat src=, ARG Mat mask=Mat()]>
java: Scalar mean(Mat src, Mat mask)
java: Scalar mean(Mat src)
FUNC <Scalar cv..sum [ARG Mat src=]>
java: Scalar sumElems(Mat src)
FUNC <Scalar cv..trace [ARG Mat mtx=]>
java: Scalar trace(Mat mtx)
FUNC <String cv..getBuildInformation []>
java: String getBuildInformation()
FUNC <String cv..getHardwareFeatureName [ARG int feature=]>
java: String getHardwareFeatureName(int feature)
FUNC <String cv..getVersionString []>
java: String getVersionString()
FUNC <String cv.ipp..getIppVersion []>
java: String getIppVersion()
FUNC <bool cv..checkRange [ARG Mat a=, ARG bool quiet=true, ARG  * pos=0, ARG double minVal=-DBL_MAX, ARG double maxVal=DBL_MAX]>
java: boolean checkRange(Mat a, boolean quiet, double minVal, double maxVal)
java: boolean checkRange(Mat a, boolean quiet, double minVal)
java: boolean checkRange(Mat a, boolean quiet)
java: boolean checkRange(Mat a, boolean quiet)
java: boolean checkRange(Mat a)
FUNC <bool cv..eigen [ARG Mat src=, ARG Mat eigenvalues=, ARG Mat eigenvectors=Mat()]>
java: boolean eigen(Mat src, Mat eigenvalues, Mat eigenvectors)
java: boolean eigen(Mat src, Mat eigenvalues)
FUNC <bool cv..solve [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int flags=DECOMP_LU]>
java: boolean solve(Mat src1, Mat src2, Mat dst, int flags)
java: boolean solve(Mat src1, Mat src2, Mat dst)
FUNC <bool cv.ipp..useIPP []>
java: boolean useIPP()
FUNC <bool cv.ipp..useIPP_NE []>
java: boolean useIPP_NE()
FUNC <double cv..Mahalanobis [ARG Mat v1=, ARG Mat v2=, ARG Mat icovar=]>
java: double Mahalanobis(Mat v1, Mat v2, Mat icovar)
FUNC <double cv..PSNR [ARG Mat src1=, ARG Mat src2=, ARG double R=255.]>
java: double PSNR(Mat src1, Mat src2, double R)
java: double PSNR(Mat src1, Mat src2)
FUNC <double cv..determinant [ARG Mat mtx=]>
java: double determinant(Mat mtx)
FUNC <double cv..getTickFrequency []>
java: double getTickFrequency()
FUNC <double cv..invert [ARG Mat src=, ARG Mat dst=, ARG int flags=DECOMP_LU]>
java: double invert(Mat src, Mat dst, int flags)
java: double invert(Mat src, Mat dst)
FUNC <double cv..kmeans [ARG Mat data=, ARG int K=, ARG Mat bestLabels=, ARG TermCriteria criteria=, ARG int attempts=, ARG int flags=, ARG Mat centers=Mat()]>
java: double kmeans(Mat data, int K, Mat bestLabels, TermCriteria criteria, int attempts, int flags, Mat centers)
java: double kmeans(Mat data, int K, Mat bestLabels, TermCriteria criteria, int attempts, int flags)
FUNC <double cv..norm [ARG Mat src1=, ARG Mat src2=, ARG int normType=NORM_L2, ARG Mat mask=Mat()]>
java: double norm(Mat src1, Mat src2, int normType, Mat mask)
java: double norm(Mat src1, Mat src2, int normType)
java: double norm(Mat src1, Mat src2)
FUNC <double cv..norm [ARG Mat src1=, ARG int normType=NORM_L2, ARG Mat mask=Mat()]>
java: double norm(Mat src1, int normType, Mat mask)
java: double norm(Mat src1, int normType)
java: double norm(Mat src1)
FUNC <double cv..solvePoly [ARG Mat coeffs=, ARG Mat roots=, ARG int maxIters=300]>
java: double solvePoly(Mat coeffs, Mat roots, int maxIters)
java: double solvePoly(Mat coeffs, Mat roots)
FUNC <float cv..cubeRoot [ARG float val=]>
java: float cubeRoot(float val)
FUNC <float cv..fastAtan2 [ARG float y=, ARG float x=]>
java: float fastAtan2(float y, float x)
FUNC <int cv..borderInterpolate [ARG int p=, ARG int len=, ARG int borderType=]>
java: int borderInterpolate(int p, int len, int borderType)
FUNC <int cv..countNonZero [ARG Mat src=]>
java: int countNonZero(Mat src)
FUNC <int cv..getNumThreads []>
java: int getNumThreads()
FUNC <int cv..getNumberOfCPUs []>
java: int getNumberOfCPUs()
FUNC <int cv..getOptimalDFTSize [ARG int vecsize=]>
java: int getOptimalDFTSize(int vecsize)
FUNC <int cv..getThreadNum []>
java: int getThreadNum()
FUNC <int cv..getVersionMajor []>
java: int getVersionMajor()
FUNC <int cv..getVersionMinor []>
java: int getVersionMinor()
FUNC <int cv..getVersionRevision []>
java: int getVersionRevision()
FUNC <int cv..solveCubic [ARG Mat coeffs=, ARG Mat roots=]>
java: int solveCubic(Mat coeffs, Mat roots)
FUNC <int64 cv..getCPUTickCount []>
java: long getCPUTickCount()
FUNC <int64 cv..getTickCount []>
java: long getTickCount()
FUNC <void cv..LUT [ARG Mat src=, ARG Mat lut=, ARG Mat dst=]>
java: void LUT(Mat src, Mat lut, Mat dst)
FUNC <void cv..PCABackProject [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat result=]>
java: void PCABackProject(Mat data, Mat mean, Mat eigenvectors, Mat result)
FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat eigenvalues=, ARG double retainedVariance=]>
java: void PCACompute2(Mat data, Mat mean, Mat eigenvectors, Mat eigenvalues, double retainedVariance)
FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat eigenvalues=, ARG int maxComponents=0]>
java: void PCACompute2(Mat data, Mat mean, Mat eigenvectors, Mat eigenvalues, int maxComponents)
java: void PCACompute2(Mat data, Mat mean, Mat eigenvectors, Mat eigenvalues)
FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG double retainedVariance=]>
java: void PCACompute(Mat data, Mat mean, Mat eigenvectors, double retainedVariance)
FUNC <void cv..PCACompute [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG int maxComponents=0]>
java: void PCACompute(Mat data, Mat mean, Mat eigenvectors, int maxComponents)
java: void PCACompute(Mat data, Mat mean, Mat eigenvectors)
FUNC <void cv..PCAProject [ARG Mat data=, ARG Mat mean=, ARG Mat eigenvectors=, ARG Mat result=]>
java: void PCAProject(Mat data, Mat mean, Mat eigenvectors, Mat result)
FUNC <void cv..SVBackSubst [ARG Mat w=, ARG Mat u=, ARG Mat vt=, ARG Mat rhs=, ARG Mat dst=]>
java: void SVBackSubst(Mat w, Mat u, Mat vt, Mat rhs, Mat dst)
FUNC <void cv..SVDecomp [ARG Mat src=, ARG Mat w=, ARG Mat u=, ARG Mat vt=, ARG int flags=0]>
java: void SVDecomp(Mat src, Mat w, Mat u, Mat vt, int flags)
java: void SVDecomp(Mat src, Mat w, Mat u, Mat vt)
FUNC <void cv..absdiff [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>
java: void absdiff(Mat src1, Mat src2, Mat dst)
FUNC <void cv..absdiff [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>
java: void absdiff(Mat src1, Scalar src2, Mat dst)
FUNC <void cv..add [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>
java: void add(Mat src1, Mat src2, Mat dst, Mat mask, int dtype)
java: void add(Mat src1, Mat src2, Mat dst, Mat mask)
java: void add(Mat src1, Mat src2, Mat dst)
FUNC <void cv..add [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>
java: void add(Mat src1, Scalar src2, Mat dst, Mat mask, int dtype)
java: void add(Mat src1, Scalar src2, Mat dst, Mat mask)
java: void add(Mat src1, Scalar src2, Mat dst)
FUNC <void cv..addWeighted [ARG Mat src1=, ARG double alpha=, ARG Mat src2=, ARG double beta=, ARG double gamma=, ARG Mat dst=, ARG int dtype=-1]>
java: void addWeighted(Mat src1, double alpha, Mat src2, double beta, double gamma, Mat dst, int dtype)
java: void addWeighted(Mat src1, double alpha, Mat src2, double beta, double gamma, Mat dst)
FUNC <void cv..batchDistance [ARG Mat src1=, ARG Mat src2=, ARG Mat dist=, ARG int dtype=, ARG Mat nidx=, ARG int normType=NORM_L2, ARG int K=0, ARG Mat mask=Mat(), ARG int update=0, ARG bool crosscheck=false]>
java: void batchDistance(Mat src1, Mat src2, Mat dist, int dtype, Mat nidx, int normType, int K, Mat mask, int update, boolean crosscheck)
java: void batchDistance(Mat src1, Mat src2, Mat dist, int dtype, Mat nidx, int normType, int K, Mat mask, int update)
java: void batchDistance(Mat src1, Mat src2, Mat dist, int dtype, Mat nidx, int normType, int K, Mat mask)
java: void batchDistance(Mat src1, Mat src2, Mat dist, int dtype, Mat nidx, int normType, int K)
java: void batchDistance(Mat src1, Mat src2, Mat dist, int dtype, Mat nidx, int normType)
java: void batchDistance(Mat src1, Mat src2, Mat dist, int dtype, Mat nidx)
FUNC <void cv..bitwise_and [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>
java: void bitwise_and(Mat src1, Mat src2, Mat dst, Mat mask)
java: void bitwise_and(Mat src1, Mat src2, Mat dst)
FUNC <void cv..bitwise_not [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>
java: void bitwise_not(Mat src, Mat dst, Mat mask)
java: void bitwise_not(Mat src, Mat dst)
FUNC <void cv..bitwise_or [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>
java: void bitwise_or(Mat src1, Mat src2, Mat dst, Mat mask)
java: void bitwise_or(Mat src1, Mat src2, Mat dst)
FUNC <void cv..bitwise_xor [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>
java: void bitwise_xor(Mat src1, Mat src2, Mat dst, Mat mask)
java: void bitwise_xor(Mat src1, Mat src2, Mat dst)
FUNC <void cv..calcCovarMatrix [ARG Mat samples=, ARG Mat covar=, ARG Mat mean=, ARG int flags=, ARG int ctype=CV_64F]>
java: void calcCovarMatrix(Mat samples, Mat covar, Mat mean, int flags, int ctype)
java: void calcCovarMatrix(Mat samples, Mat covar, Mat mean, int flags)
FUNC <void cv..cartToPolar [ARG Mat x=, ARG Mat y=, ARG Mat magnitude=, ARG Mat angle=, ARG bool angleInDegrees=false]>
java: void cartToPolar(Mat x, Mat y, Mat magnitude, Mat angle, boolean angleInDegrees)
java: void cartToPolar(Mat x, Mat y, Mat magnitude, Mat angle)
FUNC <void cv..compare [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int cmpop=]>
java: void compare(Mat src1, Mat src2, Mat dst, int cmpop)
FUNC <void cv..compare [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG int cmpop=]>
java: void compare(Mat src1, Scalar src2, Mat dst, int cmpop)
FUNC <void cv..completeSymm [ARG Mat m=, ARG bool lowerToUpper=false]>
java: void completeSymm(Mat m, boolean lowerToUpper)
java: void completeSymm(Mat m)
FUNC <void cv..convertFp16 [ARG Mat src=, ARG Mat dst=]>
java: void convertFp16(Mat src, Mat dst)
FUNC <void cv..convertScaleAbs [ARG Mat src=, ARG Mat dst=, ARG double alpha=1, ARG double beta=0]>
java: void convertScaleAbs(Mat src, Mat dst, double alpha, double beta)
java: void convertScaleAbs(Mat src, Mat dst, double alpha)
java: void convertScaleAbs(Mat src, Mat dst)
FUNC <void cv..copyMakeBorder [ARG Mat src=, ARG Mat dst=, ARG int top=, ARG int bottom=, ARG int left=, ARG int right=, ARG int borderType=, ARG Scalar value=Scalar()]>
java: void copyMakeBorder(Mat src, Mat dst, int top, int bottom, int left, int right, int borderType, Scalar value)
java: void copyMakeBorder(Mat src, Mat dst, int top, int bottom, int left, int right, int borderType)
FUNC <void cv..dct [ARG Mat src=, ARG Mat dst=, ARG int flags=0]>
java: void dct(Mat src, Mat dst, int flags)
java: void dct(Mat src, Mat dst)
FUNC <void cv..dft [ARG Mat src=, ARG Mat dst=, ARG int flags=0, ARG int nonzeroRows=0]>
java: void dft(Mat src, Mat dst, int flags, int nonzeroRows)
java: void dft(Mat src, Mat dst, int flags)
java: void dft(Mat src, Mat dst)
FUNC <void cv..divide [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>
java: void divide(Mat src1, Mat src2, Mat dst, double scale, int dtype)
java: void divide(Mat src1, Mat src2, Mat dst, double scale)
java: void divide(Mat src1, Mat src2, Mat dst)
FUNC <void cv..divide [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>
java: void divide(Mat src1, Scalar src2, Mat dst, double scale, int dtype)
java: void divide(Mat src1, Scalar src2, Mat dst, double scale)
java: void divide(Mat src1, Scalar src2, Mat dst)
FUNC <void cv..divide [ARG double scale=, ARG Mat src2=, ARG Mat dst=, ARG int dtype=-1]>
java: void divide(double scale, Mat src2, Mat dst, int dtype)
java: void divide(double scale, Mat src2, Mat dst)
FUNC <void cv..eigenNonSymmetric [ARG Mat src=, ARG Mat eigenvalues=, ARG Mat eigenvectors=]>
java: void eigenNonSymmetric(Mat src, Mat eigenvalues, Mat eigenvectors)
FUNC <void cv..exp [ARG Mat src=, ARG Mat dst=]>
java: void exp(Mat src, Mat dst)
FUNC <void cv..extractChannel [ARG Mat src=, ARG Mat dst=, ARG int coi=]>
java: void extractChannel(Mat src, Mat dst, int coi)
FUNC <void cv..findNonZero [ARG Mat src=, ARG Mat idx=]>
java: void findNonZero(Mat src, Mat idx)
FUNC <void cv..flip [ARG Mat src=, ARG Mat dst=, ARG int flipCode=]>
java: void flip(Mat src, Mat dst, int flipCode)
FUNC <void cv..gemm [ARG Mat src1=, ARG Mat src2=, ARG double alpha=, ARG Mat src3=, ARG double beta=, ARG Mat dst=, ARG int flags=0]>
java: void gemm(Mat src1, Mat src2, double alpha, Mat src3, double beta, Mat dst, int flags)
java: void gemm(Mat src1, Mat src2, double alpha, Mat src3, double beta, Mat dst)
FUNC <void cv..hconcat [ARG vector_Mat src=, ARG Mat dst=]>
java: void hconcat(List<Mat> src, Mat dst)
FUNC <void cv..idct [ARG Mat src=, ARG Mat dst=, ARG int flags=0]>
java: void idct(Mat src, Mat dst, int flags)
java: void idct(Mat src, Mat dst)
FUNC <void cv..idft [ARG Mat src=, ARG Mat dst=, ARG int flags=0, ARG int nonzeroRows=0]>
java: void idft(Mat src, Mat dst, int flags, int nonzeroRows)
java: void idft(Mat src, Mat dst, int flags)
java: void idft(Mat src, Mat dst)
FUNC <void cv..inRange [ARG Mat src=, ARG Scalar lowerb=, ARG Scalar upperb=, ARG Mat dst=]>
java: void inRange(Mat src, Scalar lowerb, Scalar upperb, Mat dst)
FUNC <void cv..insertChannel [ARG Mat src=, ARG Mat dst=, ARG int coi=]>
java: void insertChannel(Mat src, Mat dst, int coi)
FUNC <void cv..log [ARG Mat src=, ARG Mat dst=]>
java: void log(Mat src, Mat dst)
FUNC <void cv..magnitude [ARG Mat x=, ARG Mat y=, ARG Mat magnitude=]>
java: void magnitude(Mat x, Mat y, Mat magnitude)
FUNC <void cv..max [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>
java: void max(Mat src1, Mat src2, Mat dst)
FUNC <void cv..max [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>
java: void max(Mat src1, Scalar src2, Mat dst)
FUNC <void cv..meanStdDev [ARG Mat src=, ARG vector_double mean=, ARG vector_double stddev=, ARG Mat mask=Mat()]>
java: void meanStdDev(Mat src, MatOfDouble mean, MatOfDouble stddev, Mat mask)
java: void meanStdDev(Mat src, MatOfDouble mean, MatOfDouble stddev)
FUNC <void cv..merge [ARG vector_Mat mv=, ARG Mat dst=]>
java: void merge(List<Mat> mv, Mat dst)
FUNC <void cv..min [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=]>
java: void min(Mat src1, Mat src2, Mat dst)
FUNC <void cv..min [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=]>
java: void min(Mat src1, Scalar src2, Mat dst)
FUNC <void cv..mixChannels [ARG vector_Mat src=, ARG vector_Mat dst=, ARG vector_int fromTo=]>
java: void mixChannels(List<Mat> src, List<Mat> dst, MatOfInt fromTo)
FUNC <void cv..mulSpectrums [ARG Mat a=, ARG Mat b=, ARG Mat c=, ARG int flags=, ARG bool conjB=false]>
java: void mulSpectrums(Mat a, Mat b, Mat c, int flags, boolean conjB)
java: void mulSpectrums(Mat a, Mat b, Mat c, int flags)
FUNC <void cv..mulTransposed [ARG Mat src=, ARG Mat dst=, ARG bool aTa=, ARG Mat delta=Mat(), ARG double scale=1, ARG int dtype=-1]>
java: void mulTransposed(Mat src, Mat dst, boolean aTa, Mat delta, double scale, int dtype)
java: void mulTransposed(Mat src, Mat dst, boolean aTa, Mat delta, double scale)
java: void mulTransposed(Mat src, Mat dst, boolean aTa, Mat delta)
java: void mulTransposed(Mat src, Mat dst, boolean aTa)
FUNC <void cv..multiply [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>
java: void multiply(Mat src1, Mat src2, Mat dst, double scale, int dtype)
java: void multiply(Mat src1, Mat src2, Mat dst, double scale)
java: void multiply(Mat src1, Mat src2, Mat dst)
FUNC <void cv..multiply [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG double scale=1, ARG int dtype=-1]>
java: void multiply(Mat src1, Scalar src2, Mat dst, double scale, int dtype)
java: void multiply(Mat src1, Scalar src2, Mat dst, double scale)
java: void multiply(Mat src1, Scalar src2, Mat dst)
FUNC <void cv..normalize [ARG Mat src=, ARG Mat dst=, ARG double alpha=1, ARG double beta=0, ARG int norm_type=NORM_L2, ARG int dtype=-1, ARG Mat mask=Mat()]>
java: void normalize(Mat src, Mat dst, double alpha, double beta, int norm_type, int dtype, Mat mask)
java: void normalize(Mat src, Mat dst, double alpha, double beta, int norm_type, int dtype)
java: void normalize(Mat src, Mat dst, double alpha, double beta, int norm_type)
java: void normalize(Mat src, Mat dst, double alpha, double beta)
java: void normalize(Mat src, Mat dst, double alpha)
java: void normalize(Mat src, Mat dst)
FUNC <void cv..patchNaNs [ARG Mat a=, ARG double val=0]>
java: void patchNaNs(Mat a, double val)
java: void patchNaNs(Mat a)
FUNC <void cv..perspectiveTransform [ARG Mat src=, ARG Mat dst=, ARG Mat m=]>
java: void perspectiveTransform(Mat src, Mat dst, Mat m)
FUNC <void cv..phase [ARG Mat x=, ARG Mat y=, ARG Mat angle=, ARG bool angleInDegrees=false]>
java: void phase(Mat x, Mat y, Mat angle, boolean angleInDegrees)
java: void phase(Mat x, Mat y, Mat angle)
FUNC <void cv..polarToCart [ARG Mat magnitude=, ARG Mat angle=, ARG Mat x=, ARG Mat y=, ARG bool angleInDegrees=false]>
java: void polarToCart(Mat magnitude, Mat angle, Mat x, Mat y, boolean angleInDegrees)
java: void polarToCart(Mat magnitude, Mat angle, Mat x, Mat y)
FUNC <void cv..pow [ARG Mat src=, ARG double power=, ARG Mat dst=]>
java: void pow(Mat src, double power, Mat dst)
FUNC <void cv..randShuffle [ARG Mat dst=, ARG double iterFactor=1., ARG RNG * rng=0]>
java: void randShuffle(Mat dst, double iterFactor)
java: void randShuffle(Mat dst, double iterFactor)
java: void randShuffle(Mat dst)
FUNC <void cv..randn [ARG Mat dst=, ARG double mean=, ARG double stddev=]>
java: void randn(Mat dst, double mean, double stddev)
FUNC <void cv..randu [ARG Mat dst=, ARG double low=, ARG double high=]>
java: void randu(Mat dst, double low, double high)
FUNC <void cv..reduce [ARG Mat src=, ARG Mat dst=, ARG int dim=, ARG int rtype=, ARG int dtype=-1]>
java: void reduce(Mat src, Mat dst, int dim, int rtype, int dtype)
java: void reduce(Mat src, Mat dst, int dim, int rtype)
FUNC <void cv..repeat [ARG Mat src=, ARG int ny=, ARG int nx=, ARG Mat dst=]>
java: void repeat(Mat src, int ny, int nx, Mat dst)
FUNC <void cv..rotate [ARG Mat src=, ARG Mat dst=, ARG int rotateCode=]>
java: void rotate(Mat src, Mat dst, int rotateCode)
FUNC <void cv..scaleAdd [ARG Mat src1=, ARG double alpha=, ARG Mat src2=, ARG Mat dst=]>
java: void scaleAdd(Mat src1, double alpha, Mat src2, Mat dst)
FUNC <void cv..setErrorVerbosity [ARG bool verbose=]>
java: void setErrorVerbosity(boolean verbose)
FUNC <void cv..setIdentity [ARG Mat mtx=, ARG Scalar s=Scalar(1)]>
java: void setIdentity(Mat mtx, Scalar s)
java: void setIdentity(Mat mtx)
FUNC <void cv..setNumThreads [ARG int nthreads=]>
java: void setNumThreads(int nthreads)
FUNC <void cv..setRNGSeed [ARG int seed=]>
java: void setRNGSeed(int seed)
FUNC <void cv..sort [ARG Mat src=, ARG Mat dst=, ARG int flags=]>
java: void sort(Mat src, Mat dst, int flags)
FUNC <void cv..sortIdx [ARG Mat src=, ARG Mat dst=, ARG int flags=]>
java: void sortIdx(Mat src, Mat dst, int flags)
FUNC <void cv..split [ARG Mat m=, ARG vector_Mat mv=]>
java: void split(Mat m, List<Mat> mv)
FUNC <void cv..sqrt [ARG Mat src=, ARG Mat dst=]>
java: void sqrt(Mat src, Mat dst)
FUNC <void cv..subtract [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>
java: void subtract(Mat src1, Mat src2, Mat dst, Mat mask, int dtype)
java: void subtract(Mat src1, Mat src2, Mat dst, Mat mask)
java: void subtract(Mat src1, Mat src2, Mat dst)
FUNC <void cv..subtract [ARG Mat src1=, ARG Scalar src2=, ARG Mat dst=, ARG Mat mask=Mat(), ARG int dtype=-1]>
java: void subtract(Mat src1, Scalar src2, Mat dst, Mat mask, int dtype)
java: void subtract(Mat src1, Scalar src2, Mat dst, Mat mask)
java: void subtract(Mat src1, Scalar src2, Mat dst)
FUNC <void cv..transform [ARG Mat src=, ARG Mat dst=, ARG Mat m=]>
java: void transform(Mat src, Mat dst, Mat m)
FUNC <void cv..transpose [ARG Mat src=, ARG Mat dst=]>
java: void transpose(Mat src, Mat dst)
FUNC <void cv..vconcat [ARG vector_Mat src=, ARG Mat dst=]>
java: void vconcat(List<Mat> src, Mat dst)
FUNC <void cv.ipp..setUseIPP [ARG bool flag=]>
java: void setUseIPP(boolean flag)
FUNC <void cv.ipp..setUseIPP_NE [ARG bool flag=]>
java: void setUseIPP_NE(boolean flag)
CLASS cv::.Algorithm : 
FUNC <String cv.Algorithm.getDefaultName []>
java: String getDefaultName()
FUNC <bool cv.Algorithm.empty []>
java: boolean empty()
FUNC <void cv.Algorithm.clear []>
java: void clear()
FUNC <void cv.Algorithm.read [ARG FileNode fn=]>
SKIP:void cv::Algorithm::read(FileNode fn)	 due to ARG typeFileNode/I
FUNC <void cv.Algorithm.save [ARG String filename=]>
java: void save(String filename)
FUNC <void cv.Algorithm.write [ARG Ptr_FileStorage fs=, ARG String name=String()]>
SKIP:void cv::Algorithm::write(Ptr_FileStorage fs, String name = String())	 due to ARG typePtr_FileStorage/I
CLASS cv::.TickMeter : 
FUNC < cv.TickMeter.TickMeter []>
java:  TickMeter()
FUNC <double cv.TickMeter.getTimeMicro []>
java: double getTimeMicro()
FUNC <double cv.TickMeter.getTimeMilli []>
java: double getTimeMilli()
FUNC <double cv.TickMeter.getTimeSec []>
java: double getTimeSec()
FUNC <int64 cv.TickMeter.getCounter []>
java: long getCounter()
FUNC <int64 cv.TickMeter.getTimeTicks []>
java: long getTimeTicks()
FUNC <void cv.TickMeter.reset []>
java: void reset()
FUNC <void cv.TickMeter.start []>
java: void start()
FUNC <void cv.TickMeter.stop []>
java: void stop()

=== MODULE: imgproc (C:/Users/d_dan/Desktop/opencv-master\modules/imgproc) ===


Files (7):
['C:/Users/d_dan/Desktop/opencv-master\\modules/imgproc\\include\\opencv2\\imgproc\\imgproc_c.h',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/imgproc\\include\\opencv2\\imgproc\\types_c.h',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/imgproc\\include\\opencv2\\imgproc\\hal\\interface.h',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/imgproc\\include\\opencv2\\imgproc.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/imgproc\\include\\opencv2\\imgproc\\imgproc.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/imgproc\\include\\opencv2\\imgproc\\detail\\distortion_model.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/imgproc\\include\\opencv2\\imgproc\\hal\\hal.hpp']

Common headers (0):
[]
ok: class CLASS ::.Imgproc : , name: Imgproc, base: 


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/imgproc\include\opencv2\imgproc\imgproc_c.h =====
Namespaces: {''}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/imgproc\include\opencv2\imgproc\imgproc_c.h


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/imgproc\include\opencv2\imgproc\types_c.h =====
Namespaces: {''}

--- Incoming ---
['const CV_BLUR_NO_SCALE', '0', [], [], None]
ok: CONST CV_BLUR_NO_SCALE=0

--- Incoming ---
['const CV_BLUR', '1', [], [], None]
ok: CONST CV_BLUR=1

--- Incoming ---
['const CV_GAUSSIAN', '2', [], [], None]
ok: CONST CV_GAUSSIAN=2

--- Incoming ---
['const CV_MEDIAN', '3', [], [], None]
ok: CONST CV_MEDIAN=3

--- Incoming ---
['const CV_BILATERAL', '4', [], [], None]
ok: CONST CV_BILATERAL=4

--- Incoming ---
['const CV_GAUSSIAN_5x5', '7', [], [], None]
ok: CONST CV_GAUSSIAN_5x5=7

--- Incoming ---
['const CV_SCHARR', '-1', [], [], None]
ok: CONST CV_SCHARR=-1

--- Incoming ---
['const CV_MAX_SOBEL_KSIZE', '7', [], [], None]
ok: CONST CV_MAX_SOBEL_KSIZE=7

--- Incoming ---
['const CV_BGR2BGRA', '0', [], [], None]
ignored: CONST CV_BGR2BGRA=0

--- Incoming ---
['const CV_RGB2RGBA', 'CV_BGR2BGRA', [], [], None]
ignored: CONST CV_RGB2RGBA=CV_BGR2BGRA

--- Incoming ---
['const CV_BGRA2BGR', '1', [], [], None]
ignored: CONST CV_BGRA2BGR=1

--- Incoming ---
['const CV_RGBA2RGB', 'CV_BGRA2BGR', [], [], None]
ignored: CONST CV_RGBA2RGB=CV_BGRA2BGR

--- Incoming ---
['const CV_BGR2RGBA', '2', [], [], None]
ignored: CONST CV_BGR2RGBA=2

--- Incoming ---
['const CV_RGB2BGRA', 'CV_BGR2RGBA', [], [], None]
ignored: CONST CV_RGB2BGRA=CV_BGR2RGBA

--- Incoming ---
['const CV_RGBA2BGR', '3', [], [], None]
ignored: CONST CV_RGBA2BGR=3

--- Incoming ---
['const CV_BGRA2RGB', 'CV_RGBA2BGR', [], [], None]
ignored: CONST CV_BGRA2RGB=CV_RGBA2BGR

--- Incoming ---
['const CV_BGR2RGB', '4', [], [], None]
ignored: CONST CV_BGR2RGB=4

--- Incoming ---
['const CV_RGB2BGR', 'CV_BGR2RGB', [], [], None]
ignored: CONST CV_RGB2BGR=CV_BGR2RGB

--- Incoming ---
['const CV_BGRA2RGBA', '5', [], [], None]
ignored: CONST CV_BGRA2RGBA=5

--- Incoming ---
['const CV_RGBA2BGRA', 'CV_BGRA2RGBA', [], [], None]
ignored: CONST CV_RGBA2BGRA=CV_BGRA2RGBA

--- Incoming ---
['const CV_BGR2GRAY', '6', [], [], None]
ignored: CONST CV_BGR2GRAY=6

--- Incoming ---
['const CV_RGB2GRAY', '7', [], [], None]
ignored: CONST CV_RGB2GRAY=7

--- Incoming ---
['const CV_GRAY2BGR', '8', [], [], None]
ignored: CONST CV_GRAY2BGR=8

--- Incoming ---
['const CV_GRAY2RGB', 'CV_GRAY2BGR', [], [], None]
ignored: CONST CV_GRAY2RGB=CV_GRAY2BGR

--- Incoming ---
['const CV_GRAY2BGRA', '9', [], [], None]
ignored: CONST CV_GRAY2BGRA=9

--- Incoming ---
['const CV_GRAY2RGBA', 'CV_GRAY2BGRA', [], [], None]
ignored: CONST CV_GRAY2RGBA=CV_GRAY2BGRA

--- Incoming ---
['const CV_BGRA2GRAY', '10', [], [], None]
ignored: CONST CV_BGRA2GRAY=10

--- Incoming ---
['const CV_RGBA2GRAY', '11', [], [], None]
ignored: CONST CV_RGBA2GRAY=11

--- Incoming ---
['const CV_BGR2BGR565', '12', [], [], None]
ignored: CONST CV_BGR2BGR565=12

--- Incoming ---
['const CV_RGB2BGR565', '13', [], [], None]
ignored: CONST CV_RGB2BGR565=13

--- Incoming ---
['const CV_BGR5652BGR', '14', [], [], None]
ignored: CONST CV_BGR5652BGR=14

--- Incoming ---
['const CV_BGR5652RGB', '15', [], [], None]
ignored: CONST CV_BGR5652RGB=15

--- Incoming ---
['const CV_BGRA2BGR565', '16', [], [], None]
ignored: CONST CV_BGRA2BGR565=16

--- Incoming ---
['const CV_RGBA2BGR565', '17', [], [], None]
ignored: CONST CV_RGBA2BGR565=17

--- Incoming ---
['const CV_BGR5652BGRA', '18', [], [], None]
ignored: CONST CV_BGR5652BGRA=18

--- Incoming ---
['const CV_BGR5652RGBA', '19', [], [], None]
ignored: CONST CV_BGR5652RGBA=19

--- Incoming ---
['const CV_GRAY2BGR565', '20', [], [], None]
ignored: CONST CV_GRAY2BGR565=20

--- Incoming ---
['const CV_BGR5652GRAY', '21', [], [], None]
ignored: CONST CV_BGR5652GRAY=21

--- Incoming ---
['const CV_BGR2BGR555', '22', [], [], None]
ignored: CONST CV_BGR2BGR555=22

--- Incoming ---
['const CV_RGB2BGR555', '23', [], [], None]
ignored: CONST CV_RGB2BGR555=23

--- Incoming ---
['const CV_BGR5552BGR', '24', [], [], None]
ignored: CONST CV_BGR5552BGR=24

--- Incoming ---
['const CV_BGR5552RGB', '25', [], [], None]
ignored: CONST CV_BGR5552RGB=25

--- Incoming ---
['const CV_BGRA2BGR555', '26', [], [], None]
ignored: CONST CV_BGRA2BGR555=26

--- Incoming ---
['const CV_RGBA2BGR555', '27', [], [], None]
ignored: CONST CV_RGBA2BGR555=27

--- Incoming ---
['const CV_BGR5552BGRA', '28', [], [], None]
ignored: CONST CV_BGR5552BGRA=28

--- Incoming ---
['const CV_BGR5552RGBA', '29', [], [], None]
ignored: CONST CV_BGR5552RGBA=29

--- Incoming ---
['const CV_GRAY2BGR555', '30', [], [], None]
ignored: CONST CV_GRAY2BGR555=30

--- Incoming ---
['const CV_BGR5552GRAY', '31', [], [], None]
ignored: CONST CV_BGR5552GRAY=31

--- Incoming ---
['const CV_BGR2XYZ', '32', [], [], None]
ignored: CONST CV_BGR2XYZ=32

--- Incoming ---
['const CV_RGB2XYZ', '33', [], [], None]
ignored: CONST CV_RGB2XYZ=33

--- Incoming ---
['const CV_XYZ2BGR', '34', [], [], None]
ignored: CONST CV_XYZ2BGR=34

--- Incoming ---
['const CV_XYZ2RGB', '35', [], [], None]
ignored: CONST CV_XYZ2RGB=35

--- Incoming ---
['const CV_BGR2YCrCb', '36', [], [], None]
ignored: CONST CV_BGR2YCrCb=36

--- Incoming ---
['const CV_RGB2YCrCb', '37', [], [], None]
ignored: CONST CV_RGB2YCrCb=37

--- Incoming ---
['const CV_YCrCb2BGR', '38', [], [], None]
ignored: CONST CV_YCrCb2BGR=38

--- Incoming ---
['const CV_YCrCb2RGB', '39', [], [], None]
ignored: CONST CV_YCrCb2RGB=39

--- Incoming ---
['const CV_BGR2HSV', '40', [], [], None]
ignored: CONST CV_BGR2HSV=40

--- Incoming ---
['const CV_RGB2HSV', '41', [], [], None]
ignored: CONST CV_RGB2HSV=41

--- Incoming ---
['const CV_BGR2Lab', '44', [], [], None]
ignored: CONST CV_BGR2Lab=44

--- Incoming ---
['const CV_RGB2Lab', '45', [], [], None]
ignored: CONST CV_RGB2Lab=45

--- Incoming ---
['const CV_BayerBG2BGR', '46', [], [], None]
ignored: CONST CV_BayerBG2BGR=46

--- Incoming ---
['const CV_BayerGB2BGR', '47', [], [], None]
ignored: CONST CV_BayerGB2BGR=47

--- Incoming ---
['const CV_BayerRG2BGR', '48', [], [], None]
ignored: CONST CV_BayerRG2BGR=48

--- Incoming ---
['const CV_BayerGR2BGR', '49', [], [], None]
ignored: CONST CV_BayerGR2BGR=49

--- Incoming ---
['const CV_BayerBG2RGB', 'CV_BayerRG2BGR', [], [], None]
ignored: CONST CV_BayerBG2RGB=CV_BayerRG2BGR

--- Incoming ---
['const CV_BayerGB2RGB', 'CV_BayerGR2BGR', [], [], None]
ignored: CONST CV_BayerGB2RGB=CV_BayerGR2BGR

--- Incoming ---
['const CV_BayerRG2RGB', 'CV_BayerBG2BGR', [], [], None]
ignored: CONST CV_BayerRG2RGB=CV_BayerBG2BGR

--- Incoming ---
['const CV_BayerGR2RGB', 'CV_BayerGB2BGR', [], [], None]
ignored: CONST CV_BayerGR2RGB=CV_BayerGB2BGR

--- Incoming ---
['const CV_BGR2Luv', '50', [], [], None]
ignored: CONST CV_BGR2Luv=50

--- Incoming ---
['const CV_RGB2Luv', '51', [], [], None]
ignored: CONST CV_RGB2Luv=51

--- Incoming ---
['const CV_BGR2HLS', '52', [], [], None]
ignored: CONST CV_BGR2HLS=52

--- Incoming ---
['const CV_RGB2HLS', '53', [], [], None]
ignored: CONST CV_RGB2HLS=53

--- Incoming ---
['const CV_HSV2BGR', '54', [], [], None]
ignored: CONST CV_HSV2BGR=54

--- Incoming ---
['const CV_HSV2RGB', '55', [], [], None]
ignored: CONST CV_HSV2RGB=55

--- Incoming ---
['const CV_Lab2BGR', '56', [], [], None]
ignored: CONST CV_Lab2BGR=56

--- Incoming ---
['const CV_Lab2RGB', '57', [], [], None]
ignored: CONST CV_Lab2RGB=57

--- Incoming ---
['const CV_Luv2BGR', '58', [], [], None]
ignored: CONST CV_Luv2BGR=58

--- Incoming ---
['const CV_Luv2RGB', '59', [], [], None]
ignored: CONST CV_Luv2RGB=59

--- Incoming ---
['const CV_HLS2BGR', '60', [], [], None]
ignored: CONST CV_HLS2BGR=60

--- Incoming ---
['const CV_HLS2RGB', '61', [], [], None]
ignored: CONST CV_HLS2RGB=61

--- Incoming ---
['const CV_BayerBG2BGR_VNG', '62', [], [], None]
ignored: CONST CV_BayerBG2BGR_VNG=62

--- Incoming ---
['const CV_BayerGB2BGR_VNG', '63', [], [], None]
ignored: CONST CV_BayerGB2BGR_VNG=63

--- Incoming ---
['const CV_BayerRG2BGR_VNG', '64', [], [], None]
ignored: CONST CV_BayerRG2BGR_VNG=64

--- Incoming ---
['const CV_BayerGR2BGR_VNG', '65', [], [], None]
ignored: CONST CV_BayerGR2BGR_VNG=65

--- Incoming ---
['const CV_BayerBG2RGB_VNG', 'CV_BayerRG2BGR_VNG', [], [], None]
ignored: CONST CV_BayerBG2RGB_VNG=CV_BayerRG2BGR_VNG

--- Incoming ---
['const CV_BayerGB2RGB_VNG', 'CV_BayerGR2BGR_VNG', [], [], None]
ignored: CONST CV_BayerGB2RGB_VNG=CV_BayerGR2BGR_VNG

--- Incoming ---
['const CV_BayerRG2RGB_VNG', 'CV_BayerBG2BGR_VNG', [], [], None]
ignored: CONST CV_BayerRG2RGB_VNG=CV_BayerBG2BGR_VNG

--- Incoming ---
['const CV_BayerGR2RGB_VNG', 'CV_BayerGB2BGR_VNG', [], [], None]
ignored: CONST CV_BayerGR2RGB_VNG=CV_BayerGB2BGR_VNG

--- Incoming ---
['const CV_BGR2HSV_FULL', '66', [], [], None]
ignored: CONST CV_BGR2HSV_FULL=66

--- Incoming ---
['const CV_RGB2HSV_FULL', '67', [], [], None]
ignored: CONST CV_RGB2HSV_FULL=67

--- Incoming ---
['const CV_BGR2HLS_FULL', '68', [], [], None]
ignored: CONST CV_BGR2HLS_FULL=68

--- Incoming ---
['const CV_RGB2HLS_FULL', '69', [], [], None]
ignored: CONST CV_RGB2HLS_FULL=69

--- Incoming ---
['const CV_HSV2BGR_FULL', '70', [], [], None]
ignored: CONST CV_HSV2BGR_FULL=70

--- Incoming ---
['const CV_HSV2RGB_FULL', '71', [], [], None]
ignored: CONST CV_HSV2RGB_FULL=71

--- Incoming ---
['const CV_HLS2BGR_FULL', '72', [], [], None]
ignored: CONST CV_HLS2BGR_FULL=72

--- Incoming ---
['const CV_HLS2RGB_FULL', '73', [], [], None]
ignored: CONST CV_HLS2RGB_FULL=73

--- Incoming ---
['const CV_LBGR2Lab', '74', [], [], None]
ignored: CONST CV_LBGR2Lab=74

--- Incoming ---
['const CV_LRGB2Lab', '75', [], [], None]
ignored: CONST CV_LRGB2Lab=75

--- Incoming ---
['const CV_LBGR2Luv', '76', [], [], None]
ignored: CONST CV_LBGR2Luv=76

--- Incoming ---
['const CV_LRGB2Luv', '77', [], [], None]
ignored: CONST CV_LRGB2Luv=77

--- Incoming ---
['const CV_Lab2LBGR', '78', [], [], None]
ignored: CONST CV_Lab2LBGR=78

--- Incoming ---
['const CV_Lab2LRGB', '79', [], [], None]
ignored: CONST CV_Lab2LRGB=79

--- Incoming ---
['const CV_Luv2LBGR', '80', [], [], None]
ignored: CONST CV_Luv2LBGR=80

--- Incoming ---
['const CV_Luv2LRGB', '81', [], [], None]
ignored: CONST CV_Luv2LRGB=81

--- Incoming ---
['const CV_BGR2YUV', '82', [], [], None]
ignored: CONST CV_BGR2YUV=82

--- Incoming ---
['const CV_RGB2YUV', '83', [], [], None]
ignored: CONST CV_RGB2YUV=83

--- Incoming ---
['const CV_YUV2BGR', '84', [], [], None]
ignored: CONST CV_YUV2BGR=84

--- Incoming ---
['const CV_YUV2RGB', '85', [], [], None]
ignored: CONST CV_YUV2RGB=85

--- Incoming ---
['const CV_BayerBG2GRAY', '86', [], [], None]
ignored: CONST CV_BayerBG2GRAY=86

--- Incoming ---
['const CV_BayerGB2GRAY', '87', [], [], None]
ignored: CONST CV_BayerGB2GRAY=87

--- Incoming ---
['const CV_BayerRG2GRAY', '88', [], [], None]
ignored: CONST CV_BayerRG2GRAY=88

--- Incoming ---
['const CV_BayerGR2GRAY', '89', [], [], None]
ignored: CONST CV_BayerGR2GRAY=89

--- Incoming ---
['const CV_YUV2RGB_NV12', '90', [], [], None]
ignored: CONST CV_YUV2RGB_NV12=90

--- Incoming ---
['const CV_YUV2BGR_NV12', '91', [], [], None]
ignored: CONST CV_YUV2BGR_NV12=91

--- Incoming ---
['const CV_YUV2RGB_NV21', '92', [], [], None]
ignored: CONST CV_YUV2RGB_NV21=92

--- Incoming ---
['const CV_YUV2BGR_NV21', '93', [], [], None]
ignored: CONST CV_YUV2BGR_NV21=93

--- Incoming ---
['const CV_YUV420sp2RGB', 'CV_YUV2RGB_NV21', [], [], None]
ignored: CONST CV_YUV420sp2RGB=CV_YUV2RGB_NV21

--- Incoming ---
['const CV_YUV420sp2BGR', 'CV_YUV2BGR_NV21', [], [], None]
ignored: CONST CV_YUV420sp2BGR=CV_YUV2BGR_NV21

--- Incoming ---
['const CV_YUV2RGBA_NV12', '94', [], [], None]
ignored: CONST CV_YUV2RGBA_NV12=94

--- Incoming ---
['const CV_YUV2BGRA_NV12', '95', [], [], None]
ignored: CONST CV_YUV2BGRA_NV12=95

--- Incoming ---
['const CV_YUV2RGBA_NV21', '96', [], [], None]
ignored: CONST CV_YUV2RGBA_NV21=96

--- Incoming ---
['const CV_YUV2BGRA_NV21', '97', [], [], None]
ignored: CONST CV_YUV2BGRA_NV21=97

--- Incoming ---
['const CV_YUV420sp2RGBA', 'CV_YUV2RGBA_NV21', [], [], None]
ignored: CONST CV_YUV420sp2RGBA=CV_YUV2RGBA_NV21

--- Incoming ---
['const CV_YUV420sp2BGRA', 'CV_YUV2BGRA_NV21', [], [], None]
ignored: CONST CV_YUV420sp2BGRA=CV_YUV2BGRA_NV21

--- Incoming ---
['const CV_YUV2RGB_YV12', '98', [], [], None]
ignored: CONST CV_YUV2RGB_YV12=98

--- Incoming ---
['const CV_YUV2BGR_YV12', '99', [], [], None]
ignored: CONST CV_YUV2BGR_YV12=99

--- Incoming ---
['const CV_YUV2RGB_IYUV', '100', [], [], None]
ignored: CONST CV_YUV2RGB_IYUV=100

--- Incoming ---
['const CV_YUV2BGR_IYUV', '101', [], [], None]
ignored: CONST CV_YUV2BGR_IYUV=101

--- Incoming ---
['const CV_YUV2RGB_I420', 'CV_YUV2RGB_IYUV', [], [], None]
ignored: CONST CV_YUV2RGB_I420=CV_YUV2RGB_IYUV

--- Incoming ---
['const CV_YUV2BGR_I420', 'CV_YUV2BGR_IYUV', [], [], None]
ignored: CONST CV_YUV2BGR_I420=CV_YUV2BGR_IYUV

--- Incoming ---
['const CV_YUV420p2RGB', 'CV_YUV2RGB_YV12', [], [], None]
ignored: CONST CV_YUV420p2RGB=CV_YUV2RGB_YV12

--- Incoming ---
['const CV_YUV420p2BGR', 'CV_YUV2BGR_YV12', [], [], None]
ignored: CONST CV_YUV420p2BGR=CV_YUV2BGR_YV12

--- Incoming ---
['const CV_YUV2RGBA_YV12', '102', [], [], None]
ignored: CONST CV_YUV2RGBA_YV12=102

--- Incoming ---
['const CV_YUV2BGRA_YV12', '103', [], [], None]
ignored: CONST CV_YUV2BGRA_YV12=103

--- Incoming ---
['const CV_YUV2RGBA_IYUV', '104', [], [], None]
ignored: CONST CV_YUV2RGBA_IYUV=104

--- Incoming ---
['const CV_YUV2BGRA_IYUV', '105', [], [], None]
ignored: CONST CV_YUV2BGRA_IYUV=105

--- Incoming ---
['const CV_YUV2RGBA_I420', 'CV_YUV2RGBA_IYUV', [], [], None]
ignored: CONST CV_YUV2RGBA_I420=CV_YUV2RGBA_IYUV

--- Incoming ---
['const CV_YUV2BGRA_I420', 'CV_YUV2BGRA_IYUV', [], [], None]
ignored: CONST CV_YUV2BGRA_I420=CV_YUV2BGRA_IYUV

--- Incoming ---
['const CV_YUV420p2RGBA', 'CV_YUV2RGBA_YV12', [], [], None]
ignored: CONST CV_YUV420p2RGBA=CV_YUV2RGBA_YV12

--- Incoming ---
['const CV_YUV420p2BGRA', 'CV_YUV2BGRA_YV12', [], [], None]
ignored: CONST CV_YUV420p2BGRA=CV_YUV2BGRA_YV12

--- Incoming ---
['const CV_YUV2GRAY_420', '106', [], [], None]
ignored: CONST CV_YUV2GRAY_420=106

--- Incoming ---
['const CV_YUV2GRAY_NV21', 'CV_YUV2GRAY_420', [], [], None]
ignored: CONST CV_YUV2GRAY_NV21=CV_YUV2GRAY_420

--- Incoming ---
['const CV_YUV2GRAY_NV12', 'CV_YUV2GRAY_420', [], [], None]
ignored: CONST CV_YUV2GRAY_NV12=CV_YUV2GRAY_420

--- Incoming ---
['const CV_YUV2GRAY_YV12', 'CV_YUV2GRAY_420', [], [], None]
ignored: CONST CV_YUV2GRAY_YV12=CV_YUV2GRAY_420

--- Incoming ---
['const CV_YUV2GRAY_IYUV', 'CV_YUV2GRAY_420', [], [], None]
ignored: CONST CV_YUV2GRAY_IYUV=CV_YUV2GRAY_420

--- Incoming ---
['const CV_YUV2GRAY_I420', 'CV_YUV2GRAY_420', [], [], None]
ignored: CONST CV_YUV2GRAY_I420=CV_YUV2GRAY_420

--- Incoming ---
['const CV_YUV420sp2GRAY', 'CV_YUV2GRAY_420', [], [], None]
ignored: CONST CV_YUV420sp2GRAY=CV_YUV2GRAY_420

--- Incoming ---
['const CV_YUV420p2GRAY', 'CV_YUV2GRAY_420', [], [], None]
ignored: CONST CV_YUV420p2GRAY=CV_YUV2GRAY_420

--- Incoming ---
['const CV_YUV2RGB_UYVY', '107', [], [], None]
ignored: CONST CV_YUV2RGB_UYVY=107

--- Incoming ---
['const CV_YUV2BGR_UYVY', '108', [], [], None]
ignored: CONST CV_YUV2BGR_UYVY=108

--- Incoming ---
['const CV_YUV2RGB_Y422', 'CV_YUV2RGB_UYVY', [], [], None]
ignored: CONST CV_YUV2RGB_Y422=CV_YUV2RGB_UYVY

--- Incoming ---
['const CV_YUV2BGR_Y422', 'CV_YUV2BGR_UYVY', [], [], None]
ignored: CONST CV_YUV2BGR_Y422=CV_YUV2BGR_UYVY

--- Incoming ---
['const CV_YUV2RGB_UYNV', 'CV_YUV2RGB_UYVY', [], [], None]
ignored: CONST CV_YUV2RGB_UYNV=CV_YUV2RGB_UYVY

--- Incoming ---
['const CV_YUV2BGR_UYNV', 'CV_YUV2BGR_UYVY', [], [], None]
ignored: CONST CV_YUV2BGR_UYNV=CV_YUV2BGR_UYVY

--- Incoming ---
['const CV_YUV2RGBA_UYVY', '111', [], [], None]
ignored: CONST CV_YUV2RGBA_UYVY=111

--- Incoming ---
['const CV_YUV2BGRA_UYVY', '112', [], [], None]
ignored: CONST CV_YUV2BGRA_UYVY=112

--- Incoming ---
['const CV_YUV2RGBA_Y422', 'CV_YUV2RGBA_UYVY', [], [], None]
ignored: CONST CV_YUV2RGBA_Y422=CV_YUV2RGBA_UYVY

--- Incoming ---
['const CV_YUV2BGRA_Y422', 'CV_YUV2BGRA_UYVY', [], [], None]
ignored: CONST CV_YUV2BGRA_Y422=CV_YUV2BGRA_UYVY

--- Incoming ---
['const CV_YUV2RGBA_UYNV', 'CV_YUV2RGBA_UYVY', [], [], None]
ignored: CONST CV_YUV2RGBA_UYNV=CV_YUV2RGBA_UYVY

--- Incoming ---
['const CV_YUV2BGRA_UYNV', 'CV_YUV2BGRA_UYVY', [], [], None]
ignored: CONST CV_YUV2BGRA_UYNV=CV_YUV2BGRA_UYVY

--- Incoming ---
['const CV_YUV2RGB_YUY2', '115', [], [], None]
ignored: CONST CV_YUV2RGB_YUY2=115

--- Incoming ---
['const CV_YUV2BGR_YUY2', '116', [], [], None]
ignored: CONST CV_YUV2BGR_YUY2=116

--- Incoming ---
['const CV_YUV2RGB_YVYU', '117', [], [], None]
ignored: CONST CV_YUV2RGB_YVYU=117

--- Incoming ---
['const CV_YUV2BGR_YVYU', '118', [], [], None]
ignored: CONST CV_YUV2BGR_YVYU=118

--- Incoming ---
['const CV_YUV2RGB_YUYV', 'CV_YUV2RGB_YUY2', [], [], None]
ignored: CONST CV_YUV2RGB_YUYV=CV_YUV2RGB_YUY2

--- Incoming ---
['const CV_YUV2BGR_YUYV', 'CV_YUV2BGR_YUY2', [], [], None]
ignored: CONST CV_YUV2BGR_YUYV=CV_YUV2BGR_YUY2

--- Incoming ---
['const CV_YUV2RGB_YUNV', 'CV_YUV2RGB_YUY2', [], [], None]
ignored: CONST CV_YUV2RGB_YUNV=CV_YUV2RGB_YUY2

--- Incoming ---
['const CV_YUV2BGR_YUNV', 'CV_YUV2BGR_YUY2', [], [], None]
ignored: CONST CV_YUV2BGR_YUNV=CV_YUV2BGR_YUY2

--- Incoming ---
['const CV_YUV2RGBA_YUY2', '119', [], [], None]
ignored: CONST CV_YUV2RGBA_YUY2=119

--- Incoming ---
['const CV_YUV2BGRA_YUY2', '120', [], [], None]
ignored: CONST CV_YUV2BGRA_YUY2=120

--- Incoming ---
['const CV_YUV2RGBA_YVYU', '121', [], [], None]
ignored: CONST CV_YUV2RGBA_YVYU=121

--- Incoming ---
['const CV_YUV2BGRA_YVYU', '122', [], [], None]
ignored: CONST CV_YUV2BGRA_YVYU=122

--- Incoming ---
['const CV_YUV2RGBA_YUYV', 'CV_YUV2RGBA_YUY2', [], [], None]
ignored: CONST CV_YUV2RGBA_YUYV=CV_YUV2RGBA_YUY2

--- Incoming ---
['const CV_YUV2BGRA_YUYV', 'CV_YUV2BGRA_YUY2', [], [], None]
ignored: CONST CV_YUV2BGRA_YUYV=CV_YUV2BGRA_YUY2

--- Incoming ---
['const CV_YUV2RGBA_YUNV', 'CV_YUV2RGBA_YUY2', [], [], None]
ignored: CONST CV_YUV2RGBA_YUNV=CV_YUV2RGBA_YUY2

--- Incoming ---
['const CV_YUV2BGRA_YUNV', 'CV_YUV2BGRA_YUY2', [], [], None]
ignored: CONST CV_YUV2BGRA_YUNV=CV_YUV2BGRA_YUY2

--- Incoming ---
['const CV_YUV2GRAY_UYVY', '123', [], [], None]
ignored: CONST CV_YUV2GRAY_UYVY=123

--- Incoming ---
['const CV_YUV2GRAY_YUY2', '124', [], [], None]
ignored: CONST CV_YUV2GRAY_YUY2=124

--- Incoming ---
['const CV_YUV2GRAY_Y422', 'CV_YUV2GRAY_UYVY', [], [], None]
ignored: CONST CV_YUV2GRAY_Y422=CV_YUV2GRAY_UYVY

--- Incoming ---
['const CV_YUV2GRAY_UYNV', 'CV_YUV2GRAY_UYVY', [], [], None]
ignored: CONST CV_YUV2GRAY_UYNV=CV_YUV2GRAY_UYVY

--- Incoming ---
['const CV_YUV2GRAY_YVYU', 'CV_YUV2GRAY_YUY2', [], [], None]
ignored: CONST CV_YUV2GRAY_YVYU=CV_YUV2GRAY_YUY2

--- Incoming ---
['const CV_YUV2GRAY_YUYV', 'CV_YUV2GRAY_YUY2', [], [], None]
ignored: CONST CV_YUV2GRAY_YUYV=CV_YUV2GRAY_YUY2

--- Incoming ---
['const CV_YUV2GRAY_YUNV', 'CV_YUV2GRAY_YUY2', [], [], None]
ignored: CONST CV_YUV2GRAY_YUNV=CV_YUV2GRAY_YUY2

--- Incoming ---
['const CV_RGBA2mRGBA', '125', [], [], None]
ok: CONST CV_RGBA2mRGBA=125

--- Incoming ---
['const CV_mRGBA2RGBA', '126', [], [], None]
ok: CONST CV_mRGBA2RGBA=126

--- Incoming ---
['const CV_RGB2YUV_I420', '127', [], [], None]
ignored: CONST CV_RGB2YUV_I420=127

--- Incoming ---
['const CV_BGR2YUV_I420', '128', [], [], None]
ignored: CONST CV_BGR2YUV_I420=128

--- Incoming ---
['const CV_RGB2YUV_IYUV', 'CV_RGB2YUV_I420', [], [], None]
ignored: CONST CV_RGB2YUV_IYUV=CV_RGB2YUV_I420

--- Incoming ---
['const CV_BGR2YUV_IYUV', 'CV_BGR2YUV_I420', [], [], None]
ignored: CONST CV_BGR2YUV_IYUV=CV_BGR2YUV_I420

--- Incoming ---
['const CV_RGBA2YUV_I420', '129', [], [], None]
ignored: CONST CV_RGBA2YUV_I420=129

--- Incoming ---
['const CV_BGRA2YUV_I420', '130', [], [], None]
ignored: CONST CV_BGRA2YUV_I420=130

--- Incoming ---
['const CV_RGBA2YUV_IYUV', 'CV_RGBA2YUV_I420', [], [], None]
ignored: CONST CV_RGBA2YUV_IYUV=CV_RGBA2YUV_I420

--- Incoming ---
['const CV_BGRA2YUV_IYUV', 'CV_BGRA2YUV_I420', [], [], None]
ignored: CONST CV_BGRA2YUV_IYUV=CV_BGRA2YUV_I420

--- Incoming ---
['const CV_RGB2YUV_YV12', '131', [], [], None]
ignored: CONST CV_RGB2YUV_YV12=131

--- Incoming ---
['const CV_BGR2YUV_YV12', '132', [], [], None]
ignored: CONST CV_BGR2YUV_YV12=132

--- Incoming ---
['const CV_RGBA2YUV_YV12', '133', [], [], None]
ignored: CONST CV_RGBA2YUV_YV12=133

--- Incoming ---
['const CV_BGRA2YUV_YV12', '134', [], [], None]
ignored: CONST CV_BGRA2YUV_YV12=134

--- Incoming ---
['const CV_BayerBG2BGR_EA', '135', [], [], None]
ignored: CONST CV_BayerBG2BGR_EA=135

--- Incoming ---
['const CV_BayerGB2BGR_EA', '136', [], [], None]
ignored: CONST CV_BayerGB2BGR_EA=136

--- Incoming ---
['const CV_BayerRG2BGR_EA', '137', [], [], None]
ignored: CONST CV_BayerRG2BGR_EA=137

--- Incoming ---
['const CV_BayerGR2BGR_EA', '138', [], [], None]
ignored: CONST CV_BayerGR2BGR_EA=138

--- Incoming ---
['const CV_BayerBG2RGB_EA', 'CV_BayerRG2BGR_EA', [], [], None]
ignored: CONST CV_BayerBG2RGB_EA=CV_BayerRG2BGR_EA

--- Incoming ---
['const CV_BayerGB2RGB_EA', 'CV_BayerGR2BGR_EA', [], [], None]
ignored: CONST CV_BayerGB2RGB_EA=CV_BayerGR2BGR_EA

--- Incoming ---
['const CV_BayerRG2RGB_EA', 'CV_BayerBG2BGR_EA', [], [], None]
ignored: CONST CV_BayerRG2RGB_EA=CV_BayerBG2BGR_EA

--- Incoming ---
['const CV_BayerGR2RGB_EA', 'CV_BayerGB2BGR_EA', [], [], None]
ignored: CONST CV_BayerGR2RGB_EA=CV_BayerGB2BGR_EA

--- Incoming ---
['const CV_BayerBG2BGRA', '139', [], [], None]
ignored: CONST CV_BayerBG2BGRA=139

--- Incoming ---
['const CV_BayerGB2BGRA', '140', [], [], None]
ignored: CONST CV_BayerGB2BGRA=140

--- Incoming ---
['const CV_BayerRG2BGRA', '141', [], [], None]
ignored: CONST CV_BayerRG2BGRA=141

--- Incoming ---
['const CV_BayerGR2BGRA', '142', [], [], None]
ignored: CONST CV_BayerGR2BGRA=142

--- Incoming ---
['const CV_BayerBG2RGBA', 'CV_BayerRG2BGRA', [], [], None]
ignored: CONST CV_BayerBG2RGBA=CV_BayerRG2BGRA

--- Incoming ---
['const CV_BayerGB2RGBA', 'CV_BayerGR2BGRA', [], [], None]
ignored: CONST CV_BayerGB2RGBA=CV_BayerGR2BGRA

--- Incoming ---
['const CV_BayerRG2RGBA', 'CV_BayerBG2BGRA', [], [], None]
ignored: CONST CV_BayerRG2RGBA=CV_BayerBG2BGRA

--- Incoming ---
['const CV_BayerGR2RGBA', 'CV_BayerGB2BGRA', [], [], None]
ignored: CONST CV_BayerGR2RGBA=CV_BayerGB2BGRA

--- Incoming ---
['const CV_COLORCVT_MAX', '143', [], [], None]
ignored: CONST CV_COLORCVT_MAX=143

--- Incoming ---
['const CV_INTER_NN', '0', [], [], None]
ok: CONST CV_INTER_NN=0

--- Incoming ---
['const CV_INTER_LINEAR', '1', [], [], None]
ok: CONST CV_INTER_LINEAR=1

--- Incoming ---
['const CV_INTER_CUBIC', '2', [], [], None]
ok: CONST CV_INTER_CUBIC=2

--- Incoming ---
['const CV_INTER_AREA', '3', [], [], None]
ok: CONST CV_INTER_AREA=3

--- Incoming ---
['const CV_INTER_LANCZOS4', '4', [], [], None]
ok: CONST CV_INTER_LANCZOS4=4

--- Incoming ---
['const CV_WARP_FILL_OUTLIERS', '8', [], [], None]
ok: CONST CV_WARP_FILL_OUTLIERS=8

--- Incoming ---
['const CV_WARP_INVERSE_MAP', '16', [], [], None]
ok: CONST CV_WARP_INVERSE_MAP=16

--- Incoming ---
['const CV_SHAPE_RECT', '0', [], [], None]
ok: CONST CV_SHAPE_RECT=0

--- Incoming ---
['const CV_SHAPE_CROSS', '1', [], [], None]
ok: CONST CV_SHAPE_CROSS=1

--- Incoming ---
['const CV_SHAPE_ELLIPSE', '2', [], [], None]
ok: CONST CV_SHAPE_ELLIPSE=2

--- Incoming ---
['const CV_SHAPE_CUSTOM', '100', [], [], None]
ok: CONST CV_SHAPE_CUSTOM=100

--- Incoming ---
['const CV_MOP_ERODE', '0', [], [], None]
ok: CONST CV_MOP_ERODE=0

--- Incoming ---
['const CV_MOP_DILATE', '1', [], [], None]
ok: CONST CV_MOP_DILATE=1

--- Incoming ---
['const CV_MOP_OPEN', '2', [], [], None]
ok: CONST CV_MOP_OPEN=2

--- Incoming ---
['const CV_MOP_CLOSE', '3', [], [], None]
ok: CONST CV_MOP_CLOSE=3

--- Incoming ---
['const CV_MOP_GRADIENT', '4', [], [], None]
ok: CONST CV_MOP_GRADIENT=4

--- Incoming ---
['const CV_MOP_TOPHAT', '5', [], [], None]
ok: CONST CV_MOP_TOPHAT=5

--- Incoming ---
['const CV_MOP_BLACKHAT', '6', [], [], None]
ok: CONST CV_MOP_BLACKHAT=6

--- Incoming ---
['const CV_TM_SQDIFF', '0', [], [], None]
ignored: CONST CV_TM_SQDIFF=0

--- Incoming ---
['const CV_TM_SQDIFF_NORMED', '1', [], [], None]
ignored: CONST CV_TM_SQDIFF_NORMED=1

--- Incoming ---
['const CV_TM_CCORR', '2', [], [], None]
ignored: CONST CV_TM_CCORR=2

--- Incoming ---
['const CV_TM_CCORR_NORMED', '3', [], [], None]
ignored: CONST CV_TM_CCORR_NORMED=3

--- Incoming ---
['const CV_TM_CCOEFF', '4', [], [], None]
ignored: CONST CV_TM_CCOEFF=4

--- Incoming ---
['const CV_TM_CCOEFF_NORMED', '5', [], [], None]
ignored: CONST CV_TM_CCOEFF_NORMED=5

--- Incoming ---
['const CV_RETR_EXTERNAL', '0', [], [], None]
ok: CONST CV_RETR_EXTERNAL=0

--- Incoming ---
['const CV_RETR_LIST', '1', [], [], None]
ok: CONST CV_RETR_LIST=1

--- Incoming ---
['const CV_RETR_CCOMP', '2', [], [], None]
ok: CONST CV_RETR_CCOMP=2

--- Incoming ---
['const CV_RETR_TREE', '3', [], [], None]
ok: CONST CV_RETR_TREE=3

--- Incoming ---
['const CV_RETR_FLOODFILL', '4', [], [], None]
ok: CONST CV_RETR_FLOODFILL=4

--- Incoming ---
['const CV_CHAIN_CODE', '0', [], [], None]
ok: CONST CV_CHAIN_CODE=0

--- Incoming ---
['const CV_CHAIN_APPROX_NONE', '1', [], [], None]
ok: CONST CV_CHAIN_APPROX_NONE=1

--- Incoming ---
['const CV_CHAIN_APPROX_SIMPLE', '2', [], [], None]
ok: CONST CV_CHAIN_APPROX_SIMPLE=2

--- Incoming ---
['const CV_CHAIN_APPROX_TC89_L1', '3', [], [], None]
ok: CONST CV_CHAIN_APPROX_TC89_L1=3

--- Incoming ---
['const CV_CHAIN_APPROX_TC89_KCOS', '4', [], [], None]
ok: CONST CV_CHAIN_APPROX_TC89_KCOS=4

--- Incoming ---
['const CV_LINK_RUNS', '5', [], [], None]
ok: CONST CV_LINK_RUNS=5

--- Incoming ---
['const CV_POLY_APPROX_DP', '0', [], [], None]
ok: CONST CV_POLY_APPROX_DP=0

--- Incoming ---
['const CV_CONTOURS_MATCH_I1', '1', [], [], None]
ok: CONST CV_CONTOURS_MATCH_I1=1

--- Incoming ---
['const CV_CONTOURS_MATCH_I2', '2', [], [], None]
ok: CONST CV_CONTOURS_MATCH_I2=2

--- Incoming ---
['const CV_CONTOURS_MATCH_I3', '3', [], [], None]
ok: CONST CV_CONTOURS_MATCH_I3=3

--- Incoming ---
['const CV_CLOCKWISE', '1', [], [], None]
ok: CONST CV_CLOCKWISE=1

--- Incoming ---
['const CV_COUNTER_CLOCKWISE', '2', [], [], None]
ok: CONST CV_COUNTER_CLOCKWISE=2

--- Incoming ---
['const CV_COMP_CORREL', '0', [], [], None]
ok: CONST CV_COMP_CORREL=0

--- Incoming ---
['const CV_COMP_CHISQR', '1', [], [], None]
ok: CONST CV_COMP_CHISQR=1

--- Incoming ---
['const CV_COMP_INTERSECT', '2', [], [], None]
ok: CONST CV_COMP_INTERSECT=2

--- Incoming ---
['const CV_COMP_BHATTACHARYYA', '3', [], [], None]
ok: CONST CV_COMP_BHATTACHARYYA=3

--- Incoming ---
['const CV_COMP_HELLINGER', 'CV_COMP_BHATTACHARYYA', [], [], None]
ok: CONST CV_COMP_HELLINGER=CV_COMP_BHATTACHARYYA

--- Incoming ---
['const CV_COMP_CHISQR_ALT', '4', [], [], None]
ok: CONST CV_COMP_CHISQR_ALT=4

--- Incoming ---
['const CV_COMP_KL_DIV', '5', [], [], None]
ok: CONST CV_COMP_KL_DIV=5

--- Incoming ---
['const CV_DIST_MASK_3', '3', [], [], None]
ok: CONST CV_DIST_MASK_3=3

--- Incoming ---
['const CV_DIST_MASK_5', '5', [], [], None]
ok: CONST CV_DIST_MASK_5=5

--- Incoming ---
['const CV_DIST_MASK_PRECISE', '0', [], [], None]
ok: CONST CV_DIST_MASK_PRECISE=0

--- Incoming ---
['const CV_DIST_LABEL_CCOMP', '0', [], [], None]
ok: CONST CV_DIST_LABEL_CCOMP=0

--- Incoming ---
['const CV_DIST_LABEL_PIXEL', '1', [], [], None]
ok: CONST CV_DIST_LABEL_PIXEL=1

--- Incoming ---
['const CV_DIST_USER', '-1', [], [], None]
ok: CONST CV_DIST_USER=-1

--- Incoming ---
['const CV_DIST_L1', '1', [], [], None]
ok: CONST CV_DIST_L1=1

--- Incoming ---
['const CV_DIST_L2', '2', [], [], None]
ok: CONST CV_DIST_L2=2

--- Incoming ---
['const CV_DIST_C', '3', [], [], None]
ok: CONST CV_DIST_C=3

--- Incoming ---
['const CV_DIST_L12', '4', [], [], None]
ok: CONST CV_DIST_L12=4

--- Incoming ---
['const CV_DIST_FAIR', '5', [], [], None]
ok: CONST CV_DIST_FAIR=5

--- Incoming ---
['const CV_DIST_WELSCH', '6', [], [], None]
ok: CONST CV_DIST_WELSCH=6

--- Incoming ---
['const CV_DIST_HUBER', '7', [], [], None]
ok: CONST CV_DIST_HUBER=7

--- Incoming ---
['const CV_THRESH_BINARY', '0', [], [], None]
ok: CONST CV_THRESH_BINARY=0

--- Incoming ---
['const CV_THRESH_BINARY_INV', '1', [], [], None]
ok: CONST CV_THRESH_BINARY_INV=1

--- Incoming ---
['const CV_THRESH_TRUNC', '2', [], [], None]
ok: CONST CV_THRESH_TRUNC=2

--- Incoming ---
['const CV_THRESH_TOZERO', '3', [], [], None]
ok: CONST CV_THRESH_TOZERO=3

--- Incoming ---
['const CV_THRESH_TOZERO_INV', '4', [], [], None]
ok: CONST CV_THRESH_TOZERO_INV=4

--- Incoming ---
['const CV_THRESH_MASK', '7', [], [], None]
ok: CONST CV_THRESH_MASK=7

--- Incoming ---
['const CV_THRESH_OTSU', '8', [], [], None]
ok: CONST CV_THRESH_OTSU=8

--- Incoming ---
['const CV_THRESH_TRIANGLE', '16', [], [], None]
ok: CONST CV_THRESH_TRIANGLE=16

--- Incoming ---
['const CV_ADAPTIVE_THRESH_MEAN_C', '0', [], [], None]
ignored: CONST CV_ADAPTIVE_THRESH_MEAN_C=0

--- Incoming ---
['const CV_ADAPTIVE_THRESH_GAUSSIAN_C', '1', [], [], None]
ignored: CONST CV_ADAPTIVE_THRESH_GAUSSIAN_C=1

--- Incoming ---
['const CV_FLOODFILL_FIXED_RANGE', '(1 << 16)', [], [], None]
ignored: CONST CV_FLOODFILL_FIXED_RANGE=(1 << 16)

--- Incoming ---
['const CV_FLOODFILL_MASK_ONLY', '(1 << 17)', [], [], None]
ignored: CONST CV_FLOODFILL_MASK_ONLY=(1 << 17)

--- Incoming ---
['const CV_CANNY_L2_GRADIENT', '(1 << 31)', [], [], None]
ok: CONST CV_CANNY_L2_GRADIENT=(1 << 31)

--- Incoming ---
['const CV_HOUGH_STANDARD', '0', [], [], None]
ok: CONST CV_HOUGH_STANDARD=0

--- Incoming ---
['const CV_HOUGH_PROBABILISTIC', '1', [], [], None]
ok: CONST CV_HOUGH_PROBABILISTIC=1

--- Incoming ---
['const CV_HOUGH_MULTI_SCALE', '2', [], [], None]
ok: CONST CV_HOUGH_MULTI_SCALE=2

--- Incoming ---
['const CV_HOUGH_GRADIENT', '3', [], [], None]
ok: CONST CV_HOUGH_GRADIENT=3


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/imgproc\include\opencv2\imgproc\hal\interface.h =====
Namespaces: {''}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/imgproc\include\opencv2\imgproc\hal\interface.h


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/imgproc\include\opencv2\imgproc.hpp =====
Namespaces: {'', 'cv'}

--- Incoming ---
['const cv.MORPH_ERODE', '0', [], [], None]
ok: CONST MORPH_ERODE=0

--- Incoming ---
['const cv.MORPH_DILATE', '1', [], [], None]
ok: CONST MORPH_DILATE=1

--- Incoming ---
['const cv.MORPH_OPEN', '2', [], [], None]
ok: CONST MORPH_OPEN=2

--- Incoming ---
['const cv.MORPH_CLOSE', '3', [], [], None]
ok: CONST MORPH_CLOSE=3

--- Incoming ---
['const cv.MORPH_GRADIENT', '4', [], [], None]
ok: CONST MORPH_GRADIENT=4

--- Incoming ---
['const cv.MORPH_TOPHAT', '5', [], [], None]
ok: CONST MORPH_TOPHAT=5

--- Incoming ---
['const cv.MORPH_BLACKHAT', '6', [], [], None]
ok: CONST MORPH_BLACKHAT=6

--- Incoming ---
['const cv.MORPH_HITMISS', '7', [], [], None]
ok: CONST MORPH_HITMISS=7

--- Incoming ---
['const cv.MORPH_RECT', '0', [], [], None]
ok: CONST MORPH_RECT=0

--- Incoming ---
['const cv.MORPH_CROSS', '1', [], [], None]
ok: CONST MORPH_CROSS=1

--- Incoming ---
['const cv.MORPH_ELLIPSE', '2', [], [], None]
ok: CONST MORPH_ELLIPSE=2

--- Incoming ---
['const cv.INTER_NEAREST', '0', [], [], None]
ok: CONST INTER_NEAREST=0

--- Incoming ---
['const cv.INTER_LINEAR', '1', [], [], None]
ok: CONST INTER_LINEAR=1

--- Incoming ---
['const cv.INTER_CUBIC', '2', [], [], None]
ok: CONST INTER_CUBIC=2

--- Incoming ---
['const cv.INTER_AREA', '3', [], [], None]
ok: CONST INTER_AREA=3

--- Incoming ---
['const cv.INTER_LANCZOS4', '4', [], [], None]
ok: CONST INTER_LANCZOS4=4

--- Incoming ---
['const cv.INTER_LINEAR_EXACT', '5', [], [], None]
ok: CONST INTER_LINEAR_EXACT=5

--- Incoming ---
['const cv.INTER_MAX', '7', [], [], None]
ok: CONST INTER_MAX=7

--- Incoming ---
['const cv.WARP_FILL_OUTLIERS', '8', [], [], None]
ok: CONST WARP_FILL_OUTLIERS=8

--- Incoming ---
['const cv.WARP_INVERSE_MAP', '16', [], [], None]
ok: CONST WARP_INVERSE_MAP=16

--- Incoming ---
['const cv.WARP_POLAR_LINEAR', '0', [], [], None]
ok: CONST WARP_POLAR_LINEAR=0

--- Incoming ---
['const cv.WARP_POLAR_LOG', '256', [], [], None]
ok: CONST WARP_POLAR_LOG=256

--- Incoming ---
['const cv.INTER_BITS', '5', [], [], None]
ok: CONST INTER_BITS=5

--- Incoming ---
['const cv.INTER_BITS2', 'INTER_BITS * 2', [], [], None]
ok: CONST INTER_BITS2=INTER_BITS * 2

--- Incoming ---
['const cv.INTER_TAB_SIZE', '1 << INTER_BITS', [], [], None]
ok: CONST INTER_TAB_SIZE=1 << INTER_BITS

--- Incoming ---
['const cv.INTER_TAB_SIZE2', 'INTER_TAB_SIZE * INTER_TAB_SIZE', [], [], None]
ok: CONST INTER_TAB_SIZE2=INTER_TAB_SIZE * INTER_TAB_SIZE

--- Incoming ---
['const cv.DIST_USER', '-1', [], [], None]
ok: CONST DIST_USER=-1

--- Incoming ---
['const cv.DIST_L1', '1', [], [], None]
ok: CONST DIST_L1=1

--- Incoming ---
['const cv.DIST_L2', '2', [], [], None]
ok: CONST DIST_L2=2

--- Incoming ---
['const cv.DIST_C', '3', [], [], None]
ok: CONST DIST_C=3

--- Incoming ---
['const cv.DIST_L12', '4', [], [], None]
ok: CONST DIST_L12=4

--- Incoming ---
['const cv.DIST_FAIR', '5', [], [], None]
ok: CONST DIST_FAIR=5

--- Incoming ---
['const cv.DIST_WELSCH', '6', [], [], None]
ok: CONST DIST_WELSCH=6

--- Incoming ---
['const cv.DIST_HUBER', '7', [], [], None]
ok: CONST DIST_HUBER=7

--- Incoming ---
['const cv.DIST_MASK_3', '3', [], [], None]
ok: CONST DIST_MASK_3=3

--- Incoming ---
['const cv.DIST_MASK_5', '5', [], [], None]
ok: CONST DIST_MASK_5=5

--- Incoming ---
['const cv.DIST_MASK_PRECISE', '0', [], [], None]
ok: CONST DIST_MASK_PRECISE=0

--- Incoming ---
['const cv.THRESH_BINARY', '0', [], [], None]
ok: CONST THRESH_BINARY=0

--- Incoming ---
['const cv.THRESH_BINARY_INV', '1', [], [], None]
ok: CONST THRESH_BINARY_INV=1

--- Incoming ---
['const cv.THRESH_TRUNC', '2', [], [], None]
ok: CONST THRESH_TRUNC=2

--- Incoming ---
['const cv.THRESH_TOZERO', '3', [], [], None]
ok: CONST THRESH_TOZERO=3

--- Incoming ---
['const cv.THRESH_TOZERO_INV', '4', [], [], None]
ok: CONST THRESH_TOZERO_INV=4

--- Incoming ---
['const cv.THRESH_MASK', '7', [], [], None]
ok: CONST THRESH_MASK=7

--- Incoming ---
['const cv.THRESH_OTSU', '8', [], [], None]
ok: CONST THRESH_OTSU=8

--- Incoming ---
['const cv.THRESH_TRIANGLE', '16', [], [], None]
ok: CONST THRESH_TRIANGLE=16

--- Incoming ---
['const cv.ADAPTIVE_THRESH_MEAN_C', '0', [], [], None]
ok: CONST ADAPTIVE_THRESH_MEAN_C=0

--- Incoming ---
['const cv.ADAPTIVE_THRESH_GAUSSIAN_C', '1', [], [], None]
ok: CONST ADAPTIVE_THRESH_GAUSSIAN_C=1

--- Incoming ---
['const cv.PROJ_SPHERICAL_ORTHO', '0', [], [], None]
ok: CONST PROJ_SPHERICAL_ORTHO=0

--- Incoming ---
['const cv.PROJ_SPHERICAL_EQRECT', '1', [], [], None]
ok: CONST PROJ_SPHERICAL_EQRECT=1

--- Incoming ---
['const cv.GC_BGD', '0', [], [], None]
ok: CONST GC_BGD=0

--- Incoming ---
['const cv.GC_FGD', '1', [], [], None]
ok: CONST GC_FGD=1

--- Incoming ---
['const cv.GC_PR_BGD', '2', [], [], None]
ok: CONST GC_PR_BGD=2

--- Incoming ---
['const cv.GC_PR_FGD', '3', [], [], None]
ok: CONST GC_PR_FGD=3

--- Incoming ---
['const cv.GC_INIT_WITH_RECT', '0', [], [], None]
ok: CONST GC_INIT_WITH_RECT=0

--- Incoming ---
['const cv.GC_INIT_WITH_MASK', '1', [], [], None]
ok: CONST GC_INIT_WITH_MASK=1

--- Incoming ---
['const cv.GC_EVAL', '2', [], [], None]
ok: CONST GC_EVAL=2

--- Incoming ---
['const cv.GC_EVAL_FREEZE_MODEL', '3', [], [], None]
ok: CONST GC_EVAL_FREEZE_MODEL=3

--- Incoming ---
['const cv.DIST_LABEL_CCOMP', '0', [], [], None]
ok: CONST DIST_LABEL_CCOMP=0

--- Incoming ---
['const cv.DIST_LABEL_PIXEL', '1', [], [], None]
ok: CONST DIST_LABEL_PIXEL=1

--- Incoming ---
['const cv.FLOODFILL_FIXED_RANGE', '1 << 16', [], [], None]
ok: CONST FLOODFILL_FIXED_RANGE=1 << 16

--- Incoming ---
['const cv.FLOODFILL_MASK_ONLY', '1 << 17', [], [], None]
ok: CONST FLOODFILL_MASK_ONLY=1 << 17

--- Incoming ---
['const cv.CC_STAT_LEFT', '0', [], [], None]
ok: CONST CC_STAT_LEFT=0

--- Incoming ---
['const cv.CC_STAT_TOP', '1', [], [], None]
ok: CONST CC_STAT_TOP=1

--- Incoming ---
['const cv.CC_STAT_WIDTH', '2', [], [], None]
ok: CONST CC_STAT_WIDTH=2

--- Incoming ---
['const cv.CC_STAT_HEIGHT', '3', [], [], None]
ok: CONST CC_STAT_HEIGHT=3

--- Incoming ---
['const cv.CC_STAT_AREA', '4', [], [], None]
ok: CONST CC_STAT_AREA=4

--- Incoming ---
['const cv.CC_STAT_MAX', '5', [], [], None]
ok: CONST CC_STAT_MAX=5

--- Incoming ---
['const cv.CCL_WU', '0', [], [], None]
ok: CONST CCL_WU=0

--- Incoming ---
['const cv.CCL_DEFAULT', '-1', [], [], None]
ok: CONST CCL_DEFAULT=-1

--- Incoming ---
['const cv.CCL_GRANA', '1', [], [], None]
ok: CONST CCL_GRANA=1

--- Incoming ---
['const cv.RETR_EXTERNAL', '0', [], [], None]
ok: CONST RETR_EXTERNAL=0

--- Incoming ---
['const cv.RETR_LIST', '1', [], [], None]
ok: CONST RETR_LIST=1

--- Incoming ---
['const cv.RETR_CCOMP', '2', [], [], None]
ok: CONST RETR_CCOMP=2

--- Incoming ---
['const cv.RETR_TREE', '3', [], [], None]
ok: CONST RETR_TREE=3

--- Incoming ---
['const cv.RETR_FLOODFILL', '4', [], [], None]
ok: CONST RETR_FLOODFILL=4

--- Incoming ---
['const cv.CHAIN_APPROX_NONE', '1', [], [], None]
ok: CONST CHAIN_APPROX_NONE=1

--- Incoming ---
['const cv.CHAIN_APPROX_SIMPLE', '2', [], [], None]
ok: CONST CHAIN_APPROX_SIMPLE=2

--- Incoming ---
['const cv.CHAIN_APPROX_TC89_L1', '3', [], [], None]
ok: CONST CHAIN_APPROX_TC89_L1=3

--- Incoming ---
['const cv.CHAIN_APPROX_TC89_KCOS', '4', [], [], None]
ok: CONST CHAIN_APPROX_TC89_KCOS=4

--- Incoming ---
['const cv.CONTOURS_MATCH_I1', '1', [], [], None]
ok: CONST CONTOURS_MATCH_I1=1

--- Incoming ---
['const cv.CONTOURS_MATCH_I2', '2', [], [], None]
ok: CONST CONTOURS_MATCH_I2=2

--- Incoming ---
['const cv.CONTOURS_MATCH_I3', '3', [], [], None]
ok: CONST CONTOURS_MATCH_I3=3

--- Incoming ---
['const cv.HOUGH_STANDARD', '0', [], [], None]
ok: CONST HOUGH_STANDARD=0

--- Incoming ---
['const cv.HOUGH_PROBABILISTIC', '1', [], [], None]
ok: CONST HOUGH_PROBABILISTIC=1

--- Incoming ---
['const cv.HOUGH_MULTI_SCALE', '2', [], [], None]
ok: CONST HOUGH_MULTI_SCALE=2

--- Incoming ---
['const cv.HOUGH_GRADIENT', '3', [], [], None]
ok: CONST HOUGH_GRADIENT=3

--- Incoming ---
['const cv.LSD_REFINE_NONE', '0', [], [], None]
ok: CONST LSD_REFINE_NONE=0

--- Incoming ---
['const cv.LSD_REFINE_STD', '1', [], [], None]
ok: CONST LSD_REFINE_STD=1

--- Incoming ---
['const cv.LSD_REFINE_ADV', '2', [], [], None]
ok: CONST LSD_REFINE_ADV=2

--- Incoming ---
['const cv.HISTCMP_CORREL', '0', [], [], None]
ok: CONST HISTCMP_CORREL=0

--- Incoming ---
['const cv.HISTCMP_CHISQR', '1', [], [], None]
ok: CONST HISTCMP_CHISQR=1

--- Incoming ---
['const cv.HISTCMP_INTERSECT', '2', [], [], None]
ok: CONST HISTCMP_INTERSECT=2

--- Incoming ---
['const cv.HISTCMP_BHATTACHARYYA', '3', [], [], None]
ok: CONST HISTCMP_BHATTACHARYYA=3

--- Incoming ---
['const cv.HISTCMP_HELLINGER', 'HISTCMP_BHATTACHARYYA', [], [], None]
ok: CONST HISTCMP_HELLINGER=HISTCMP_BHATTACHARYYA

--- Incoming ---
['const cv.HISTCMP_CHISQR_ALT', '4', [], [], None]
ok: CONST HISTCMP_CHISQR_ALT=4

--- Incoming ---
['const cv.HISTCMP_KL_DIV', '5', [], [], None]
ok: CONST HISTCMP_KL_DIV=5

--- Incoming ---
['const cv.COLOR_BGR2BGRA', '0', [], [], None]
ok: CONST COLOR_BGR2BGRA=0

--- Incoming ---
['const cv.COLOR_RGB2RGBA', 'COLOR_BGR2BGRA', [], [], None]
ok: CONST COLOR_RGB2RGBA=COLOR_BGR2BGRA

--- Incoming ---
['const cv.COLOR_BGRA2BGR', '1', [], [], None]
ok: CONST COLOR_BGRA2BGR=1

--- Incoming ---
['const cv.COLOR_RGBA2RGB', 'COLOR_BGRA2BGR', [], [], None]
ok: CONST COLOR_RGBA2RGB=COLOR_BGRA2BGR

--- Incoming ---
['const cv.COLOR_BGR2RGBA', '2', [], [], None]
ok: CONST COLOR_BGR2RGBA=2

--- Incoming ---
['const cv.COLOR_RGB2BGRA', 'COLOR_BGR2RGBA', [], [], None]
ok: CONST COLOR_RGB2BGRA=COLOR_BGR2RGBA

--- Incoming ---
['const cv.COLOR_RGBA2BGR', '3', [], [], None]
ok: CONST COLOR_RGBA2BGR=3

--- Incoming ---
['const cv.COLOR_BGRA2RGB', 'COLOR_RGBA2BGR', [], [], None]
ok: CONST COLOR_BGRA2RGB=COLOR_RGBA2BGR

--- Incoming ---
['const cv.COLOR_BGR2RGB', '4', [], [], None]
ok: CONST COLOR_BGR2RGB=4

--- Incoming ---
['const cv.COLOR_RGB2BGR', 'COLOR_BGR2RGB', [], [], None]
ok: CONST COLOR_RGB2BGR=COLOR_BGR2RGB

--- Incoming ---
['const cv.COLOR_BGRA2RGBA', '5', [], [], None]
ok: CONST COLOR_BGRA2RGBA=5

--- Incoming ---
['const cv.COLOR_RGBA2BGRA', 'COLOR_BGRA2RGBA', [], [], None]
ok: CONST COLOR_RGBA2BGRA=COLOR_BGRA2RGBA

--- Incoming ---
['const cv.COLOR_BGR2GRAY', '6', [], [], None]
ok: CONST COLOR_BGR2GRAY=6

--- Incoming ---
['const cv.COLOR_RGB2GRAY', '7', [], [], None]
ok: CONST COLOR_RGB2GRAY=7

--- Incoming ---
['const cv.COLOR_GRAY2BGR', '8', [], [], None]
ok: CONST COLOR_GRAY2BGR=8

--- Incoming ---
['const cv.COLOR_GRAY2RGB', 'COLOR_GRAY2BGR', [], [], None]
ok: CONST COLOR_GRAY2RGB=COLOR_GRAY2BGR

--- Incoming ---
['const cv.COLOR_GRAY2BGRA', '9', [], [], None]
ok: CONST COLOR_GRAY2BGRA=9

--- Incoming ---
['const cv.COLOR_GRAY2RGBA', 'COLOR_GRAY2BGRA', [], [], None]
ok: CONST COLOR_GRAY2RGBA=COLOR_GRAY2BGRA

--- Incoming ---
['const cv.COLOR_BGRA2GRAY', '10', [], [], None]
ok: CONST COLOR_BGRA2GRAY=10

--- Incoming ---
['const cv.COLOR_RGBA2GRAY', '11', [], [], None]
ok: CONST COLOR_RGBA2GRAY=11

--- Incoming ---
['const cv.COLOR_BGR2BGR565', '12', [], [], None]
ok: CONST COLOR_BGR2BGR565=12

--- Incoming ---
['const cv.COLOR_RGB2BGR565', '13', [], [], None]
ok: CONST COLOR_RGB2BGR565=13

--- Incoming ---
['const cv.COLOR_BGR5652BGR', '14', [], [], None]
ok: CONST COLOR_BGR5652BGR=14

--- Incoming ---
['const cv.COLOR_BGR5652RGB', '15', [], [], None]
ok: CONST COLOR_BGR5652RGB=15

--- Incoming ---
['const cv.COLOR_BGRA2BGR565', '16', [], [], None]
ok: CONST COLOR_BGRA2BGR565=16

--- Incoming ---
['const cv.COLOR_RGBA2BGR565', '17', [], [], None]
ok: CONST COLOR_RGBA2BGR565=17

--- Incoming ---
['const cv.COLOR_BGR5652BGRA', '18', [], [], None]
ok: CONST COLOR_BGR5652BGRA=18

--- Incoming ---
['const cv.COLOR_BGR5652RGBA', '19', [], [], None]
ok: CONST COLOR_BGR5652RGBA=19

--- Incoming ---
['const cv.COLOR_GRAY2BGR565', '20', [], [], None]
ok: CONST COLOR_GRAY2BGR565=20

--- Incoming ---
['const cv.COLOR_BGR5652GRAY', '21', [], [], None]
ok: CONST COLOR_BGR5652GRAY=21

--- Incoming ---
['const cv.COLOR_BGR2BGR555', '22', [], [], None]
ok: CONST COLOR_BGR2BGR555=22

--- Incoming ---
['const cv.COLOR_RGB2BGR555', '23', [], [], None]
ok: CONST COLOR_RGB2BGR555=23

--- Incoming ---
['const cv.COLOR_BGR5552BGR', '24', [], [], None]
ok: CONST COLOR_BGR5552BGR=24

--- Incoming ---
['const cv.COLOR_BGR5552RGB', '25', [], [], None]
ok: CONST COLOR_BGR5552RGB=25

--- Incoming ---
['const cv.COLOR_BGRA2BGR555', '26', [], [], None]
ok: CONST COLOR_BGRA2BGR555=26

--- Incoming ---
['const cv.COLOR_RGBA2BGR555', '27', [], [], None]
ok: CONST COLOR_RGBA2BGR555=27

--- Incoming ---
['const cv.COLOR_BGR5552BGRA', '28', [], [], None]
ok: CONST COLOR_BGR5552BGRA=28

--- Incoming ---
['const cv.COLOR_BGR5552RGBA', '29', [], [], None]
ok: CONST COLOR_BGR5552RGBA=29

--- Incoming ---
['const cv.COLOR_GRAY2BGR555', '30', [], [], None]
ok: CONST COLOR_GRAY2BGR555=30

--- Incoming ---
['const cv.COLOR_BGR5552GRAY', '31', [], [], None]
ok: CONST COLOR_BGR5552GRAY=31

--- Incoming ---
['const cv.COLOR_BGR2XYZ', '32', [], [], None]
ok: CONST COLOR_BGR2XYZ=32

--- Incoming ---
['const cv.COLOR_RGB2XYZ', '33', [], [], None]
ok: CONST COLOR_RGB2XYZ=33

--- Incoming ---
['const cv.COLOR_XYZ2BGR', '34', [], [], None]
ok: CONST COLOR_XYZ2BGR=34

--- Incoming ---
['const cv.COLOR_XYZ2RGB', '35', [], [], None]
ok: CONST COLOR_XYZ2RGB=35

--- Incoming ---
['const cv.COLOR_BGR2YCrCb', '36', [], [], None]
ok: CONST COLOR_BGR2YCrCb=36

--- Incoming ---
['const cv.COLOR_RGB2YCrCb', '37', [], [], None]
ok: CONST COLOR_RGB2YCrCb=37

--- Incoming ---
['const cv.COLOR_YCrCb2BGR', '38', [], [], None]
ok: CONST COLOR_YCrCb2BGR=38

--- Incoming ---
['const cv.COLOR_YCrCb2RGB', '39', [], [], None]
ok: CONST COLOR_YCrCb2RGB=39

--- Incoming ---
['const cv.COLOR_BGR2HSV', '40', [], [], None]
ok: CONST COLOR_BGR2HSV=40

--- Incoming ---
['const cv.COLOR_RGB2HSV', '41', [], [], None]
ok: CONST COLOR_RGB2HSV=41

--- Incoming ---
['const cv.COLOR_BGR2Lab', '44', [], [], None]
ok: CONST COLOR_BGR2Lab=44

--- Incoming ---
['const cv.COLOR_RGB2Lab', '45', [], [], None]
ok: CONST COLOR_RGB2Lab=45

--- Incoming ---
['const cv.COLOR_BGR2Luv', '50', [], [], None]
ok: CONST COLOR_BGR2Luv=50

--- Incoming ---
['const cv.COLOR_RGB2Luv', '51', [], [], None]
ok: CONST COLOR_RGB2Luv=51

--- Incoming ---
['const cv.COLOR_BGR2HLS', '52', [], [], None]
ok: CONST COLOR_BGR2HLS=52

--- Incoming ---
['const cv.COLOR_RGB2HLS', '53', [], [], None]
ok: CONST COLOR_RGB2HLS=53

--- Incoming ---
['const cv.COLOR_HSV2BGR', '54', [], [], None]
ok: CONST COLOR_HSV2BGR=54

--- Incoming ---
['const cv.COLOR_HSV2RGB', '55', [], [], None]
ok: CONST COLOR_HSV2RGB=55

--- Incoming ---
['const cv.COLOR_Lab2BGR', '56', [], [], None]
ok: CONST COLOR_Lab2BGR=56

--- Incoming ---
['const cv.COLOR_Lab2RGB', '57', [], [], None]
ok: CONST COLOR_Lab2RGB=57

--- Incoming ---
['const cv.COLOR_Luv2BGR', '58', [], [], None]
ok: CONST COLOR_Luv2BGR=58

--- Incoming ---
['const cv.COLOR_Luv2RGB', '59', [], [], None]
ok: CONST COLOR_Luv2RGB=59

--- Incoming ---
['const cv.COLOR_HLS2BGR', '60', [], [], None]
ok: CONST COLOR_HLS2BGR=60

--- Incoming ---
['const cv.COLOR_HLS2RGB', '61', [], [], None]
ok: CONST COLOR_HLS2RGB=61

--- Incoming ---
['const cv.COLOR_BGR2HSV_FULL', '66', [], [], None]
ok: CONST COLOR_BGR2HSV_FULL=66

--- Incoming ---
['const cv.COLOR_RGB2HSV_FULL', '67', [], [], None]
ok: CONST COLOR_RGB2HSV_FULL=67

--- Incoming ---
['const cv.COLOR_BGR2HLS_FULL', '68', [], [], None]
ok: CONST COLOR_BGR2HLS_FULL=68

--- Incoming ---
['const cv.COLOR_RGB2HLS_FULL', '69', [], [], None]
ok: CONST COLOR_RGB2HLS_FULL=69

--- Incoming ---
['const cv.COLOR_HSV2BGR_FULL', '70', [], [], None]
ok: CONST COLOR_HSV2BGR_FULL=70

--- Incoming ---
['const cv.COLOR_HSV2RGB_FULL', '71', [], [], None]
ok: CONST COLOR_HSV2RGB_FULL=71

--- Incoming ---
['const cv.COLOR_HLS2BGR_FULL', '72', [], [], None]
ok: CONST COLOR_HLS2BGR_FULL=72

--- Incoming ---
['const cv.COLOR_HLS2RGB_FULL', '73', [], [], None]
ok: CONST COLOR_HLS2RGB_FULL=73

--- Incoming ---
['const cv.COLOR_LBGR2Lab', '74', [], [], None]
ok: CONST COLOR_LBGR2Lab=74

--- Incoming ---
['const cv.COLOR_LRGB2Lab', '75', [], [], None]
ok: CONST COLOR_LRGB2Lab=75

--- Incoming ---
['const cv.COLOR_LBGR2Luv', '76', [], [], None]
ok: CONST COLOR_LBGR2Luv=76

--- Incoming ---
['const cv.COLOR_LRGB2Luv', '77', [], [], None]
ok: CONST COLOR_LRGB2Luv=77

--- Incoming ---
['const cv.COLOR_Lab2LBGR', '78', [], [], None]
ok: CONST COLOR_Lab2LBGR=78

--- Incoming ---
['const cv.COLOR_Lab2LRGB', '79', [], [], None]
ok: CONST COLOR_Lab2LRGB=79

--- Incoming ---
['const cv.COLOR_Luv2LBGR', '80', [], [], None]
ok: CONST COLOR_Luv2LBGR=80

--- Incoming ---
['const cv.COLOR_Luv2LRGB', '81', [], [], None]
ok: CONST COLOR_Luv2LRGB=81

--- Incoming ---
['const cv.COLOR_BGR2YUV', '82', [], [], None]
ok: CONST COLOR_BGR2YUV=82

--- Incoming ---
['const cv.COLOR_RGB2YUV', '83', [], [], None]
ok: CONST COLOR_RGB2YUV=83

--- Incoming ---
['const cv.COLOR_YUV2BGR', '84', [], [], None]
ok: CONST COLOR_YUV2BGR=84

--- Incoming ---
['const cv.COLOR_YUV2RGB', '85', [], [], None]
ok: CONST COLOR_YUV2RGB=85

--- Incoming ---
['const cv.COLOR_YUV2RGB_NV12', '90', [], [], None]
ok: CONST COLOR_YUV2RGB_NV12=90

--- Incoming ---
['const cv.COLOR_YUV2BGR_NV12', '91', [], [], None]
ok: CONST COLOR_YUV2BGR_NV12=91

--- Incoming ---
['const cv.COLOR_YUV2RGB_NV21', '92', [], [], None]
ok: CONST COLOR_YUV2RGB_NV21=92

--- Incoming ---
['const cv.COLOR_YUV2BGR_NV21', '93', [], [], None]
ok: CONST COLOR_YUV2BGR_NV21=93

--- Incoming ---
['const cv.COLOR_YUV420sp2RGB', 'COLOR_YUV2RGB_NV21', [], [], None]
ok: CONST COLOR_YUV420sp2RGB=COLOR_YUV2RGB_NV21

--- Incoming ---
['const cv.COLOR_YUV420sp2BGR', 'COLOR_YUV2BGR_NV21', [], [], None]
ok: CONST COLOR_YUV420sp2BGR=COLOR_YUV2BGR_NV21

--- Incoming ---
['const cv.COLOR_YUV2RGBA_NV12', '94', [], [], None]
ok: CONST COLOR_YUV2RGBA_NV12=94

--- Incoming ---
['const cv.COLOR_YUV2BGRA_NV12', '95', [], [], None]
ok: CONST COLOR_YUV2BGRA_NV12=95

--- Incoming ---
['const cv.COLOR_YUV2RGBA_NV21', '96', [], [], None]
ok: CONST COLOR_YUV2RGBA_NV21=96

--- Incoming ---
['const cv.COLOR_YUV2BGRA_NV21', '97', [], [], None]
ok: CONST COLOR_YUV2BGRA_NV21=97

--- Incoming ---
['const cv.COLOR_YUV420sp2RGBA', 'COLOR_YUV2RGBA_NV21', [], [], None]
ok: CONST COLOR_YUV420sp2RGBA=COLOR_YUV2RGBA_NV21

--- Incoming ---
['const cv.COLOR_YUV420sp2BGRA', 'COLOR_YUV2BGRA_NV21', [], [], None]
ok: CONST COLOR_YUV420sp2BGRA=COLOR_YUV2BGRA_NV21

--- Incoming ---
['const cv.COLOR_YUV2RGB_YV12', '98', [], [], None]
ok: CONST COLOR_YUV2RGB_YV12=98

--- Incoming ---
['const cv.COLOR_YUV2BGR_YV12', '99', [], [], None]
ok: CONST COLOR_YUV2BGR_YV12=99

--- Incoming ---
['const cv.COLOR_YUV2RGB_IYUV', '100', [], [], None]
ok: CONST COLOR_YUV2RGB_IYUV=100

--- Incoming ---
['const cv.COLOR_YUV2BGR_IYUV', '101', [], [], None]
ok: CONST COLOR_YUV2BGR_IYUV=101

--- Incoming ---
['const cv.COLOR_YUV2RGB_I420', 'COLOR_YUV2RGB_IYUV', [], [], None]
ok: CONST COLOR_YUV2RGB_I420=COLOR_YUV2RGB_IYUV

--- Incoming ---
['const cv.COLOR_YUV2BGR_I420', 'COLOR_YUV2BGR_IYUV', [], [], None]
ok: CONST COLOR_YUV2BGR_I420=COLOR_YUV2BGR_IYUV

--- Incoming ---
['const cv.COLOR_YUV420p2RGB', 'COLOR_YUV2RGB_YV12', [], [], None]
ok: CONST COLOR_YUV420p2RGB=COLOR_YUV2RGB_YV12

--- Incoming ---
['const cv.COLOR_YUV420p2BGR', 'COLOR_YUV2BGR_YV12', [], [], None]
ok: CONST COLOR_YUV420p2BGR=COLOR_YUV2BGR_YV12

--- Incoming ---
['const cv.COLOR_YUV2RGBA_YV12', '102', [], [], None]
ok: CONST COLOR_YUV2RGBA_YV12=102

--- Incoming ---
['const cv.COLOR_YUV2BGRA_YV12', '103', [], [], None]
ok: CONST COLOR_YUV2BGRA_YV12=103

--- Incoming ---
['const cv.COLOR_YUV2RGBA_IYUV', '104', [], [], None]
ok: CONST COLOR_YUV2RGBA_IYUV=104

--- Incoming ---
['const cv.COLOR_YUV2BGRA_IYUV', '105', [], [], None]
ok: CONST COLOR_YUV2BGRA_IYUV=105

--- Incoming ---
['const cv.COLOR_YUV2RGBA_I420', 'COLOR_YUV2RGBA_IYUV', [], [], None]
ok: CONST COLOR_YUV2RGBA_I420=COLOR_YUV2RGBA_IYUV

--- Incoming ---
['const cv.COLOR_YUV2BGRA_I420', 'COLOR_YUV2BGRA_IYUV', [], [], None]
ok: CONST COLOR_YUV2BGRA_I420=COLOR_YUV2BGRA_IYUV

--- Incoming ---
['const cv.COLOR_YUV420p2RGBA', 'COLOR_YUV2RGBA_YV12', [], [], None]
ok: CONST COLOR_YUV420p2RGBA=COLOR_YUV2RGBA_YV12

--- Incoming ---
['const cv.COLOR_YUV420p2BGRA', 'COLOR_YUV2BGRA_YV12', [], [], None]
ok: CONST COLOR_YUV420p2BGRA=COLOR_YUV2BGRA_YV12

--- Incoming ---
['const cv.COLOR_YUV2GRAY_420', '106', [], [], None]
ok: CONST COLOR_YUV2GRAY_420=106

--- Incoming ---
['const cv.COLOR_YUV2GRAY_NV21', 'COLOR_YUV2GRAY_420', [], [], None]
ok: CONST COLOR_YUV2GRAY_NV21=COLOR_YUV2GRAY_420

--- Incoming ---
['const cv.COLOR_YUV2GRAY_NV12', 'COLOR_YUV2GRAY_420', [], [], None]
ok: CONST COLOR_YUV2GRAY_NV12=COLOR_YUV2GRAY_420

--- Incoming ---
['const cv.COLOR_YUV2GRAY_YV12', 'COLOR_YUV2GRAY_420', [], [], None]
ok: CONST COLOR_YUV2GRAY_YV12=COLOR_YUV2GRAY_420

--- Incoming ---
['const cv.COLOR_YUV2GRAY_IYUV', 'COLOR_YUV2GRAY_420', [], [], None]
ok: CONST COLOR_YUV2GRAY_IYUV=COLOR_YUV2GRAY_420

--- Incoming ---
['const cv.COLOR_YUV2GRAY_I420', 'COLOR_YUV2GRAY_420', [], [], None]
ok: CONST COLOR_YUV2GRAY_I420=COLOR_YUV2GRAY_420

--- Incoming ---
['const cv.COLOR_YUV420sp2GRAY', 'COLOR_YUV2GRAY_420', [], [], None]
ok: CONST COLOR_YUV420sp2GRAY=COLOR_YUV2GRAY_420

--- Incoming ---
['const cv.COLOR_YUV420p2GRAY', 'COLOR_YUV2GRAY_420', [], [], None]
ok: CONST COLOR_YUV420p2GRAY=COLOR_YUV2GRAY_420

--- Incoming ---
['const cv.COLOR_YUV2RGB_UYVY', '107', [], [], None]
ok: CONST COLOR_YUV2RGB_UYVY=107

--- Incoming ---
['const cv.COLOR_YUV2BGR_UYVY', '108', [], [], None]
ok: CONST COLOR_YUV2BGR_UYVY=108

--- Incoming ---
['const cv.COLOR_YUV2RGB_Y422', 'COLOR_YUV2RGB_UYVY', [], [], None]
ok: CONST COLOR_YUV2RGB_Y422=COLOR_YUV2RGB_UYVY

--- Incoming ---
['const cv.COLOR_YUV2BGR_Y422', 'COLOR_YUV2BGR_UYVY', [], [], None]
ok: CONST COLOR_YUV2BGR_Y422=COLOR_YUV2BGR_UYVY

--- Incoming ---
['const cv.COLOR_YUV2RGB_UYNV', 'COLOR_YUV2RGB_UYVY', [], [], None]
ok: CONST COLOR_YUV2RGB_UYNV=COLOR_YUV2RGB_UYVY

--- Incoming ---
['const cv.COLOR_YUV2BGR_UYNV', 'COLOR_YUV2BGR_UYVY', [], [], None]
ok: CONST COLOR_YUV2BGR_UYNV=COLOR_YUV2BGR_UYVY

--- Incoming ---
['const cv.COLOR_YUV2RGBA_UYVY', '111', [], [], None]
ok: CONST COLOR_YUV2RGBA_UYVY=111

--- Incoming ---
['const cv.COLOR_YUV2BGRA_UYVY', '112', [], [], None]
ok: CONST COLOR_YUV2BGRA_UYVY=112

--- Incoming ---
['const cv.COLOR_YUV2RGBA_Y422', 'COLOR_YUV2RGBA_UYVY', [], [], None]
ok: CONST COLOR_YUV2RGBA_Y422=COLOR_YUV2RGBA_UYVY

--- Incoming ---
['const cv.COLOR_YUV2BGRA_Y422', 'COLOR_YUV2BGRA_UYVY', [], [], None]
ok: CONST COLOR_YUV2BGRA_Y422=COLOR_YUV2BGRA_UYVY

--- Incoming ---
['const cv.COLOR_YUV2RGBA_UYNV', 'COLOR_YUV2RGBA_UYVY', [], [], None]
ok: CONST COLOR_YUV2RGBA_UYNV=COLOR_YUV2RGBA_UYVY

--- Incoming ---
['const cv.COLOR_YUV2BGRA_UYNV', 'COLOR_YUV2BGRA_UYVY', [], [], None]
ok: CONST COLOR_YUV2BGRA_UYNV=COLOR_YUV2BGRA_UYVY

--- Incoming ---
['const cv.COLOR_YUV2RGB_YUY2', '115', [], [], None]
ok: CONST COLOR_YUV2RGB_YUY2=115

--- Incoming ---
['const cv.COLOR_YUV2BGR_YUY2', '116', [], [], None]
ok: CONST COLOR_YUV2BGR_YUY2=116

--- Incoming ---
['const cv.COLOR_YUV2RGB_YVYU', '117', [], [], None]
ok: CONST COLOR_YUV2RGB_YVYU=117

--- Incoming ---
['const cv.COLOR_YUV2BGR_YVYU', '118', [], [], None]
ok: CONST COLOR_YUV2BGR_YVYU=118

--- Incoming ---
['const cv.COLOR_YUV2RGB_YUYV', 'COLOR_YUV2RGB_YUY2', [], [], None]
ok: CONST COLOR_YUV2RGB_YUYV=COLOR_YUV2RGB_YUY2

--- Incoming ---
['const cv.COLOR_YUV2BGR_YUYV', 'COLOR_YUV2BGR_YUY2', [], [], None]
ok: CONST COLOR_YUV2BGR_YUYV=COLOR_YUV2BGR_YUY2

--- Incoming ---
['const cv.COLOR_YUV2RGB_YUNV', 'COLOR_YUV2RGB_YUY2', [], [], None]
ok: CONST COLOR_YUV2RGB_YUNV=COLOR_YUV2RGB_YUY2

--- Incoming ---
['const cv.COLOR_YUV2BGR_YUNV', 'COLOR_YUV2BGR_YUY2', [], [], None]
ok: CONST COLOR_YUV2BGR_YUNV=COLOR_YUV2BGR_YUY2

--- Incoming ---
['const cv.COLOR_YUV2RGBA_YUY2', '119', [], [], None]
ok: CONST COLOR_YUV2RGBA_YUY2=119

--- Incoming ---
['const cv.COLOR_YUV2BGRA_YUY2', '120', [], [], None]
ok: CONST COLOR_YUV2BGRA_YUY2=120

--- Incoming ---
['const cv.COLOR_YUV2RGBA_YVYU', '121', [], [], None]
ok: CONST COLOR_YUV2RGBA_YVYU=121

--- Incoming ---
['const cv.COLOR_YUV2BGRA_YVYU', '122', [], [], None]
ok: CONST COLOR_YUV2BGRA_YVYU=122

--- Incoming ---
['const cv.COLOR_YUV2RGBA_YUYV', 'COLOR_YUV2RGBA_YUY2', [], [], None]
ok: CONST COLOR_YUV2RGBA_YUYV=COLOR_YUV2RGBA_YUY2

--- Incoming ---
['const cv.COLOR_YUV2BGRA_YUYV', 'COLOR_YUV2BGRA_YUY2', [], [], None]
ok: CONST COLOR_YUV2BGRA_YUYV=COLOR_YUV2BGRA_YUY2

--- Incoming ---
['const cv.COLOR_YUV2RGBA_YUNV', 'COLOR_YUV2RGBA_YUY2', [], [], None]
ok: CONST COLOR_YUV2RGBA_YUNV=COLOR_YUV2RGBA_YUY2

--- Incoming ---
['const cv.COLOR_YUV2BGRA_YUNV', 'COLOR_YUV2BGRA_YUY2', [], [], None]
ok: CONST COLOR_YUV2BGRA_YUNV=COLOR_YUV2BGRA_YUY2

--- Incoming ---
['const cv.COLOR_YUV2GRAY_UYVY', '123', [], [], None]
ok: CONST COLOR_YUV2GRAY_UYVY=123

--- Incoming ---
['const cv.COLOR_YUV2GRAY_YUY2', '124', [], [], None]
ok: CONST COLOR_YUV2GRAY_YUY2=124

--- Incoming ---
['const cv.COLOR_YUV2GRAY_Y422', 'COLOR_YUV2GRAY_UYVY', [], [], None]
ok: CONST COLOR_YUV2GRAY_Y422=COLOR_YUV2GRAY_UYVY

--- Incoming ---
['const cv.COLOR_YUV2GRAY_UYNV', 'COLOR_YUV2GRAY_UYVY', [], [], None]
ok: CONST COLOR_YUV2GRAY_UYNV=COLOR_YUV2GRAY_UYVY

--- Incoming ---
['const cv.COLOR_YUV2GRAY_YVYU', 'COLOR_YUV2GRAY_YUY2', [], [], None]
ok: CONST COLOR_YUV2GRAY_YVYU=COLOR_YUV2GRAY_YUY2

--- Incoming ---
['const cv.COLOR_YUV2GRAY_YUYV', 'COLOR_YUV2GRAY_YUY2', [], [], None]
ok: CONST COLOR_YUV2GRAY_YUYV=COLOR_YUV2GRAY_YUY2

--- Incoming ---
['const cv.COLOR_YUV2GRAY_YUNV', 'COLOR_YUV2GRAY_YUY2', [], [], None]
ok: CONST COLOR_YUV2GRAY_YUNV=COLOR_YUV2GRAY_YUY2

--- Incoming ---
['const cv.COLOR_RGBA2mRGBA', '125', [], [], None]
ok: CONST COLOR_RGBA2mRGBA=125

--- Incoming ---
['const cv.COLOR_mRGBA2RGBA', '126', [], [], None]
ok: CONST COLOR_mRGBA2RGBA=126

--- Incoming ---
['const cv.COLOR_RGB2YUV_I420', '127', [], [], None]
ok: CONST COLOR_RGB2YUV_I420=127

--- Incoming ---
['const cv.COLOR_BGR2YUV_I420', '128', [], [], None]
ok: CONST COLOR_BGR2YUV_I420=128

--- Incoming ---
['const cv.COLOR_RGB2YUV_IYUV', 'COLOR_RGB2YUV_I420', [], [], None]
ok: CONST COLOR_RGB2YUV_IYUV=COLOR_RGB2YUV_I420

--- Incoming ---
['const cv.COLOR_BGR2YUV_IYUV', 'COLOR_BGR2YUV_I420', [], [], None]
ok: CONST COLOR_BGR2YUV_IYUV=COLOR_BGR2YUV_I420

--- Incoming ---
['const cv.COLOR_RGBA2YUV_I420', '129', [], [], None]
ok: CONST COLOR_RGBA2YUV_I420=129

--- Incoming ---
['const cv.COLOR_BGRA2YUV_I420', '130', [], [], None]
ok: CONST COLOR_BGRA2YUV_I420=130

--- Incoming ---
['const cv.COLOR_RGBA2YUV_IYUV', 'COLOR_RGBA2YUV_I420', [], [], None]
ok: CONST COLOR_RGBA2YUV_IYUV=COLOR_RGBA2YUV_I420

--- Incoming ---
['const cv.COLOR_BGRA2YUV_IYUV', 'COLOR_BGRA2YUV_I420', [], [], None]
ok: CONST COLOR_BGRA2YUV_IYUV=COLOR_BGRA2YUV_I420

--- Incoming ---
['const cv.COLOR_RGB2YUV_YV12', '131', [], [], None]
ok: CONST COLOR_RGB2YUV_YV12=131

--- Incoming ---
['const cv.COLOR_BGR2YUV_YV12', '132', [], [], None]
ok: CONST COLOR_BGR2YUV_YV12=132

--- Incoming ---
['const cv.COLOR_RGBA2YUV_YV12', '133', [], [], None]
ok: CONST COLOR_RGBA2YUV_YV12=133

--- Incoming ---
['const cv.COLOR_BGRA2YUV_YV12', '134', [], [], None]
ok: CONST COLOR_BGRA2YUV_YV12=134

--- Incoming ---
['const cv.COLOR_BayerBG2BGR', '46', [], [], None]
ok: CONST COLOR_BayerBG2BGR=46

--- Incoming ---
['const cv.COLOR_BayerGB2BGR', '47', [], [], None]
ok: CONST COLOR_BayerGB2BGR=47

--- Incoming ---
['const cv.COLOR_BayerRG2BGR', '48', [], [], None]
ok: CONST COLOR_BayerRG2BGR=48

--- Incoming ---
['const cv.COLOR_BayerGR2BGR', '49', [], [], None]
ok: CONST COLOR_BayerGR2BGR=49

--- Incoming ---
['const cv.COLOR_BayerBG2RGB', 'COLOR_BayerRG2BGR', [], [], None]
ok: CONST COLOR_BayerBG2RGB=COLOR_BayerRG2BGR

--- Incoming ---
['const cv.COLOR_BayerGB2RGB', 'COLOR_BayerGR2BGR', [], [], None]
ok: CONST COLOR_BayerGB2RGB=COLOR_BayerGR2BGR

--- Incoming ---
['const cv.COLOR_BayerRG2RGB', 'COLOR_BayerBG2BGR', [], [], None]
ok: CONST COLOR_BayerRG2RGB=COLOR_BayerBG2BGR

--- Incoming ---
['const cv.COLOR_BayerGR2RGB', 'COLOR_BayerGB2BGR', [], [], None]
ok: CONST COLOR_BayerGR2RGB=COLOR_BayerGB2BGR

--- Incoming ---
['const cv.COLOR_BayerBG2GRAY', '86', [], [], None]
ok: CONST COLOR_BayerBG2GRAY=86

--- Incoming ---
['const cv.COLOR_BayerGB2GRAY', '87', [], [], None]
ok: CONST COLOR_BayerGB2GRAY=87

--- Incoming ---
['const cv.COLOR_BayerRG2GRAY', '88', [], [], None]
ok: CONST COLOR_BayerRG2GRAY=88

--- Incoming ---
['const cv.COLOR_BayerGR2GRAY', '89', [], [], None]
ok: CONST COLOR_BayerGR2GRAY=89

--- Incoming ---
['const cv.COLOR_BayerBG2BGR_VNG', '62', [], [], None]
ok: CONST COLOR_BayerBG2BGR_VNG=62

--- Incoming ---
['const cv.COLOR_BayerGB2BGR_VNG', '63', [], [], None]
ok: CONST COLOR_BayerGB2BGR_VNG=63

--- Incoming ---
['const cv.COLOR_BayerRG2BGR_VNG', '64', [], [], None]
ok: CONST COLOR_BayerRG2BGR_VNG=64

--- Incoming ---
['const cv.COLOR_BayerGR2BGR_VNG', '65', [], [], None]
ok: CONST COLOR_BayerGR2BGR_VNG=65

--- Incoming ---
['const cv.COLOR_BayerBG2RGB_VNG', 'COLOR_BayerRG2BGR_VNG', [], [], None]
ok: CONST COLOR_BayerBG2RGB_VNG=COLOR_BayerRG2BGR_VNG

--- Incoming ---
['const cv.COLOR_BayerGB2RGB_VNG', 'COLOR_BayerGR2BGR_VNG', [], [], None]
ok: CONST COLOR_BayerGB2RGB_VNG=COLOR_BayerGR2BGR_VNG

--- Incoming ---
['const cv.COLOR_BayerRG2RGB_VNG', 'COLOR_BayerBG2BGR_VNG', [], [], None]
ok: CONST COLOR_BayerRG2RGB_VNG=COLOR_BayerBG2BGR_VNG

--- Incoming ---
['const cv.COLOR_BayerGR2RGB_VNG', 'COLOR_BayerGB2BGR_VNG', [], [], None]
ok: CONST COLOR_BayerGR2RGB_VNG=COLOR_BayerGB2BGR_VNG

--- Incoming ---
['const cv.COLOR_BayerBG2BGR_EA', '135', [], [], None]
ok: CONST COLOR_BayerBG2BGR_EA=135

--- Incoming ---
['const cv.COLOR_BayerGB2BGR_EA', '136', [], [], None]
ok: CONST COLOR_BayerGB2BGR_EA=136

--- Incoming ---
['const cv.COLOR_BayerRG2BGR_EA', '137', [], [], None]
ok: CONST COLOR_BayerRG2BGR_EA=137

--- Incoming ---
['const cv.COLOR_BayerGR2BGR_EA', '138', [], [], None]
ok: CONST COLOR_BayerGR2BGR_EA=138

--- Incoming ---
['const cv.COLOR_BayerBG2RGB_EA', 'COLOR_BayerRG2BGR_EA', [], [], None]
ok: CONST COLOR_BayerBG2RGB_EA=COLOR_BayerRG2BGR_EA

--- Incoming ---
['const cv.COLOR_BayerGB2RGB_EA', 'COLOR_BayerGR2BGR_EA', [], [], None]
ok: CONST COLOR_BayerGB2RGB_EA=COLOR_BayerGR2BGR_EA

--- Incoming ---
['const cv.COLOR_BayerRG2RGB_EA', 'COLOR_BayerBG2BGR_EA', [], [], None]
ok: CONST COLOR_BayerRG2RGB_EA=COLOR_BayerBG2BGR_EA

--- Incoming ---
['const cv.COLOR_BayerGR2RGB_EA', 'COLOR_BayerGB2BGR_EA', [], [], None]
ok: CONST COLOR_BayerGR2RGB_EA=COLOR_BayerGB2BGR_EA

--- Incoming ---
['const cv.COLOR_BayerBG2BGRA', '139', [], [], None]
ok: CONST COLOR_BayerBG2BGRA=139

--- Incoming ---
['const cv.COLOR_BayerGB2BGRA', '140', [], [], None]
ok: CONST COLOR_BayerGB2BGRA=140

--- Incoming ---
['const cv.COLOR_BayerRG2BGRA', '141', [], [], None]
ok: CONST COLOR_BayerRG2BGRA=141

--- Incoming ---
['const cv.COLOR_BayerGR2BGRA', '142', [], [], None]
ok: CONST COLOR_BayerGR2BGRA=142

--- Incoming ---
['const cv.COLOR_BayerBG2RGBA', 'COLOR_BayerRG2BGRA', [], [], None]
ok: CONST COLOR_BayerBG2RGBA=COLOR_BayerRG2BGRA

--- Incoming ---
['const cv.COLOR_BayerGB2RGBA', 'COLOR_BayerGR2BGRA', [], [], None]
ok: CONST COLOR_BayerGB2RGBA=COLOR_BayerGR2BGRA

--- Incoming ---
['const cv.COLOR_BayerRG2RGBA', 'COLOR_BayerBG2BGRA', [], [], None]
ok: CONST COLOR_BayerRG2RGBA=COLOR_BayerBG2BGRA

--- Incoming ---
['const cv.COLOR_BayerGR2RGBA', 'COLOR_BayerGB2BGRA', [], [], None]
ok: CONST COLOR_BayerGR2RGBA=COLOR_BayerGB2BGRA

--- Incoming ---
['const cv.COLOR_COLORCVT_MAX', '143', [], [], None]
ok: CONST COLOR_COLORCVT_MAX=143

--- Incoming ---
['const cv.INTERSECT_NONE', '0', [], [], None]
ok: CONST INTERSECT_NONE=0

--- Incoming ---
['const cv.INTERSECT_PARTIAL', '1', [], [], None]
ok: CONST INTERSECT_PARTIAL=1

--- Incoming ---
['const cv.INTERSECT_FULL', '2', [], [], None]
ok: CONST INTERSECT_FULL=2

--- Incoming ---
['class cv.CLAHE', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.CLAHE : Algorithm, name: CLAHE, base: Algorithm

--- Incoming ---
[   'cv.CLAHE.apply',
    'void',
    ['/V', '/PV'],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv.CLAHE.apply [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.CLAHE.setClipLimit',
    'void',
    ['/V', '/PV'],
    [['double', 'clipLimit', '', []]],
    'void']
ok: FUNC <void cv.CLAHE.setClipLimit [ARG double clipLimit=]>

--- Incoming ---
['cv.CLAHE.getClipLimit', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.CLAHE.getClipLimit []>

--- Incoming ---
[   'cv.CLAHE.setTilesGridSize',
    'void',
    ['/V', '/PV'],
    [['Size', 'tileGridSize', '', []]],
    'void']
ok: FUNC <void cv.CLAHE.setTilesGridSize [ARG Size tileGridSize=]>

--- Incoming ---
['cv.CLAHE.getTilesGridSize', 'Size', ['/C', '/V', '/PV'], [], 'Size']
ok: FUNC <Size cv.CLAHE.getTilesGridSize []>

--- Incoming ---
['cv.CLAHE.collectGarbage', 'void', ['/V', '/PV'], [], 'void']
ok: FUNC <void cv.CLAHE.collectGarbage []>

--- Incoming ---
['class cv.Subdiv2D', '', [], [], None]
ok: class CLASS cv::.Subdiv2D : , name: Subdiv2D, base: 

--- Incoming ---
['const cv.Subdiv2D.PTLOC_ERROR', '-2', [], [], None]
ok: CONST PTLOC_ERROR=-2

--- Incoming ---
['const cv.Subdiv2D.PTLOC_OUTSIDE_RECT', '-1', [], [], None]
ok: CONST PTLOC_OUTSIDE_RECT=-1

--- Incoming ---
['const cv.Subdiv2D.PTLOC_INSIDE', '0', [], [], None]
ok: CONST PTLOC_INSIDE=0

--- Incoming ---
['const cv.Subdiv2D.PTLOC_VERTEX', '1', [], [], None]
ok: CONST PTLOC_VERTEX=1

--- Incoming ---
['const cv.Subdiv2D.PTLOC_ON_EDGE', '2', [], [], None]
ok: CONST PTLOC_ON_EDGE=2

--- Incoming ---
['const cv.Subdiv2D.NEXT_AROUND_ORG', '0x00', [], [], None]
ok: CONST NEXT_AROUND_ORG=0x00

--- Incoming ---
['const cv.Subdiv2D.NEXT_AROUND_DST', '0x22', [], [], None]
ok: CONST NEXT_AROUND_DST=0x22

--- Incoming ---
['const cv.Subdiv2D.PREV_AROUND_ORG', '0x11', [], [], None]
ok: CONST PREV_AROUND_ORG=0x11

--- Incoming ---
['const cv.Subdiv2D.PREV_AROUND_DST', '0x33', [], [], None]
ok: CONST PREV_AROUND_DST=0x33

--- Incoming ---
['const cv.Subdiv2D.NEXT_AROUND_LEFT', '0x13', [], [], None]
ok: CONST NEXT_AROUND_LEFT=0x13

--- Incoming ---
['const cv.Subdiv2D.NEXT_AROUND_RIGHT', '0x31', [], [], None]
ok: CONST NEXT_AROUND_RIGHT=0x31

--- Incoming ---
['const cv.Subdiv2D.PREV_AROUND_LEFT', '0x20', [], [], None]
ok: CONST PREV_AROUND_LEFT=0x20

--- Incoming ---
['const cv.Subdiv2D.PREV_AROUND_RIGHT', '0x02', [], [], None]
ok: CONST PREV_AROUND_RIGHT=0x02

--- Incoming ---
['cv.Subdiv2D.Subdiv2D', '', [], [], None]
ok: FUNC < cv.Subdiv2D.Subdiv2D []>

--- Incoming ---
['cv.Subdiv2D.Subdiv2D', '', [], [['Rect', 'rect', '', []]], None]
ok: FUNC < cv.Subdiv2D.Subdiv2D [ARG Rect rect=]>

--- Incoming ---
['cv.Subdiv2D.initDelaunay', 'void', [], [['Rect', 'rect', '', []]], 'void']
ok: FUNC <void cv.Subdiv2D.initDelaunay [ARG Rect rect=]>

--- Incoming ---
['cv.Subdiv2D.insert', 'int', [], [['Point2f', 'pt', '', []]], 'int']
ok: FUNC <int cv.Subdiv2D.insert [ARG Point2f pt=]>

--- Incoming ---
[   'cv.Subdiv2D.insert',
    'void',
    [],
    [['vector_Point2f', 'ptvec', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.Subdiv2D.insert [ARG vector_Point2f ptvec=]>

--- Incoming ---
[   'cv.Subdiv2D.locate',
    'int',
    [],
    [   ['Point2f', 'pt', '', []],
        ['int', 'edge', '', ['/O', '/Ref']],
        ['int', 'vertex', '', ['/O', '/Ref']]],
    'int']
ok: FUNC <int cv.Subdiv2D.locate [ARG Point2f pt=, ARG int edge=, ARG int vertex=]>

--- Incoming ---
[   'cv.Subdiv2D.findNearest',
    'int',
    [],
    [['Point2f', 'pt', '', []], ['Point2f*', 'nearestPt', '0', ['/O']]],
    'int']
ok: FUNC <int cv.Subdiv2D.findNearest [ARG Point2f pt=, ARG Point2f * nearestPt=0]>

--- Incoming ---
[   'cv.Subdiv2D.getEdgeList',
    'void',
    ['/C'],
    [['vector_Vec4f', 'edgeList', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.Subdiv2D.getEdgeList [ARG vector_Vec4f edgeList=]>

--- Incoming ---
[   'cv.Subdiv2D.getLeadingEdgeList',
    'void',
    ['/C'],
    [['vector_int', 'leadingEdgeList', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.Subdiv2D.getLeadingEdgeList [ARG vector_int leadingEdgeList=]>

--- Incoming ---
[   'cv.Subdiv2D.getTriangleList',
    'void',
    ['/C'],
    [['vector_Vec6f', 'triangleList', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.Subdiv2D.getTriangleList [ARG vector_Vec6f triangleList=]>

--- Incoming ---
[   'cv.Subdiv2D.getVoronoiFacetList',
    'void',
    [],
    [   ['vector_int', 'idx', '', ['/C', '/Ref']],
        ['vector_vector_Point2f', 'facetList', '', ['/O', '/Ref']],
        ['vector_Point2f', 'facetCenters', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.Subdiv2D.getVoronoiFacetList [ARG vector_int idx=, ARG vector_vector_Point2f facetList=, ARG vector_Point2f facetCenters=]>

--- Incoming ---
[   'cv.Subdiv2D.getVertex',
    'Point2f',
    ['/C'],
    [['int', 'vertex', '', []], ['int*', 'firstEdge', '0', ['/O']]],
    'Point2f']
ok: FUNC <Point2f cv.Subdiv2D.getVertex [ARG int vertex=, ARG int * firstEdge=0]>

--- Incoming ---
[   'cv.Subdiv2D.getEdge',
    'int',
    ['/C'],
    [['int', 'edge', '', []], ['int', 'nextEdgeType', '', []]],
    'int']
ok: FUNC <int cv.Subdiv2D.getEdge [ARG int edge=, ARG int nextEdgeType=]>

--- Incoming ---
['cv.Subdiv2D.nextEdge', 'int', ['/C'], [['int', 'edge', '', []]], 'int']
ok: FUNC <int cv.Subdiv2D.nextEdge [ARG int edge=]>

--- Incoming ---
[   'cv.Subdiv2D.rotateEdge',
    'int',
    ['/C'],
    [['int', 'edge', '', []], ['int', 'rotate', '', []]],
    'int']
ok: FUNC <int cv.Subdiv2D.rotateEdge [ARG int edge=, ARG int rotate=]>

--- Incoming ---
['cv.Subdiv2D.symEdge', 'int', ['/C'], [['int', 'edge', '', []]], 'int']
ok: FUNC <int cv.Subdiv2D.symEdge [ARG int edge=]>

--- Incoming ---
[   'cv.Subdiv2D.edgeOrg',
    'int',
    ['/C'],
    [['int', 'edge', '', []], ['Point2f*', 'orgpt', '0', ['/O']]],
    'int']
ok: FUNC <int cv.Subdiv2D.edgeOrg [ARG int edge=, ARG Point2f * orgpt=0]>

--- Incoming ---
[   'cv.Subdiv2D.edgeDst',
    'int',
    ['/C'],
    [['int', 'edge', '', []], ['Point2f*', 'dstpt', '0', ['/O']]],
    'int']
ok: FUNC <int cv.Subdiv2D.edgeDst [ARG int edge=, ARG Point2f * dstpt=0]>

--- Incoming ---
['class cv.LineSegmentDetector', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.LineSegmentDetector : Algorithm, name: LineSegmentDetector, base: Algorithm

--- Incoming ---
[   'cv.LineSegmentDetector.detect',
    'void',
    ['/V', '/PV'],
    [   ['Mat', '_image', '', []],
        ['Mat', '_lines', '', ['/O']],
        ['Mat', 'width', 'Mat()', ['/O']],
        ['Mat', 'prec', 'Mat()', ['/O']],
        ['Mat', 'nfa', 'Mat()', ['/O']]],
    'void']
ok: FUNC <void cv.LineSegmentDetector.detect [ARG Mat _image=, ARG Mat _lines=, ARG Mat width=Mat(), ARG Mat prec=Mat(), ARG Mat nfa=Mat()]>

--- Incoming ---
[   'cv.LineSegmentDetector.drawSegments',
    'void',
    ['/V', '/PV'],
    [['Mat', '_image', '', ['/IO']], ['Mat', 'lines', '', []]],
    'void']
ok: FUNC <void cv.LineSegmentDetector.drawSegments [ARG Mat _image=, ARG Mat lines=]>

--- Incoming ---
[   'cv.LineSegmentDetector.compareSegments',
    'int',
    ['/V', '/PV'],
    [   ['Size', 'size', '', ['/C', '/Ref']],
        ['Mat', 'lines1', '', []],
        ['Mat', 'lines2', '', []],
        ['Mat', '_image', 'Mat()', ['/IO']]],
    'int']
ok: FUNC <int cv.LineSegmentDetector.compareSegments [ARG Size size=, ARG Mat lines1=, ARG Mat lines2=, ARG Mat _image=Mat()]>

--- Incoming ---
[   'cv.createLineSegmentDetector',
    'Ptr_LineSegmentDetector',
    [],
    [   ['int', '_refine', 'LSD_REFINE_STD', []],
        ['double', '_scale', '0.8', []],
        ['double', '_sigma_scale', '0.6', []],
        ['double', '_quant', '2.0', []],
        ['double', '_ang_th', '22.5', []],
        ['double', '_log_eps', '0', []],
        ['double', '_density_th', '0.7', []],
        ['int', '_n_bins', '1024', []]],
    'Ptr<LineSegmentDetector>']
ok: FUNC <Ptr_LineSegmentDetector cv..createLineSegmentDetector [ARG int _refine=LSD_REFINE_STD, ARG double _scale=0.8, ARG double _sigma_scale=0.6, ARG double _quant=2.0, ARG double _ang_th=22.5, ARG double _log_eps=0, ARG double _density_th=0.7, ARG int _n_bins=1024]>

--- Incoming ---
[   'cv.getGaussianKernel',
    'Mat',
    [],
    [   ['int', 'ksize', '', []],
        ['double', 'sigma', '', []],
        ['int', 'ktype', 'CV_64F', []]],
    'Mat']
ok: FUNC <Mat cv..getGaussianKernel [ARG int ksize=, ARG double sigma=, ARG int ktype=CV_64F]>

--- Incoming ---
[   'cv.getDerivKernels',
    'void',
    [],
    [   ['Mat', 'kx', '', ['/O']],
        ['Mat', 'ky', '', ['/O']],
        ['int', 'dx', '', []],
        ['int', 'dy', '', []],
        ['int', 'ksize', '', []],
        ['bool', 'normalize', 'false', []],
        ['int', 'ktype', 'CV_32F', []]],
    'void']
ok: FUNC <void cv..getDerivKernels [ARG Mat kx=, ARG Mat ky=, ARG int dx=, ARG int dy=, ARG int ksize=, ARG bool normalize=false, ARG int ktype=CV_32F]>

--- Incoming ---
[   'cv.getGaborKernel',
    'Mat',
    [],
    [   ['Size', 'ksize', '', []],
        ['double', 'sigma', '', []],
        ['double', 'theta', '', []],
        ['double', 'lambd', '', []],
        ['double', 'gamma', '', []],
        ['double', 'psi', 'CV_PI*0.5', []],
        ['int', 'ktype', 'CV_64F', []]],
    'Mat']
ok: FUNC <Mat cv..getGaborKernel [ARG Size ksize=, ARG double sigma=, ARG double theta=, ARG double lambd=, ARG double gamma=, ARG double psi=CV_PI*0.5, ARG int ktype=CV_64F]>

--- Incoming ---
[   'cv.getStructuringElement',
    'Mat',
    [],
    [   ['int', 'shape', '', []],
        ['Size', 'ksize', '', []],
        ['Point', 'anchor', 'Point(-1,-1)', []]],
    'Mat']
ok: FUNC <Mat cv..getStructuringElement [ARG int shape=, ARG Size ksize=, ARG Point anchor=Point(-1,-1)]>

--- Incoming ---
[   'cv.medianBlur',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'ksize', '', []]],
    'void']
ok: FUNC <void cv..medianBlur [ARG Mat src=, ARG Mat dst=, ARG int ksize=]>

--- Incoming ---
[   'cv.GaussianBlur',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Size', 'ksize', '', []],
        ['double', 'sigmaX', '', []],
        ['double', 'sigmaY', '0', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..GaussianBlur [ARG Mat src=, ARG Mat dst=, ARG Size ksize=, ARG double sigmaX=, ARG double sigmaY=0, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.bilateralFilter',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'd', '', []],
        ['double', 'sigmaColor', '', []],
        ['double', 'sigmaSpace', '', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..bilateralFilter [ARG Mat src=, ARG Mat dst=, ARG int d=, ARG double sigmaColor=, ARG double sigmaSpace=, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.boxFilter',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'ddepth', '', []],
        ['Size', 'ksize', '', []],
        ['Point', 'anchor', 'Point(-1,-1)', []],
        ['bool', 'normalize', 'true', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..boxFilter [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Size ksize=, ARG Point anchor=Point(-1,-1), ARG bool normalize=true, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.sqrBoxFilter',
    'void',
    [],
    [   ['Mat', '_src', '', []],
        ['Mat', '_dst', '', ['/O']],
        ['int', 'ddepth', '', []],
        ['Size', 'ksize', '', []],
        ['Point', 'anchor', 'Point(-1, -1)', []],
        ['bool', 'normalize', 'true', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..sqrBoxFilter [ARG Mat _src=, ARG Mat _dst=, ARG int ddepth=, ARG Size ksize=, ARG Point anchor=Point(-1, -1), ARG bool normalize=true, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.blur',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Size', 'ksize', '', []],
        ['Point', 'anchor', 'Point(-1,-1)', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..blur [ARG Mat src=, ARG Mat dst=, ARG Size ksize=, ARG Point anchor=Point(-1,-1), ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.filter2D',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'ddepth', '', []],
        ['Mat', 'kernel', '', []],
        ['Point', 'anchor', 'Point(-1,-1)', []],
        ['double', 'delta', '0', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..filter2D [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.sepFilter2D',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'ddepth', '', []],
        ['Mat', 'kernelX', '', []],
        ['Mat', 'kernelY', '', []],
        ['Point', 'anchor', 'Point(-1,-1)', []],
        ['double', 'delta', '0', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..sepFilter2D [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Mat kernelX=, ARG Mat kernelY=, ARG Point anchor=Point(-1,-1), ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.Sobel',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'ddepth', '', []],
        ['int', 'dx', '', []],
        ['int', 'dy', '', []],
        ['int', 'ksize', '3', []],
        ['double', 'scale', '1', []],
        ['double', 'delta', '0', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..Sobel [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int dx=, ARG int dy=, ARG int ksize=3, ARG double scale=1, ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.spatialGradient',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dx', '', ['/O']],
        ['Mat', 'dy', '', ['/O']],
        ['int', 'ksize', '3', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..spatialGradient [ARG Mat src=, ARG Mat dx=, ARG Mat dy=, ARG int ksize=3, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.Scharr',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'ddepth', '', []],
        ['int', 'dx', '', []],
        ['int', 'dy', '', []],
        ['double', 'scale', '1', []],
        ['double', 'delta', '0', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..Scharr [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int dx=, ARG int dy=, ARG double scale=1, ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.Laplacian',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'ddepth', '', []],
        ['int', 'ksize', '1', []],
        ['double', 'scale', '1', []],
        ['double', 'delta', '0', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..Laplacian [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int ksize=1, ARG double scale=1, ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.Canny',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'edges', '', ['/O']],
        ['double', 'threshold1', '', []],
        ['double', 'threshold2', '', []],
        ['int', 'apertureSize', '3', []],
        ['bool', 'L2gradient', 'false', []]],
    'void']
ok: FUNC <void cv..Canny [ARG Mat image=, ARG Mat edges=, ARG double threshold1=, ARG double threshold2=, ARG int apertureSize=3, ARG bool L2gradient=false]>

--- Incoming ---
[   'cv.Canny',
    'void',
    [],
    [   ['Mat', 'dx', '', []],
        ['Mat', 'dy', '', []],
        ['Mat', 'edges', '', ['/O']],
        ['double', 'threshold1', '', []],
        ['double', 'threshold2', '', []],
        ['bool', 'L2gradient', 'false', []]],
    'void']
ok: FUNC <void cv..Canny [ARG Mat dx=, ARG Mat dy=, ARG Mat edges=, ARG double threshold1=, ARG double threshold2=, ARG bool L2gradient=false]>

--- Incoming ---
[   'cv.cornerMinEigenVal',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'blockSize', '', []],
        ['int', 'ksize', '3', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..cornerMinEigenVal [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=3, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.cornerHarris',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'blockSize', '', []],
        ['int', 'ksize', '', []],
        ['double', 'k', '', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..cornerHarris [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=, ARG double k=, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.cornerEigenValsAndVecs',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'blockSize', '', []],
        ['int', 'ksize', '', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..cornerEigenValsAndVecs [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.preCornerDetect',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'ksize', '', []],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..preCornerDetect [ARG Mat src=, ARG Mat dst=, ARG int ksize=, ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.cornerSubPix',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'corners', '', ['/IO']],
        ['Size', 'winSize', '', []],
        ['Size', 'zeroZone', '', []],
        ['TermCriteria', 'criteria', '', []]],
    'void']
ok: FUNC <void cv..cornerSubPix [ARG Mat image=, ARG Mat corners=, ARG Size winSize=, ARG Size zeroZone=, ARG TermCriteria criteria=]>

--- Incoming ---
[   'cv.goodFeaturesToTrack',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'corners', '', ['/O']],
        ['int', 'maxCorners', '', []],
        ['double', 'qualityLevel', '', []],
        ['double', 'minDistance', '', []],
        ['Mat', 'mask', 'Mat()', []],
        ['int', 'blockSize', '3', []],
        ['bool', 'useHarrisDetector', 'false', []],
        ['double', 'k', '0.04', []]],
    'void']
ok: FUNC <void cv..goodFeaturesToTrack [ARG Mat image=, ARG vector_Point corners=, ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG Mat mask=Mat(), ARG int blockSize=3, ARG bool useHarrisDetector=false, ARG double k=0.04]>

--- Incoming ---
[   'cv.goodFeaturesToTrack',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'corners', '', ['/O']],
        ['int', 'maxCorners', '', []],
        ['double', 'qualityLevel', '', []],
        ['double', 'minDistance', '', []],
        ['Mat', 'mask', '', []],
        ['int', 'blockSize', '', []],
        ['int', 'gradientSize', '', []],
        ['bool', 'useHarrisDetector', 'false', []],
        ['double', 'k', '0.04', []]],
    'void']
ok: FUNC <void cv..goodFeaturesToTrack [ARG Mat image=, ARG vector_Point corners=, ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG Mat mask=, ARG int blockSize=, ARG int gradientSize=, ARG bool useHarrisDetector=false, ARG double k=0.04]>

--- Incoming ---
[   'cv.HoughLines',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'lines', '', ['/O']],
        ['double', 'rho', '', []],
        ['double', 'theta', '', []],
        ['int', 'threshold', '', []],
        ['double', 'srn', '0', []],
        ['double', 'stn', '0', []],
        ['double', 'min_theta', '0', []],
        ['double', 'max_theta', 'CV_PI', []]],
    'void']
ok: FUNC <void cv..HoughLines [ARG Mat image=, ARG Mat lines=, ARG double rho=, ARG double theta=, ARG int threshold=, ARG double srn=0, ARG double stn=0, ARG double min_theta=0, ARG double max_theta=CV_PI]>

--- Incoming ---
[   'cv.HoughLinesP',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'lines', '', ['/O']],
        ['double', 'rho', '', []],
        ['double', 'theta', '', []],
        ['int', 'threshold', '', []],
        ['double', 'minLineLength', '0', []],
        ['double', 'maxLineGap', '0', []]],
    'void']
ok: FUNC <void cv..HoughLinesP [ARG Mat image=, ARG Mat lines=, ARG double rho=, ARG double theta=, ARG int threshold=, ARG double minLineLength=0, ARG double maxLineGap=0]>

--- Incoming ---
[   'cv.HoughLinesPointSet',
    'void',
    [],
    [   ['Mat', '_point', '', []],
        ['Mat', '_lines', '', ['/O']],
        ['int', 'lines_max', '', []],
        ['int', 'threshold', '', []],
        ['double', 'min_rho', '', []],
        ['double', 'max_rho', '', []],
        ['double', 'rho_step', '', []],
        ['double', 'min_theta', '', []],
        ['double', 'max_theta', '', []],
        ['double', 'theta_step', '', []]],
    'void']
ok: FUNC <void cv..HoughLinesPointSet [ARG Mat _point=, ARG Mat _lines=, ARG int lines_max=, ARG int threshold=, ARG double min_rho=, ARG double max_rho=, ARG double rho_step=, ARG double min_theta=, ARG double max_theta=, ARG double theta_step=]>

--- Incoming ---
[   'cv.HoughCircles',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'circles', '', ['/O']],
        ['int', 'method', '', []],
        ['double', 'dp', '', []],
        ['double', 'minDist', '', []],
        ['double', 'param1', '100', []],
        ['double', 'param2', '100', []],
        ['int', 'minRadius', '0', []],
        ['int', 'maxRadius', '0', []]],
    'void']
ok: FUNC <void cv..HoughCircles [ARG Mat image=, ARG Mat circles=, ARG int method=, ARG double dp=, ARG double minDist=, ARG double param1=100, ARG double param2=100, ARG int minRadius=0, ARG int maxRadius=0]>

--- Incoming ---
[   'cv.erode',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'kernel', '', []],
        ['Point', 'anchor', 'Point(-1,-1)', []],
        ['int', 'iterations', '1', []],
        ['int', 'borderType', 'BORDER_CONSTANT', []],
        [   'Scalar',
            'borderValue',
            'morphologyDefaultBorderValue()',
            ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..erode [ARG Mat src=, ARG Mat dst=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG int borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>

--- Incoming ---
[   'cv.dilate',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'kernel', '', []],
        ['Point', 'anchor', 'Point(-1,-1)', []],
        ['int', 'iterations', '1', []],
        ['int', 'borderType', 'BORDER_CONSTANT', []],
        [   'Scalar',
            'borderValue',
            'morphologyDefaultBorderValue()',
            ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..dilate [ARG Mat src=, ARG Mat dst=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG int borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>

--- Incoming ---
[   'cv.morphologyEx',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'op', '', []],
        ['Mat', 'kernel', '', []],
        ['Point', 'anchor', 'Point(-1,-1)', []],
        ['int', 'iterations', '1', []],
        ['int', 'borderType', 'BORDER_CONSTANT', []],
        [   'Scalar',
            'borderValue',
            'morphologyDefaultBorderValue()',
            ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..morphologyEx [ARG Mat src=, ARG Mat dst=, ARG int op=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG int borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>

--- Incoming ---
[   'cv.resize',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Size', 'dsize', '', []],
        ['double', 'fx', '0', []],
        ['double', 'fy', '0', []],
        ['int', 'interpolation', 'INTER_LINEAR', []]],
    'void']
ok: FUNC <void cv..resize [ARG Mat src=, ARG Mat dst=, ARG Size dsize=, ARG double fx=0, ARG double fy=0, ARG int interpolation=INTER_LINEAR]>

--- Incoming ---
[   'cv.warpAffine',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'M', '', []],
        ['Size', 'dsize', '', []],
        ['int', 'flags', 'INTER_LINEAR', []],
        ['int', 'borderMode', 'BORDER_CONSTANT', []],
        ['Scalar', 'borderValue', 'Scalar()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..warpAffine [ARG Mat src=, ARG Mat dst=, ARG Mat M=, ARG Size dsize=, ARG int flags=INTER_LINEAR, ARG int borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>

--- Incoming ---
[   'cv.warpPerspective',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'M', '', []],
        ['Size', 'dsize', '', []],
        ['int', 'flags', 'INTER_LINEAR', []],
        ['int', 'borderMode', 'BORDER_CONSTANT', []],
        ['Scalar', 'borderValue', 'Scalar()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..warpPerspective [ARG Mat src=, ARG Mat dst=, ARG Mat M=, ARG Size dsize=, ARG int flags=INTER_LINEAR, ARG int borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>

--- Incoming ---
[   'cv.remap',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'map1', '', []],
        ['Mat', 'map2', '', []],
        ['int', 'interpolation', '', []],
        ['int', 'borderMode', 'BORDER_CONSTANT', []],
        ['Scalar', 'borderValue', 'Scalar()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv..remap [ARG Mat src=, ARG Mat dst=, ARG Mat map1=, ARG Mat map2=, ARG int interpolation=, ARG int borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>

--- Incoming ---
[   'cv.convertMaps',
    'void',
    [],
    [   ['Mat', 'map1', '', []],
        ['Mat', 'map2', '', []],
        ['Mat', 'dstmap1', '', ['/O']],
        ['Mat', 'dstmap2', '', ['/O']],
        ['int', 'dstmap1type', '', []],
        ['bool', 'nninterpolation', 'false', []]],
    'void']
ok: FUNC <void cv..convertMaps [ARG Mat map1=, ARG Mat map2=, ARG Mat dstmap1=, ARG Mat dstmap2=, ARG int dstmap1type=, ARG bool nninterpolation=false]>

--- Incoming ---
[   'cv.getRotationMatrix2D',
    'Mat',
    [],
    [   ['Point2f', 'center', '', []],
        ['double', 'angle', '', []],
        ['double', 'scale', '', []]],
    'Mat']
ok: FUNC <Mat cv..getRotationMatrix2D [ARG Point2f center=, ARG double angle=, ARG double scale=]>

--- Incoming ---
[   'cv.invertAffineTransform',
    'void',
    [],
    [['Mat', 'M', '', []], ['Mat', 'iM', '', ['/O']]],
    'void']
ok: FUNC <void cv..invertAffineTransform [ARG Mat M=, ARG Mat iM=]>

--- Incoming ---
[   'cv.getPerspectiveTransform',
    'Mat',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', []]],
    'Mat']
ok: FUNC <Mat cv..getPerspectiveTransform [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.getAffineTransform',
    'Mat',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', []]],
    'Mat']
ok: FUNC <Mat cv..getAffineTransform [ARG vector_Point2f src=, ARG vector_Point2f dst=]>

--- Incoming ---
[   'cv.getRectSubPix',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Size', 'patchSize', '', []],
        ['Point2f', 'center', '', []],
        ['Mat', 'patch', '', ['/O']],
        ['int', 'patchType', '-1', []]],
    'void']
ok: FUNC <void cv..getRectSubPix [ARG Mat image=, ARG Size patchSize=, ARG Point2f center=, ARG Mat patch=, ARG int patchType=-1]>

--- Incoming ---
[   'cv.logPolar',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Point2f', 'center', '', []],
        ['double', 'M', '', []],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv..logPolar [ARG Mat src=, ARG Mat dst=, ARG Point2f center=, ARG double M=, ARG int flags=]>

--- Incoming ---
[   'cv.linearPolar',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Point2f', 'center', '', []],
        ['double', 'maxRadius', '', []],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv..linearPolar [ARG Mat src=, ARG Mat dst=, ARG Point2f center=, ARG double maxRadius=, ARG int flags=]>

--- Incoming ---
[   'cv.warpPolar',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Size', 'dsize', '', []],
        ['Point2f', 'center', '', []],
        ['double', 'maxRadius', '', []],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv..warpPolar [ARG Mat src=, ARG Mat dst=, ARG Size dsize=, ARG Point2f center=, ARG double maxRadius=, ARG int flags=]>

--- Incoming ---
[   'cv.integral',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'sum', '', ['/O']],
        ['int', 'sdepth', '-1', []]],
    'void']
ok: FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG int sdepth=-1]>

--- Incoming ---
[   'cv.integral',
    'void',
    ['=integral2'],
    [   ['Mat', 'src', '', []],
        ['Mat', 'sum', '', ['/O']],
        ['Mat', 'sqsum', '', ['/O']],
        ['int', 'sdepth', '-1', []],
        ['int', 'sqdepth', '-1', []]],
    'void']
ok: FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG Mat sqsum=, ARG int sdepth=-1, ARG int sqdepth=-1]>

--- Incoming ---
[   'cv.integral',
    'void',
    ['=integral3'],
    [   ['Mat', 'src', '', []],
        ['Mat', 'sum', '', ['/O']],
        ['Mat', 'sqsum', '', ['/O']],
        ['Mat', 'tilted', '', ['/O']],
        ['int', 'sdepth', '-1', []],
        ['int', 'sqdepth', '-1', []]],
    'void']
ok: FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG Mat sqsum=, ARG Mat tilted=, ARG int sdepth=-1, ARG int sqdepth=-1]>

--- Incoming ---
[   'cv.accumulate',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/IO']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..accumulate [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.accumulateSquare',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/IO']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..accumulateSquare [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.accumulateProduct',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/IO']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..accumulateProduct [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.accumulateWeighted',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/IO']],
        ['double', 'alpha', '', []],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..accumulateWeighted [ARG Mat src=, ARG Mat dst=, ARG double alpha=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.phaseCorrelate',
    'Point2d',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'window', 'Mat()', []],
        ['double*', 'response', '0', ['/O']]],
    'Point2d']
ok: FUNC <Point2d cv..phaseCorrelate [ARG Mat src1=, ARG Mat src2=, ARG Mat window=Mat(), ARG double * response=0]>

--- Incoming ---
[   'cv.createHanningWindow',
    'void',
    [],
    [   ['Mat', 'dst', '', ['/O']],
        ['Size', 'winSize', '', []],
        ['int', 'type', '', []]],
    'void']
ok: FUNC <void cv..createHanningWindow [ARG Mat dst=, ARG Size winSize=, ARG int type=]>

--- Incoming ---
[   'cv.threshold',
    'double',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'thresh', '', []],
        ['double', 'maxval', '', []],
        ['int', 'type', '', []]],
    'double']
ok: FUNC <double cv..threshold [ARG Mat src=, ARG Mat dst=, ARG double thresh=, ARG double maxval=, ARG int type=]>

--- Incoming ---
[   'cv.adaptiveThreshold',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'maxValue', '', []],
        ['int', 'adaptiveMethod', '', []],
        ['int', 'thresholdType', '', []],
        ['int', 'blockSize', '', []],
        ['double', 'C', '', []]],
    'void']
ok: FUNC <void cv..adaptiveThreshold [ARG Mat src=, ARG Mat dst=, ARG double maxValue=, ARG int adaptiveMethod=, ARG int thresholdType=, ARG int blockSize=, ARG double C=]>

--- Incoming ---
[   'cv.pyrDown',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Size', 'dstsize', 'Size()', ['/C', '/Ref']],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..pyrDown [ARG Mat src=, ARG Mat dst=, ARG Size dstsize=Size(), ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.pyrUp',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Size', 'dstsize', 'Size()', ['/C', '/Ref']],
        ['int', 'borderType', 'BORDER_DEFAULT', []]],
    'void']
ok: FUNC <void cv..pyrUp [ARG Mat src=, ARG Mat dst=, ARG Size dstsize=Size(), ARG int borderType=BORDER_DEFAULT]>

--- Incoming ---
[   'cv.undistort',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'newCameraMatrix', 'Mat()', []]],
    'void']
ok: FUNC <void cv..undistort [ARG Mat src=, ARG Mat dst=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat newCameraMatrix=Mat()]>

--- Incoming ---
[   'cv.initUndistortRectifyMap',
    'void',
    [],
    [   ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'R', '', []],
        ['Mat', 'newCameraMatrix', '', []],
        ['Size', 'size', '', []],
        ['int', 'm1type', '', []],
        ['Mat', 'map1', '', ['/O']],
        ['Mat', 'map2', '', ['/O']]],
    'void']
ok: FUNC <void cv..initUndistortRectifyMap [ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat R=, ARG Mat newCameraMatrix=, ARG Size size=, ARG int m1type=, ARG Mat map1=, ARG Mat map2=]>

--- Incoming ---
[   'cv.initWideAngleProjMap',
    'float',
    [],
    [   ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Size', 'imageSize', '', []],
        ['int', 'destImageWidth', '', []],
        ['int', 'm1type', '', []],
        ['Mat', 'map1', '', ['/O']],
        ['Mat', 'map2', '', ['/O']],
        ['int', 'projType', 'PROJ_SPHERICAL_EQRECT', []],
        ['double', 'alpha', '0', []]],
    'float']
ok: FUNC <float cv..initWideAngleProjMap [ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Size imageSize=, ARG int destImageWidth=, ARG int m1type=, ARG Mat map1=, ARG Mat map2=, ARG int projType=PROJ_SPHERICAL_EQRECT, ARG double alpha=0]>

--- Incoming ---
[   'cv.getDefaultNewCameraMatrix',
    'Mat',
    [],
    [   ['Mat', 'cameraMatrix', '', []],
        ['Size', 'imgsize', 'Size()', []],
        ['bool', 'centerPrincipalPoint', 'false', []]],
    'Mat']
ok: FUNC <Mat cv..getDefaultNewCameraMatrix [ARG Mat cameraMatrix=, ARG Size imgsize=Size(), ARG bool centerPrincipalPoint=false]>

--- Incoming ---
[   'cv.undistortPoints',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'R', 'Mat()', []],
        ['Mat', 'P', 'Mat()', []]],
    'void']
ok: FUNC <void cv..undistortPoints [ARG Mat src=, ARG Mat dst=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat R=Mat(), ARG Mat P=Mat()]>

--- Incoming ---
[   'cv.undistortPoints',
    'void',
    ['=undistortPointsIter'],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'R', '', []],
        ['Mat', 'P', '', []],
        ['TermCriteria', 'criteria', '', []]],
    'void']
ok: FUNC <void cv..undistortPoints [ARG Mat src=, ARG Mat dst=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat R=, ARG Mat P=, ARG TermCriteria criteria=]>

--- Incoming ---
[   'cv.calcHist',
    'void',
    [],
    [   ['vector_Mat', 'images', '', []],
        ['vector_int', 'channels', '', ['/C', '/Ref']],
        ['Mat', 'mask', '', []],
        ['Mat', 'hist', '', ['/O']],
        ['vector_int', 'histSize', '', ['/C', '/Ref']],
        ['vector_float', 'ranges', '', ['/C', '/Ref']],
        ['bool', 'accumulate', 'false', []]],
    'void']
ok: FUNC <void cv..calcHist [ARG vector_Mat images=, ARG vector_int channels=, ARG Mat mask=, ARG Mat hist=, ARG vector_int histSize=, ARG vector_float ranges=, ARG bool accumulate=false]>

--- Incoming ---
[   'cv.calcBackProject',
    'void',
    [],
    [   ['vector_Mat', 'images', '', []],
        ['vector_int', 'channels', '', ['/C', '/Ref']],
        ['Mat', 'hist', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['vector_float', 'ranges', '', ['/C', '/Ref']],
        ['double', 'scale', '', []]],
    'void']
ok: FUNC <void cv..calcBackProject [ARG vector_Mat images=, ARG vector_int channels=, ARG Mat hist=, ARG Mat dst=, ARG vector_float ranges=, ARG double scale=]>

--- Incoming ---
[   'cv.compareHist',
    'double',
    [],
    [['Mat', 'H1', '', []], ['Mat', 'H2', '', []], ['int', 'method', '', []]],
    'double']
ok: FUNC <double cv..compareHist [ARG Mat H1=, ARG Mat H2=, ARG int method=]>

--- Incoming ---
[   'cv.equalizeHist',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..equalizeHist [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.wrapperEMD',
    'float',
    ['=EMD'],
    [   ['Mat', 'signature1', '', []],
        ['Mat', 'signature2', '', []],
        ['int', 'distType', '', []],
        ['Mat', 'cost', 'Mat()', []],
        ['Ptr_float', 'lowerBound', 'Ptr<float>()', ['/IO']],
        ['Mat', 'flow', 'Mat()', ['/O']]],
    'float']
ok: FUNC <float cv..wrapperEMD [ARG Mat signature1=, ARG Mat signature2=, ARG int distType=, ARG Mat cost=Mat(), ARG Ptr_float lowerBound=Ptr<float>(), ARG Mat flow=Mat()]>

--- Incoming ---
[   'cv.watershed',
    'void',
    [],
    [['Mat', 'image', '', []], ['Mat', 'markers', '', ['/IO']]],
    'void']
ok: FUNC <void cv..watershed [ARG Mat image=, ARG Mat markers=]>

--- Incoming ---
[   'cv.pyrMeanShiftFiltering',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'sp', '', []],
        ['double', 'sr', '', []],
        ['int', 'maxLevel', '1', []],
        [   'TermCriteria',
            'termcrit',
            'TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS,5,1)',
            []]],
    'void']
ok: FUNC <void cv..pyrMeanShiftFiltering [ARG Mat src=, ARG Mat dst=, ARG double sp=, ARG double sr=, ARG int maxLevel=1, ARG TermCriteria termcrit=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS,5,1)]>

--- Incoming ---
[   'cv.grabCut',
    'void',
    [],
    [   ['Mat', 'img', '', []],
        ['Mat', 'mask', '', ['/IO']],
        ['Rect', 'rect', '', []],
        ['Mat', 'bgdModel', '', ['/IO']],
        ['Mat', 'fgdModel', '', ['/IO']],
        ['int', 'iterCount', '', []],
        ['int', 'mode', 'GC_EVAL', []]],
    'void']
ok: FUNC <void cv..grabCut [ARG Mat img=, ARG Mat mask=, ARG Rect rect=, ARG Mat bgdModel=, ARG Mat fgdModel=, ARG int iterCount=, ARG int mode=GC_EVAL]>

--- Incoming ---
[   'cv.distanceTransform',
    'void',
    ['=distanceTransformWithLabels'],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'labels', '', ['/O']],
        ['int', 'distanceType', '', []],
        ['int', 'maskSize', '', []],
        ['int', 'labelType', 'DIST_LABEL_CCOMP', []]],
    'void']
ok: FUNC <void cv..distanceTransform [ARG Mat src=, ARG Mat dst=, ARG Mat labels=, ARG int distanceType=, ARG int maskSize=, ARG int labelType=DIST_LABEL_CCOMP]>

--- Incoming ---
[   'cv.distanceTransform',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'distanceType', '', []],
        ['int', 'maskSize', '', []],
        ['int', 'dstType', 'CV_32F', []]],
    'void']
ok: FUNC <void cv..distanceTransform [ARG Mat src=, ARG Mat dst=, ARG int distanceType=, ARG int maskSize=, ARG int dstType=CV_32F]>

--- Incoming ---
[   'cv.floodFill',
    'int',
    [],
    [   ['Mat', 'image', '', ['/IO']],
        ['Mat', 'mask', '', ['/IO']],
        ['Point', 'seedPoint', '', []],
        ['Scalar', 'newVal', '', []],
        ['Rect*', 'rect', '0', ['/O']],
        ['Scalar', 'loDiff', 'Scalar()', []],
        ['Scalar', 'upDiff', 'Scalar()', []],
        ['int', 'flags', '4', []]],
    'int']
ok: FUNC <int cv..floodFill [ARG Mat image=, ARG Mat mask=, ARG Point seedPoint=, ARG Scalar newVal=, ARG Rect * rect=0, ARG Scalar loDiff=Scalar(), ARG Scalar upDiff=Scalar(), ARG int flags=4]>

--- Incoming ---
[   'cv.cvtColor',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'code', '', []],
        ['int', 'dstCn', '0', []]],
    'void']
ok: FUNC <void cv..cvtColor [ARG Mat src=, ARG Mat dst=, ARG int code=, ARG int dstCn=0]>

--- Incoming ---
[   'cv.cvtColorTwoPlane',
    'void',
    [],
    [   ['Mat', 'src1', '', []],
        ['Mat', 'src2', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'code', '', []]],
    'void']
ok: FUNC <void cv..cvtColorTwoPlane [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int code=]>

--- Incoming ---
[   'cv.demosaicing',
    'void',
    [],
    [   ['Mat', '_src', '', []],
        ['Mat', '_dst', '', ['/O']],
        ['int', 'code', '', []],
        ['int', 'dcn', '0', []]],
    'void']
ok: FUNC <void cv..demosaicing [ARG Mat _src=, ARG Mat _dst=, ARG int code=, ARG int dcn=0]>

--- Incoming ---
[   'cv.moments',
    'Moments',
    [],
    [['Mat', 'array', '', []], ['bool', 'binaryImage', 'false', []]],
    'Moments']
ok: FUNC <Moments cv..moments [ARG Mat array=, ARG bool binaryImage=false]>

--- Incoming ---
[   'cv.HuMoments',
    'void',
    [],
    [['Moments', 'm', '', ['/C', '/Ref']], ['Mat', 'hu', '', ['/O']]],
    'void']
ok: FUNC <void cv..HuMoments [ARG Moments m=, ARG Mat hu=]>

--- Incoming ---
['const cv.TM_SQDIFF', '0', [], [], None]
ok: CONST TM_SQDIFF=0

--- Incoming ---
['const cv.TM_SQDIFF_NORMED', '1', [], [], None]
ok: CONST TM_SQDIFF_NORMED=1

--- Incoming ---
['const cv.TM_CCORR', '2', [], [], None]
ok: CONST TM_CCORR=2

--- Incoming ---
['const cv.TM_CCORR_NORMED', '3', [], [], None]
ok: CONST TM_CCORR_NORMED=3

--- Incoming ---
['const cv.TM_CCOEFF', '4', [], [], None]
ok: CONST TM_CCOEFF=4

--- Incoming ---
['const cv.TM_CCOEFF_NORMED', '5', [], [], None]
ok: CONST TM_CCOEFF_NORMED=5

--- Incoming ---
[   'cv.matchTemplate',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'templ', '', []],
        ['Mat', 'result', '', ['/O']],
        ['int', 'method', '', []],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..matchTemplate [ARG Mat image=, ARG Mat templ=, ARG Mat result=, ARG int method=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.connectedComponents',
    'int',
    ['=connectedComponentsWithAlgorithm'],
    [   ['Mat', 'image', '', []],
        ['Mat', 'labels', '', ['/O']],
        ['int', 'connectivity', '', []],
        ['int', 'ltype', '', []],
        ['int', 'ccltype', '', []]],
    'int']
ok: FUNC <int cv..connectedComponents [ARG Mat image=, ARG Mat labels=, ARG int connectivity=, ARG int ltype=, ARG int ccltype=]>

--- Incoming ---
[   'cv.connectedComponents',
    'int',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'labels', '', ['/O']],
        ['int', 'connectivity', '8', []],
        ['int', 'ltype', 'CV_32S', []]],
    'int']
ok: FUNC <int cv..connectedComponents [ARG Mat image=, ARG Mat labels=, ARG int connectivity=8, ARG int ltype=CV_32S]>

--- Incoming ---
[   'cv.connectedComponentsWithStats',
    'int',
    ['=connectedComponentsWithStatsWithAlgorithm'],
    [   ['Mat', 'image', '', []],
        ['Mat', 'labels', '', ['/O']],
        ['Mat', 'stats', '', ['/O']],
        ['Mat', 'centroids', '', ['/O']],
        ['int', 'connectivity', '', []],
        ['int', 'ltype', '', []],
        ['int', 'ccltype', '', []]],
    'int']
ok: FUNC <int cv..connectedComponentsWithStats [ARG Mat image=, ARG Mat labels=, ARG Mat stats=, ARG Mat centroids=, ARG int connectivity=, ARG int ltype=, ARG int ccltype=]>

--- Incoming ---
[   'cv.connectedComponentsWithStats',
    'int',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'labels', '', ['/O']],
        ['Mat', 'stats', '', ['/O']],
        ['Mat', 'centroids', '', ['/O']],
        ['int', 'connectivity', '8', []],
        ['int', 'ltype', 'CV_32S', []]],
    'int']
ok: FUNC <int cv..connectedComponentsWithStats [ARG Mat image=, ARG Mat labels=, ARG Mat stats=, ARG Mat centroids=, ARG int connectivity=8, ARG int ltype=CV_32S]>

--- Incoming ---
[   'cv.findContours',
    'void',
    [],
    [   ['Mat', 'image', '', ['/IO']],
        ['vector_Mat', 'contours', '', ['/O']],
        ['Mat', 'hierarchy', '', ['/O']],
        ['int', 'mode', '', []],
        ['int', 'method', '', []],
        ['Point', 'offset', 'Point()', []]],
    'void']
ok: FUNC <void cv..findContours [ARG Mat image=, ARG vector_vector_Point contours=, ARG Mat hierarchy=, ARG int mode=, ARG int method=, ARG Point offset=Point()]>

--- Incoming ---
[   'cv.approxPolyDP',
    'void',
    [],
    [   ['Mat', 'curve', '', []],
        ['Mat', 'approxCurve', '', ['/O']],
        ['double', 'epsilon', '', []],
        ['bool', 'closed', '', []]],
    'void']
ok: FUNC <void cv..approxPolyDP [ARG vector_Point2f curve=, ARG vector_Point2f approxCurve=, ARG double epsilon=, ARG bool closed=]>

--- Incoming ---
[   'cv.arcLength',
    'double',
    [],
    [['Mat', 'curve', '', []], ['bool', 'closed', '', []]],
    'double']
ok: FUNC <double cv..arcLength [ARG vector_Point2f curve=, ARG bool closed=]>

--- Incoming ---
['cv.boundingRect', 'Rect', [], [['Mat', 'points', '', []]], 'Rect']
ok: FUNC <Rect cv..boundingRect [ARG vector_Point points=]>

--- Incoming ---
[   'cv.contourArea',
    'double',
    [],
    [['Mat', 'contour', '', []], ['bool', 'oriented', 'false', []]],
    'double']
ok: FUNC <double cv..contourArea [ARG Mat contour=, ARG bool oriented=false]>

--- Incoming ---
[   'cv.minAreaRect',
    'RotatedRect',
    [],
    [['Mat', 'points', '', []]],
    'RotatedRect']
ok: FUNC <RotatedRect cv..minAreaRect [ARG vector_Point2f points=]>

--- Incoming ---
[   'cv.boxPoints',
    'void',
    [],
    [['RotatedRect', 'box', '', []], ['Mat', 'points', '', ['/O']]],
    'void']
ok: FUNC <void cv..boxPoints [ARG RotatedRect box=, ARG Mat points=]>

--- Incoming ---
[   'cv.minEnclosingCircle',
    'void',
    [],
    [   ['Mat', 'points', '', []],
        ['Point2f', 'center', '', ['/O', '/Ref']],
        ['float', 'radius', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv..minEnclosingCircle [ARG vector_Point2f points=, ARG Point2f center=, ARG float radius=]>

--- Incoming ---
[   'cv.minEnclosingTriangle',
    'double',
    [],
    [['Mat', 'points', '', []], ['Mat', 'triangle', '', ['/O', '/O']]],
    'double']
ok: FUNC <double cv..minEnclosingTriangle [ARG Mat points=, ARG Mat triangle=]>

--- Incoming ---
[   'cv.matchShapes',
    'double',
    [],
    [   ['Mat', 'contour1', '', []],
        ['Mat', 'contour2', '', []],
        ['int', 'method', '', []],
        ['double', 'parameter', '', []]],
    'double']
ok: FUNC <double cv..matchShapes [ARG Mat contour1=, ARG Mat contour2=, ARG int method=, ARG double parameter=]>

--- Incoming ---
[   'cv.convexHull',
    'void',
    [],
    [   ['Mat', 'points', '', []],
        ['Mat', 'hull', '', ['/O']],
        ['bool', 'clockwise', 'false', []],
        ['bool', 'returnPoints', 'true', []]],
    'void']
ok: FUNC <void cv..convexHull [ARG vector_Point points=, ARG vector_int hull=, ARG bool clockwise=false, ARG  returnPoints=true]>

--- Incoming ---
[   'cv.convexityDefects',
    'void',
    [],
    [   ['Mat', 'contour', '', []],
        ['Mat', 'convexhull', '', []],
        ['Mat', 'convexityDefects', '', ['/O']]],
    'void']
ok: FUNC <void cv..convexityDefects [ARG vector_Point contour=, ARG vector_int convexhull=, ARG vector_Vec4i convexityDefects=]>

--- Incoming ---
['cv.isContourConvex', 'bool', [], [['Mat', 'contour', '', []]], 'bool']
ok: FUNC <bool cv..isContourConvex [ARG vector_Point contour=]>

--- Incoming ---
[   'cv.intersectConvexConvex',
    'float',
    [],
    [   ['Mat', '_p1', '', []],
        ['Mat', '_p2', '', []],
        ['Mat', '_p12', '', ['/O']],
        ['bool', 'handleNested', 'true', []]],
    'float']
ok: FUNC <float cv..intersectConvexConvex [ARG Mat _p1=, ARG Mat _p2=, ARG Mat _p12=, ARG bool handleNested=true]>

--- Incoming ---
['cv.fitEllipse', 'RotatedRect', [], [['Mat', 'points', '', []]], 'RotatedRect']
ok: FUNC <RotatedRect cv..fitEllipse [ARG vector_Point2f points=]>

--- Incoming ---
[   'cv.fitEllipseAMS',
    'RotatedRect',
    [],
    [['Mat', 'points', '', []]],
    'RotatedRect']
ok: FUNC <RotatedRect cv..fitEllipseAMS [ARG Mat points=]>

--- Incoming ---
[   'cv.fitEllipseDirect',
    'RotatedRect',
    [],
    [['Mat', 'points', '', []]],
    'RotatedRect']
ok: FUNC <RotatedRect cv..fitEllipseDirect [ARG Mat points=]>

--- Incoming ---
[   'cv.fitLine',
    'void',
    [],
    [   ['Mat', 'points', '', []],
        ['Mat', 'line', '', ['/O']],
        ['int', 'distType', '', []],
        ['double', 'param', '', []],
        ['double', 'reps', '', []],
        ['double', 'aeps', '', []]],
    'void']
ok: FUNC <void cv..fitLine [ARG Mat points=, ARG Mat line=, ARG int distType=, ARG double param=, ARG double reps=, ARG double aeps=]>

--- Incoming ---
[   'cv.pointPolygonTest',
    'double',
    [],
    [   ['Mat', 'contour', '', []],
        ['Point2f', 'pt', '', []],
        ['bool', 'measureDist', '', []]],
    'double']
ok: FUNC <double cv..pointPolygonTest [ARG vector_Point2f contour=, ARG Point2f pt=, ARG bool measureDist=]>

--- Incoming ---
[   'cv.rotatedRectangleIntersection',
    'int',
    [],
    [   ['RotatedRect', 'rect1', '', ['/C', '/Ref']],
        ['RotatedRect', 'rect2', '', ['/C', '/Ref']],
        ['Mat', 'intersectingRegion', '', ['/O']]],
    'int']
ok: FUNC <int cv..rotatedRectangleIntersection [ARG RotatedRect rect1=, ARG RotatedRect rect2=, ARG Mat intersectingRegion=]>

--- Incoming ---
[   'cv.createCLAHE',
    'Ptr_CLAHE',
    [],
    [   ['double', 'clipLimit', '40.0', []],
        ['Size', 'tileGridSize', 'Size(8, 8)', []]],
    'Ptr<CLAHE>']
ok: FUNC <Ptr_CLAHE cv..createCLAHE [ARG double clipLimit=40.0, ARG Size tileGridSize=Size(8, 8)]>

--- Incoming ---
['const cv.COLORMAP_AUTUMN', '0', [], [], None]
ok: CONST COLORMAP_AUTUMN=0

--- Incoming ---
['const cv.COLORMAP_BONE', '1', [], [], None]
ok: CONST COLORMAP_BONE=1

--- Incoming ---
['const cv.COLORMAP_JET', '2', [], [], None]
ok: CONST COLORMAP_JET=2

--- Incoming ---
['const cv.COLORMAP_WINTER', '3', [], [], None]
ok: CONST COLORMAP_WINTER=3

--- Incoming ---
['const cv.COLORMAP_RAINBOW', '4', [], [], None]
ok: CONST COLORMAP_RAINBOW=4

--- Incoming ---
['const cv.COLORMAP_OCEAN', '5', [], [], None]
ok: CONST COLORMAP_OCEAN=5

--- Incoming ---
['const cv.COLORMAP_SUMMER', '6', [], [], None]
ok: CONST COLORMAP_SUMMER=6

--- Incoming ---
['const cv.COLORMAP_SPRING', '7', [], [], None]
ok: CONST COLORMAP_SPRING=7

--- Incoming ---
['const cv.COLORMAP_COOL', '8', [], [], None]
ok: CONST COLORMAP_COOL=8

--- Incoming ---
['const cv.COLORMAP_HSV', '9', [], [], None]
ok: CONST COLORMAP_HSV=9

--- Incoming ---
['const cv.COLORMAP_PINK', '10', [], [], None]
ok: CONST COLORMAP_PINK=10

--- Incoming ---
['const cv.COLORMAP_HOT', '11', [], [], None]
ok: CONST COLORMAP_HOT=11

--- Incoming ---
['const cv.COLORMAP_PARULA', '12', [], [], None]
ok: CONST COLORMAP_PARULA=12

--- Incoming ---
[   'cv.applyColorMap',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'colormap', '', []]],
    'void']
ok: FUNC <void cv..applyColorMap [ARG Mat src=, ARG Mat dst=, ARG int colormap=]>

--- Incoming ---
[   'cv.applyColorMap',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'userColor', '', []]],
    'void']
ok: FUNC <void cv..applyColorMap [ARG Mat src=, ARG Mat dst=, ARG Mat userColor=]>

--- Incoming ---
[   'cv.line',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['Point', 'pt1', '', []],
        ['Point', 'pt2', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []],
        ['int', 'shift', '0', []]],
    'void']
ok: FUNC <void cv..line [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   'cv.arrowedLine',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['Point', 'pt1', '', []],
        ['Point', 'pt2', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'line_type', '8', []],
        ['int', 'shift', '0', []],
        ['double', 'tipLength', '0.1', []]],
    'void']
ok: FUNC <void cv..arrowedLine [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG int line_type=8, ARG int shift=0, ARG double tipLength=0.1]>

--- Incoming ---
[   'cv.rectangle',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['Point', 'pt1', '', []],
        ['Point', 'pt2', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []],
        ['int', 'shift', '0', []]],
    'void']
ok: FUNC <void cv..rectangle [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   'cv.rectangle',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['Rect', 'rec', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []],
        ['int', 'shift', '0', []]],
    'void']
ok: FUNC <void cv..rectangle [ARG Mat img=, ARG Rect rec=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   'cv.circle',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['Point', 'center', '', []],
        ['int', 'radius', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []],
        ['int', 'shift', '0', []]],
    'void']
ok: FUNC <void cv..circle [ARG Mat img=, ARG Point center=, ARG int radius=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   'cv.ellipse',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['Point', 'center', '', []],
        ['Size', 'axes', '', []],
        ['double', 'angle', '', []],
        ['double', 'startAngle', '', []],
        ['double', 'endAngle', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []],
        ['int', 'shift', '0', []]],
    'void']
ok: FUNC <void cv..ellipse [ARG Mat img=, ARG Point center=, ARG Size axes=, ARG double angle=, ARG double startAngle=, ARG double endAngle=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   'cv.ellipse',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['RotatedRect', 'box', '', ['/C', '/Ref']],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []]],
    'void']
ok: FUNC <void cv..ellipse [ARG Mat img=, ARG RotatedRect box=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8]>

--- Incoming ---
['const cv.MARKER_CROSS', '0', [], [], None]
ok: CONST MARKER_CROSS=0

--- Incoming ---
['const cv.MARKER_TILTED_CROSS', '1', [], [], None]
ok: CONST MARKER_TILTED_CROSS=1

--- Incoming ---
['const cv.MARKER_STAR', '2', [], [], None]
ok: CONST MARKER_STAR=2

--- Incoming ---
['const cv.MARKER_DIAMOND', '3', [], [], None]
ok: CONST MARKER_DIAMOND=3

--- Incoming ---
['const cv.MARKER_SQUARE', '4', [], [], None]
ok: CONST MARKER_SQUARE=4

--- Incoming ---
['const cv.MARKER_TRIANGLE_UP', '5', [], [], None]
ok: CONST MARKER_TRIANGLE_UP=5

--- Incoming ---
['const cv.MARKER_TRIANGLE_DOWN', '6', [], [], None]
ok: CONST MARKER_TRIANGLE_DOWN=6

--- Incoming ---
[   'cv.drawMarker',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['Point', 'position', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'markerType', 'MARKER_CROSS', []],
        ['int', 'markerSize', '20', []],
        ['int', 'thickness', '1', []],
        ['int', 'line_type', '8', []]],
    'void']
ok: FUNC <void cv..drawMarker [ARG Mat img=, ARG Point position=, ARG Scalar color=, ARG int markerType=MARKER_CROSS, ARG int markerSize=20, ARG int thickness=1, ARG int line_type=8]>

--- Incoming ---
[   'cv.fillConvexPoly',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['Mat', 'points', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'lineType', 'LINE_8', []],
        ['int', 'shift', '0', []]],
    'void']
ok: FUNC <void cv..fillConvexPoly [ARG Mat img=, ARG vector_Point points=, ARG Scalar color=, ARG int lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   'cv.fillPoly',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['vector_Mat', 'pts', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'lineType', 'LINE_8', []],
        ['int', 'shift', '0', []],
        ['Point', 'offset', 'Point()', []]],
    'void']
ok: FUNC <void cv..fillPoly [ARG Mat img=, ARG vector_vector_Point pts=, ARG Scalar color=, ARG int lineType=LINE_8, ARG int shift=0, ARG Point offset=Point()]>

--- Incoming ---
[   'cv.polylines',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['vector_Mat', 'pts', '', []],
        ['bool', 'isClosed', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []],
        ['int', 'shift', '0', []]],
    'void']
ok: FUNC <void cv..polylines [ARG Mat img=, ARG vector_vector_Point pts=, ARG bool isClosed=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>

--- Incoming ---
[   'cv.drawContours',
    'void',
    [],
    [   ['Mat', 'image', '', ['/IO']],
        ['vector_Mat', 'contours', '', []],
        ['int', 'contourIdx', '', []],
        ['Scalar', 'color', '', ['/C', '/Ref']],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []],
        ['Mat', 'hierarchy', 'Mat()', []],
        ['int', 'maxLevel', 'INT_MAX', []],
        ['Point', 'offset', 'Point()', []]],
    'void']
ok: FUNC <void cv..drawContours [ARG Mat image=, ARG vector_vector_Point contours=, ARG int contourIdx=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG Mat hierarchy=Mat(), ARG int maxLevel=INT_MAX, ARG Point offset=Point()]>

--- Incoming ---
[   'cv.clipLine',
    'bool',
    [],
    [   ['Rect', 'imgRect', '', []],
        ['Point', 'pt1', '', ['/O', '/IO', '/Ref']],
        ['Point', 'pt2', '', ['/O', '/IO', '/Ref']]],
    'bool']
ok: FUNC <bool cv..clipLine [ARG Rect imgRect=, ARG Point pt1=, ARG Point pt2=]>

--- Incoming ---
[   'cv.ellipse2Poly',
    'void',
    [],
    [   ['Point', 'center', '', []],
        ['Size', 'axes', '', []],
        ['int', 'angle', '', []],
        ['int', 'arcStart', '', []],
        ['int', 'arcEnd', '', []],
        ['int', 'delta', '', []],
        ['vector_Point', 'pts', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv..ellipse2Poly [ARG Point center=, ARG Size axes=, ARG int angle=, ARG int arcStart=, ARG int arcEnd=, ARG int delta=, ARG vector_Point pts=]>

--- Incoming ---
[   'cv.putText',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['String', 'text', '', ['/C', '/Ref']],
        ['Point', 'org', '', []],
        ['int', 'fontFace', '', []],
        ['double', 'fontScale', '', []],
        ['Scalar', 'color', '', []],
        ['int', 'thickness', '1', []],
        ['int', 'lineType', 'LINE_8', []],
        ['bool', 'bottomLeftOrigin', 'false', []]],
    'void']
ok: FUNC <void cv..putText [ARG Mat img=, ARG String text=, ARG Point org=, ARG int fontFace=, ARG double fontScale=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG bool bottomLeftOrigin=false]>

--- Incoming ---
[   'cv.getTextSize',
    'Size',
    [],
    [   ['String', 'text', '', ['/C', '/Ref']],
        ['int', 'fontFace', '', []],
        ['double', 'fontScale', '', []],
        ['int', 'thickness', '', []],
        ['int*', 'baseLine', '', ['/O']]],
    'Size']
manual: FUNC <Size cv..getTextSize [ARG String text=, ARG int fontFace=, ARG double fontScale=, ARG int thickness=, ARG int * baseLine=]>

--- Incoming ---
[   'cv.getFontScaleFromHeight',
    'double',
    [],
    [   ['int', 'fontFace', '', ['/C']],
        ['int', 'pixelHeight', '', ['/C']],
        ['int', 'thickness', '1', ['/C']]],
    'double']
ok: FUNC <double cv..getFontScaleFromHeight [ARG int fontFace=, ARG int pixelHeight=, ARG int thickness=1]>


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/imgproc\include\opencv2\imgproc\imgproc.hpp =====
Namespaces: {'', 'cv'}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/imgproc\include\opencv2\imgproc\imgproc.hpp


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/imgproc\include\opencv2\imgproc\detail\distortion_model.hpp =====
Namespaces: {'', 'cv.detail', 'cv'}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/imgproc\include\opencv2\imgproc\detail\distortion_model.hpp


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/imgproc\include\opencv2\imgproc\hal\hal.hpp =====
Namespaces: {'', 'cv.detail', 'cv.hal', 'cv'}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/imgproc\include\opencv2\imgproc\hal\hal.hpp


===== Generating... =====
CLASS ::.Imgproc : 
[CONST IPL_BORDER_CONSTANT=0(manual), CONST IPL_BORDER_REPLICATE=1(manual), CONST IPL_BORDER_REFLECT=2(manual), CONST IPL_BORDER_WRAP=3(manual), CONST IPL_BORDER_REFLECT_101=4(manual), CONST IPL_BORDER_TRANSPARENT=5(manual), CONST CV_INTER_NN=0, CONST CV_INTER_LINEAR=1, CONST CV_INTER_CUBIC=2, CONST CV_INTER_AREA=3, CONST CV_INTER_LANCZOS4=4, CONST CV_MOP_ERODE=0, CONST CV_MOP_DILATE=1, CONST CV_MOP_OPEN=2, CONST CV_MOP_CLOSE=3, CONST CV_MOP_GRADIENT=4, CONST CV_MOP_TOPHAT=5, CONST CV_MOP_BLACKHAT=6, CONST CV_RETR_EXTERNAL=0, CONST CV_RETR_LIST=1, CONST CV_RETR_CCOMP=2, CONST CV_RETR_TREE=3, CONST CV_RETR_FLOODFILL=4, CONST CV_CHAIN_APPROX_NONE=1, CONST CV_CHAIN_APPROX_SIMPLE=2, CONST CV_CHAIN_APPROX_TC89_L1=3, CONST CV_CHAIN_APPROX_TC89_KCOS=4, CONST CV_THRESH_BINARY=0, CONST CV_THRESH_BINARY_INV=1, CONST CV_THRESH_TRUNC=2, CONST CV_THRESH_TOZERO=3, CONST CV_THRESH_TOZERO_INV=4, CONST CV_THRESH_MASK=7, CONST CV_THRESH_OTSU=8, CONST CV_THRESH_TRIANGLE=16]
[CONST LINE_AA=16(manual), CONST LINE_8=8(manual), CONST LINE_4=4(manual), CONST CV_BLUR_NO_SCALE=0, CONST CV_BLUR=1, CONST CV_GAUSSIAN=2, CONST CV_MEDIAN=3, CONST CV_BILATERAL=4, CONST CV_GAUSSIAN_5x5=7, CONST CV_SCHARR=-1, CONST CV_MAX_SOBEL_KSIZE=7, CONST CV_RGBA2mRGBA=125, CONST CV_mRGBA2RGBA=126, CONST CV_WARP_FILL_OUTLIERS=8, CONST CV_WARP_INVERSE_MAP=16, CONST CV_SHAPE_RECT=0, CONST CV_SHAPE_CROSS=1, CONST CV_SHAPE_ELLIPSE=2, CONST CV_SHAPE_CUSTOM=100, CONST CV_CHAIN_CODE=0, CONST CV_LINK_RUNS=5, CONST CV_POLY_APPROX_DP=0, CONST CV_CONTOURS_MATCH_I1=1, CONST CV_CONTOURS_MATCH_I2=2, CONST CV_CONTOURS_MATCH_I3=3, CONST CV_CLOCKWISE=1, CONST CV_COUNTER_CLOCKWISE=2, CONST CV_COMP_CORREL=0, CONST CV_COMP_CHISQR=1, CONST CV_COMP_INTERSECT=2, CONST CV_COMP_BHATTACHARYYA=3, CONST CV_COMP_HELLINGER=CV_COMP_BHATTACHARYYA, CONST CV_COMP_CHISQR_ALT=4, CONST CV_COMP_KL_DIV=5, CONST CV_DIST_MASK_3=3, CONST CV_DIST_MASK_5=5, CONST CV_DIST_MASK_PRECISE=0, CONST CV_DIST_LABEL_CCOMP=0, CONST CV_DIST_LABEL_PIXEL=1, CONST CV_DIST_USER=-1, CONST CV_DIST_L1=1, CONST CV_DIST_L2=2, CONST CV_DIST_C=3, CONST CV_DIST_L12=4, CONST CV_DIST_FAIR=5, CONST CV_DIST_WELSCH=6, CONST CV_DIST_HUBER=7, CONST CV_CANNY_L2_GRADIENT=(1 << 31), CONST CV_HOUGH_STANDARD=0, CONST CV_HOUGH_PROBABILISTIC=1, CONST CV_HOUGH_MULTI_SCALE=2, CONST CV_HOUGH_GRADIENT=3, CONST MORPH_ERODE=0, CONST MORPH_DILATE=1, CONST MORPH_OPEN=2, CONST MORPH_CLOSE=3, CONST MORPH_GRADIENT=4, CONST MORPH_TOPHAT=5, CONST MORPH_BLACKHAT=6, CONST MORPH_HITMISS=7, CONST MORPH_RECT=0, CONST MORPH_CROSS=1, CONST MORPH_ELLIPSE=2, CONST INTER_NEAREST=0, CONST INTER_LINEAR=1, CONST INTER_CUBIC=2, CONST INTER_AREA=3, CONST INTER_LANCZOS4=4, CONST INTER_LINEAR_EXACT=5, CONST INTER_MAX=7, CONST WARP_FILL_OUTLIERS=8, CONST WARP_INVERSE_MAP=16, CONST WARP_POLAR_LINEAR=0, CONST WARP_POLAR_LOG=256, CONST INTER_BITS=5, CONST INTER_BITS2=INTER_BITS * 2, CONST INTER_TAB_SIZE=1 << INTER_BITS, CONST INTER_TAB_SIZE2=INTER_TAB_SIZE * INTER_TAB_SIZE, CONST DIST_USER=-1, CONST DIST_L1=1, CONST DIST_L2=2, CONST DIST_C=3, CONST DIST_L12=4, CONST DIST_FAIR=5, CONST DIST_WELSCH=6, CONST DIST_HUBER=7, CONST DIST_MASK_3=3, CONST DIST_MASK_5=5, CONST DIST_MASK_PRECISE=0, CONST THRESH_BINARY=0, CONST THRESH_BINARY_INV=1, CONST THRESH_TRUNC=2, CONST THRESH_TOZERO=3, CONST THRESH_TOZERO_INV=4, CONST THRESH_MASK=7, CONST THRESH_OTSU=8, CONST THRESH_TRIANGLE=16, CONST ADAPTIVE_THRESH_MEAN_C=0, CONST ADAPTIVE_THRESH_GAUSSIAN_C=1, CONST PROJ_SPHERICAL_ORTHO=0, CONST PROJ_SPHERICAL_EQRECT=1, CONST GC_BGD=0, CONST GC_FGD=1, CONST GC_PR_BGD=2, CONST GC_PR_FGD=3, CONST GC_INIT_WITH_RECT=0, CONST GC_INIT_WITH_MASK=1, CONST GC_EVAL=2, CONST GC_EVAL_FREEZE_MODEL=3, CONST DIST_LABEL_CCOMP=0, CONST DIST_LABEL_PIXEL=1, CONST FLOODFILL_FIXED_RANGE=1 << 16, CONST FLOODFILL_MASK_ONLY=1 << 17, CONST CC_STAT_LEFT=0, CONST CC_STAT_TOP=1, CONST CC_STAT_WIDTH=2, CONST CC_STAT_HEIGHT=3, CONST CC_STAT_AREA=4, CONST CC_STAT_MAX=5, CONST CCL_WU=0, CONST CCL_DEFAULT=-1, CONST CCL_GRANA=1, CONST RETR_EXTERNAL=0, CONST RETR_LIST=1, CONST RETR_CCOMP=2, CONST RETR_TREE=3, CONST RETR_FLOODFILL=4, CONST CHAIN_APPROX_NONE=1, CONST CHAIN_APPROX_SIMPLE=2, CONST CHAIN_APPROX_TC89_L1=3, CONST CHAIN_APPROX_TC89_KCOS=4, CONST CONTOURS_MATCH_I1=1, CONST CONTOURS_MATCH_I2=2, CONST CONTOURS_MATCH_I3=3, CONST HOUGH_STANDARD=0, CONST HOUGH_PROBABILISTIC=1, CONST HOUGH_MULTI_SCALE=2, CONST HOUGH_GRADIENT=3, CONST LSD_REFINE_NONE=0, CONST LSD_REFINE_STD=1, CONST LSD_REFINE_ADV=2, CONST HISTCMP_CORREL=0, CONST HISTCMP_CHISQR=1, CONST HISTCMP_INTERSECT=2, CONST HISTCMP_BHATTACHARYYA=3, CONST HISTCMP_HELLINGER=HISTCMP_BHATTACHARYYA, CONST HISTCMP_CHISQR_ALT=4, CONST HISTCMP_KL_DIV=5, CONST COLOR_BGR2BGRA=0, CONST COLOR_RGB2RGBA=COLOR_BGR2BGRA, CONST COLOR_BGRA2BGR=1, CONST COLOR_RGBA2RGB=COLOR_BGRA2BGR, CONST COLOR_BGR2RGBA=2, CONST COLOR_RGB2BGRA=COLOR_BGR2RGBA, CONST COLOR_RGBA2BGR=3, CONST COLOR_BGRA2RGB=COLOR_RGBA2BGR, CONST COLOR_BGR2RGB=4, CONST COLOR_RGB2BGR=COLOR_BGR2RGB, CONST COLOR_BGRA2RGBA=5, CONST COLOR_RGBA2BGRA=COLOR_BGRA2RGBA, CONST COLOR_BGR2GRAY=6, CONST COLOR_RGB2GRAY=7, CONST COLOR_GRAY2BGR=8, CONST COLOR_GRAY2RGB=COLOR_GRAY2BGR, CONST COLOR_GRAY2BGRA=9, CONST COLOR_GRAY2RGBA=COLOR_GRAY2BGRA, CONST COLOR_BGRA2GRAY=10, CONST COLOR_RGBA2GRAY=11, CONST COLOR_BGR2BGR565=12, CONST COLOR_RGB2BGR565=13, CONST COLOR_BGR5652BGR=14, CONST COLOR_BGR5652RGB=15, CONST COLOR_BGRA2BGR565=16, CONST COLOR_RGBA2BGR565=17, CONST COLOR_BGR5652BGRA=18, CONST COLOR_BGR5652RGBA=19, CONST COLOR_GRAY2BGR565=20, CONST COLOR_BGR5652GRAY=21, CONST COLOR_BGR2BGR555=22, CONST COLOR_RGB2BGR555=23, CONST COLOR_BGR5552BGR=24, CONST COLOR_BGR5552RGB=25, CONST COLOR_BGRA2BGR555=26, CONST COLOR_RGBA2BGR555=27, CONST COLOR_BGR5552BGRA=28, CONST COLOR_BGR5552RGBA=29, CONST COLOR_GRAY2BGR555=30, CONST COLOR_BGR5552GRAY=31, CONST COLOR_BGR2XYZ=32, CONST COLOR_RGB2XYZ=33, CONST COLOR_XYZ2BGR=34, CONST COLOR_XYZ2RGB=35, CONST COLOR_BGR2YCrCb=36, CONST COLOR_RGB2YCrCb=37, CONST COLOR_YCrCb2BGR=38, CONST COLOR_YCrCb2RGB=39, CONST COLOR_BGR2HSV=40, CONST COLOR_RGB2HSV=41, CONST COLOR_BGR2Lab=44, CONST COLOR_RGB2Lab=45, CONST COLOR_BGR2Luv=50, CONST COLOR_RGB2Luv=51, CONST COLOR_BGR2HLS=52, CONST COLOR_RGB2HLS=53, CONST COLOR_HSV2BGR=54, CONST COLOR_HSV2RGB=55, CONST COLOR_Lab2BGR=56, CONST COLOR_Lab2RGB=57, CONST COLOR_Luv2BGR=58, CONST COLOR_Luv2RGB=59, CONST COLOR_HLS2BGR=60, CONST COLOR_HLS2RGB=61, CONST COLOR_BGR2HSV_FULL=66, CONST COLOR_RGB2HSV_FULL=67, CONST COLOR_BGR2HLS_FULL=68, CONST COLOR_RGB2HLS_FULL=69, CONST COLOR_HSV2BGR_FULL=70, CONST COLOR_HSV2RGB_FULL=71, CONST COLOR_HLS2BGR_FULL=72, CONST COLOR_HLS2RGB_FULL=73, CONST COLOR_LBGR2Lab=74, CONST COLOR_LRGB2Lab=75, CONST COLOR_LBGR2Luv=76, CONST COLOR_LRGB2Luv=77, CONST COLOR_Lab2LBGR=78, CONST COLOR_Lab2LRGB=79, CONST COLOR_Luv2LBGR=80, CONST COLOR_Luv2LRGB=81, CONST COLOR_BGR2YUV=82, CONST COLOR_RGB2YUV=83, CONST COLOR_YUV2BGR=84, CONST COLOR_YUV2RGB=85, CONST COLOR_YUV2RGB_NV12=90, CONST COLOR_YUV2BGR_NV12=91, CONST COLOR_YUV2RGB_NV21=92, CONST COLOR_YUV2BGR_NV21=93, CONST COLOR_YUV420sp2RGB=COLOR_YUV2RGB_NV21, CONST COLOR_YUV420sp2BGR=COLOR_YUV2BGR_NV21, CONST COLOR_YUV2RGBA_NV12=94, CONST COLOR_YUV2BGRA_NV12=95, CONST COLOR_YUV2RGBA_NV21=96, CONST COLOR_YUV2BGRA_NV21=97, CONST COLOR_YUV420sp2RGBA=COLOR_YUV2RGBA_NV21, CONST COLOR_YUV420sp2BGRA=COLOR_YUV2BGRA_NV21, CONST COLOR_YUV2RGB_YV12=98, CONST COLOR_YUV2BGR_YV12=99, CONST COLOR_YUV2RGB_IYUV=100, CONST COLOR_YUV2BGR_IYUV=101, CONST COLOR_YUV2RGB_I420=COLOR_YUV2RGB_IYUV, CONST COLOR_YUV2BGR_I420=COLOR_YUV2BGR_IYUV, CONST COLOR_YUV420p2RGB=COLOR_YUV2RGB_YV12, CONST COLOR_YUV420p2BGR=COLOR_YUV2BGR_YV12, CONST COLOR_YUV2RGBA_YV12=102, CONST COLOR_YUV2BGRA_YV12=103, CONST COLOR_YUV2RGBA_IYUV=104, CONST COLOR_YUV2BGRA_IYUV=105, CONST COLOR_YUV2RGBA_I420=COLOR_YUV2RGBA_IYUV, CONST COLOR_YUV2BGRA_I420=COLOR_YUV2BGRA_IYUV, CONST COLOR_YUV420p2RGBA=COLOR_YUV2RGBA_YV12, CONST COLOR_YUV420p2BGRA=COLOR_YUV2BGRA_YV12, CONST COLOR_YUV2GRAY_420=106, CONST COLOR_YUV2GRAY_NV21=COLOR_YUV2GRAY_420, CONST COLOR_YUV2GRAY_NV12=COLOR_YUV2GRAY_420, CONST COLOR_YUV2GRAY_YV12=COLOR_YUV2GRAY_420, CONST COLOR_YUV2GRAY_IYUV=COLOR_YUV2GRAY_420, CONST COLOR_YUV2GRAY_I420=COLOR_YUV2GRAY_420, CONST COLOR_YUV420sp2GRAY=COLOR_YUV2GRAY_420, CONST COLOR_YUV420p2GRAY=COLOR_YUV2GRAY_420, CONST COLOR_YUV2RGB_UYVY=107, CONST COLOR_YUV2BGR_UYVY=108, CONST COLOR_YUV2RGB_Y422=COLOR_YUV2RGB_UYVY, CONST COLOR_YUV2BGR_Y422=COLOR_YUV2BGR_UYVY, CONST COLOR_YUV2RGB_UYNV=COLOR_YUV2RGB_UYVY, CONST COLOR_YUV2BGR_UYNV=COLOR_YUV2BGR_UYVY, CONST COLOR_YUV2RGBA_UYVY=111, CONST COLOR_YUV2BGRA_UYVY=112, CONST COLOR_YUV2RGBA_Y422=COLOR_YUV2RGBA_UYVY, CONST COLOR_YUV2BGRA_Y422=COLOR_YUV2BGRA_UYVY, CONST COLOR_YUV2RGBA_UYNV=COLOR_YUV2RGBA_UYVY, CONST COLOR_YUV2BGRA_UYNV=COLOR_YUV2BGRA_UYVY, CONST COLOR_YUV2RGB_YUY2=115, CONST COLOR_YUV2BGR_YUY2=116, CONST COLOR_YUV2RGB_YVYU=117, CONST COLOR_YUV2BGR_YVYU=118, CONST COLOR_YUV2RGB_YUYV=COLOR_YUV2RGB_YUY2, CONST COLOR_YUV2BGR_YUYV=COLOR_YUV2BGR_YUY2, CONST COLOR_YUV2RGB_YUNV=COLOR_YUV2RGB_YUY2, CONST COLOR_YUV2BGR_YUNV=COLOR_YUV2BGR_YUY2, CONST COLOR_YUV2RGBA_YUY2=119, CONST COLOR_YUV2BGRA_YUY2=120, CONST COLOR_YUV2RGBA_YVYU=121, CONST COLOR_YUV2BGRA_YVYU=122, CONST COLOR_YUV2RGBA_YUYV=COLOR_YUV2RGBA_YUY2, CONST COLOR_YUV2BGRA_YUYV=COLOR_YUV2BGRA_YUY2, CONST COLOR_YUV2RGBA_YUNV=COLOR_YUV2RGBA_YUY2, CONST COLOR_YUV2BGRA_YUNV=COLOR_YUV2BGRA_YUY2, CONST COLOR_YUV2GRAY_UYVY=123, CONST COLOR_YUV2GRAY_YUY2=124, CONST COLOR_YUV2GRAY_Y422=COLOR_YUV2GRAY_UYVY, CONST COLOR_YUV2GRAY_UYNV=COLOR_YUV2GRAY_UYVY, CONST COLOR_YUV2GRAY_YVYU=COLOR_YUV2GRAY_YUY2, CONST COLOR_YUV2GRAY_YUYV=COLOR_YUV2GRAY_YUY2, CONST COLOR_YUV2GRAY_YUNV=COLOR_YUV2GRAY_YUY2, CONST COLOR_RGBA2mRGBA=125, CONST COLOR_mRGBA2RGBA=126, CONST COLOR_RGB2YUV_I420=127, CONST COLOR_BGR2YUV_I420=128, CONST COLOR_RGB2YUV_IYUV=COLOR_RGB2YUV_I420, CONST COLOR_BGR2YUV_IYUV=COLOR_BGR2YUV_I420, CONST COLOR_RGBA2YUV_I420=129, CONST COLOR_BGRA2YUV_I420=130, CONST COLOR_RGBA2YUV_IYUV=COLOR_RGBA2YUV_I420, CONST COLOR_BGRA2YUV_IYUV=COLOR_BGRA2YUV_I420, CONST COLOR_RGB2YUV_YV12=131, CONST COLOR_BGR2YUV_YV12=132, CONST COLOR_RGBA2YUV_YV12=133, CONST COLOR_BGRA2YUV_YV12=134, CONST COLOR_BayerBG2BGR=46, CONST COLOR_BayerGB2BGR=47, CONST COLOR_BayerRG2BGR=48, CONST COLOR_BayerGR2BGR=49, CONST COLOR_BayerBG2RGB=COLOR_BayerRG2BGR, CONST COLOR_BayerGB2RGB=COLOR_BayerGR2BGR, CONST COLOR_BayerRG2RGB=COLOR_BayerBG2BGR, CONST COLOR_BayerGR2RGB=COLOR_BayerGB2BGR, CONST COLOR_BayerBG2GRAY=86, CONST COLOR_BayerGB2GRAY=87, CONST COLOR_BayerRG2GRAY=88, CONST COLOR_BayerGR2GRAY=89, CONST COLOR_BayerBG2BGR_VNG=62, CONST COLOR_BayerGB2BGR_VNG=63, CONST COLOR_BayerRG2BGR_VNG=64, CONST COLOR_BayerGR2BGR_VNG=65, CONST COLOR_BayerBG2RGB_VNG=COLOR_BayerRG2BGR_VNG, CONST COLOR_BayerGB2RGB_VNG=COLOR_BayerGR2BGR_VNG, CONST COLOR_BayerRG2RGB_VNG=COLOR_BayerBG2BGR_VNG, CONST COLOR_BayerGR2RGB_VNG=COLOR_BayerGB2BGR_VNG, CONST COLOR_BayerBG2BGR_EA=135, CONST COLOR_BayerGB2BGR_EA=136, CONST COLOR_BayerRG2BGR_EA=137, CONST COLOR_BayerGR2BGR_EA=138, CONST COLOR_BayerBG2RGB_EA=COLOR_BayerRG2BGR_EA, CONST COLOR_BayerGB2RGB_EA=COLOR_BayerGR2BGR_EA, CONST COLOR_BayerRG2RGB_EA=COLOR_BayerBG2BGR_EA, CONST COLOR_BayerGR2RGB_EA=COLOR_BayerGB2BGR_EA, CONST COLOR_BayerBG2BGRA=139, CONST COLOR_BayerGB2BGRA=140, CONST COLOR_BayerRG2BGRA=141, CONST COLOR_BayerGR2BGRA=142, CONST COLOR_BayerBG2RGBA=COLOR_BayerRG2BGRA, CONST COLOR_BayerGB2RGBA=COLOR_BayerGR2BGRA, CONST COLOR_BayerRG2RGBA=COLOR_BayerBG2BGRA, CONST COLOR_BayerGR2RGBA=COLOR_BayerGB2BGRA, CONST COLOR_COLORCVT_MAX=143, CONST INTERSECT_NONE=0, CONST INTERSECT_PARTIAL=1, CONST INTERSECT_FULL=2, CONST TM_SQDIFF=0, CONST TM_SQDIFF_NORMED=1, CONST TM_CCORR=2, CONST TM_CCORR_NORMED=3, CONST TM_CCOEFF=4, CONST TM_CCOEFF_NORMED=5, CONST COLORMAP_AUTUMN=0, CONST COLORMAP_BONE=1, CONST COLORMAP_JET=2, CONST COLORMAP_WINTER=3, CONST COLORMAP_RAINBOW=4, CONST COLORMAP_OCEAN=5, CONST COLORMAP_SUMMER=6, CONST COLORMAP_SPRING=7, CONST COLORMAP_COOL=8, CONST COLORMAP_HSV=9, CONST COLORMAP_PINK=10, CONST COLORMAP_HOT=11, CONST COLORMAP_PARULA=12, CONST MARKER_CROSS=0, CONST MARKER_TILTED_CROSS=1, CONST MARKER_STAR=2, CONST MARKER_DIAMOND=3, CONST MARKER_SQUARE=4, CONST MARKER_TRIANGLE_UP=5, CONST MARKER_TRIANGLE_DOWN=6]
FUNC <Mat cv..getAffineTransform [ARG vector_Point2f src=, ARG vector_Point2f dst=]>
java: Mat getAffineTransform(MatOfPoint2f src, MatOfPoint2f dst)
FUNC <Mat cv..getDefaultNewCameraMatrix [ARG Mat cameraMatrix=, ARG Size imgsize=Size(), ARG bool centerPrincipalPoint=false]>
java: Mat getDefaultNewCameraMatrix(Mat cameraMatrix, Size imgsize, boolean centerPrincipalPoint)
java: Mat getDefaultNewCameraMatrix(Mat cameraMatrix, Size imgsize)
java: Mat getDefaultNewCameraMatrix(Mat cameraMatrix)
FUNC <Mat cv..getGaborKernel [ARG Size ksize=, ARG double sigma=, ARG double theta=, ARG double lambd=, ARG double gamma=, ARG double psi=CV_PI*0.5, ARG int ktype=CV_64F]>
java: Mat getGaborKernel(Size ksize, double sigma, double theta, double lambd, double gamma, double psi, int ktype)
java: Mat getGaborKernel(Size ksize, double sigma, double theta, double lambd, double gamma, double psi)
java: Mat getGaborKernel(Size ksize, double sigma, double theta, double lambd, double gamma)
FUNC <Mat cv..getGaussianKernel [ARG int ksize=, ARG double sigma=, ARG int ktype=CV_64F]>
java: Mat getGaussianKernel(int ksize, double sigma, int ktype)
java: Mat getGaussianKernel(int ksize, double sigma)
FUNC <Mat cv..getPerspectiveTransform [ARG Mat src=, ARG Mat dst=]>
java: Mat getPerspectiveTransform(Mat src, Mat dst)
FUNC <Mat cv..getRotationMatrix2D [ARG Point2f center=, ARG double angle=, ARG double scale=]>
java: Mat getRotationMatrix2D(Point center, double angle, double scale)
FUNC <Mat cv..getStructuringElement [ARG int shape=, ARG Size ksize=, ARG Point anchor=Point(-1,-1)]>
java: Mat getStructuringElement(int shape, Size ksize, Point anchor)
java: Mat getStructuringElement(int shape, Size ksize)
FUNC <Moments cv..moments [ARG Mat array=, ARG bool binaryImage=false]>
java: Moments moments(Mat array, boolean binaryImage)
java: Moments moments(Mat array)
FUNC <Point2d cv..phaseCorrelate [ARG Mat src1=, ARG Mat src2=, ARG Mat window=Mat(), ARG double * response=0]>
java: Point phaseCorrelate(Mat src1, Mat src2, Mat window, double[] response)
java: Point phaseCorrelate(Mat src1, Mat src2, Mat window)
java: Point phaseCorrelate(Mat src1, Mat src2)
FUNC <Ptr_CLAHE cv..createCLAHE [ARG double clipLimit=40.0, ARG Size tileGridSize=Size(8, 8)]>
java: CLAHE createCLAHE(double clipLimit, Size tileGridSize)
java: CLAHE createCLAHE(double clipLimit)
java: CLAHE createCLAHE()
FUNC <Ptr_LineSegmentDetector cv..createLineSegmentDetector [ARG int _refine=LSD_REFINE_STD, ARG double _scale=0.8, ARG double _sigma_scale=0.6, ARG double _quant=2.0, ARG double _ang_th=22.5, ARG double _log_eps=0, ARG double _density_th=0.7, ARG int _n_bins=1024]>
java: LineSegmentDetector createLineSegmentDetector(int _refine, double _scale, double _sigma_scale, double _quant, double _ang_th, double _log_eps, double _density_th, int _n_bins)
java: LineSegmentDetector createLineSegmentDetector(int _refine, double _scale, double _sigma_scale, double _quant, double _ang_th, double _log_eps, double _density_th)
java: LineSegmentDetector createLineSegmentDetector(int _refine, double _scale, double _sigma_scale, double _quant, double _ang_th, double _log_eps)
java: LineSegmentDetector createLineSegmentDetector(int _refine, double _scale, double _sigma_scale, double _quant, double _ang_th)
java: LineSegmentDetector createLineSegmentDetector(int _refine, double _scale, double _sigma_scale, double _quant)
java: LineSegmentDetector createLineSegmentDetector(int _refine, double _scale, double _sigma_scale)
java: LineSegmentDetector createLineSegmentDetector(int _refine, double _scale)
java: LineSegmentDetector createLineSegmentDetector(int _refine)
java: LineSegmentDetector createLineSegmentDetector()
FUNC <Rect cv..boundingRect [ARG vector_Point points=]>
java: Rect boundingRect(MatOfPoint points)
FUNC <RotatedRect cv..fitEllipse [ARG vector_Point2f points=]>
java: RotatedRect fitEllipse(MatOfPoint2f points)
FUNC <RotatedRect cv..fitEllipseAMS [ARG Mat points=]>
java: RotatedRect fitEllipseAMS(Mat points)
FUNC <RotatedRect cv..fitEllipseDirect [ARG Mat points=]>
java: RotatedRect fitEllipseDirect(Mat points)
FUNC <RotatedRect cv..minAreaRect [ARG vector_Point2f points=]>
java: RotatedRect minAreaRect(MatOfPoint2f points)
FUNC <bool cv..clipLine [ARG Rect imgRect=, ARG Point pt1=, ARG Point pt2=]>
java: boolean clipLine(Rect imgRect, Point pt1, Point pt2)
FUNC <bool cv..isContourConvex [ARG vector_Point contour=]>
java: boolean isContourConvex(MatOfPoint contour)
FUNC <double cv..arcLength [ARG vector_Point2f curve=, ARG bool closed=]>
java: double arcLength(MatOfPoint2f curve, boolean closed)
FUNC <double cv..compareHist [ARG Mat H1=, ARG Mat H2=, ARG int method=]>
java: double compareHist(Mat H1, Mat H2, int method)
FUNC <double cv..contourArea [ARG Mat contour=, ARG bool oriented=false]>
java: double contourArea(Mat contour, boolean oriented)
java: double contourArea(Mat contour)
FUNC <double cv..getFontScaleFromHeight [ARG int fontFace=, ARG int pixelHeight=, ARG int thickness=1]>
java: double getFontScaleFromHeight(int fontFace, int pixelHeight, int thickness)
java: double getFontScaleFromHeight(int fontFace, int pixelHeight)
FUNC <double cv..matchShapes [ARG Mat contour1=, ARG Mat contour2=, ARG int method=, ARG double parameter=]>
java: double matchShapes(Mat contour1, Mat contour2, int method, double parameter)
FUNC <double cv..minEnclosingTriangle [ARG Mat points=, ARG Mat triangle=]>
java: double minEnclosingTriangle(Mat points, Mat triangle)
FUNC <double cv..pointPolygonTest [ARG vector_Point2f contour=, ARG Point2f pt=, ARG bool measureDist=]>
java: double pointPolygonTest(MatOfPoint2f contour, Point pt, boolean measureDist)
FUNC <double cv..threshold [ARG Mat src=, ARG Mat dst=, ARG double thresh=, ARG double maxval=, ARG int type=]>
java: double threshold(Mat src, Mat dst, double thresh, double maxval, int type)
FUNC <float cv..initWideAngleProjMap [ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Size imageSize=, ARG int destImageWidth=, ARG int m1type=, ARG Mat map1=, ARG Mat map2=, ARG int projType=PROJ_SPHERICAL_EQRECT, ARG double alpha=0]>
java: float initWideAngleProjMap(Mat cameraMatrix, Mat distCoeffs, Size imageSize, int destImageWidth, int m1type, Mat map1, Mat map2, int projType, double alpha)
java: float initWideAngleProjMap(Mat cameraMatrix, Mat distCoeffs, Size imageSize, int destImageWidth, int m1type, Mat map1, Mat map2, int projType)
java: float initWideAngleProjMap(Mat cameraMatrix, Mat distCoeffs, Size imageSize, int destImageWidth, int m1type, Mat map1, Mat map2)
FUNC <float cv..intersectConvexConvex [ARG Mat _p1=, ARG Mat _p2=, ARG Mat _p12=, ARG bool handleNested=true]>
java: float intersectConvexConvex(Mat _p1, Mat _p2, Mat _p12, boolean handleNested)
java: float intersectConvexConvex(Mat _p1, Mat _p2, Mat _p12)
FUNC <float cv..wrapperEMD [ARG Mat signature1=, ARG Mat signature2=, ARG int distType=, ARG Mat cost=Mat(), ARG Ptr_float lowerBound=Ptr<float>(), ARG Mat flow=Mat()]>
java: float EMD(Mat signature1, Mat signature2, int distType, Mat cost, Mat flow)
java: float EMD(Mat signature1, Mat signature2, int distType, Mat cost)
java: float EMD(Mat signature1, Mat signature2, int distType, Mat cost)
java: float EMD(Mat signature1, Mat signature2, int distType)
FUNC <int cv..connectedComponents [ARG Mat image=, ARG Mat labels=, ARG int connectivity=, ARG int ltype=, ARG int ccltype=]>
java: int connectedComponentsWithAlgorithm(Mat image, Mat labels, int connectivity, int ltype, int ccltype)
FUNC <int cv..connectedComponents [ARG Mat image=, ARG Mat labels=, ARG int connectivity=8, ARG int ltype=CV_32S]>
java: int connectedComponents(Mat image, Mat labels, int connectivity, int ltype)
java: int connectedComponents(Mat image, Mat labels, int connectivity)
java: int connectedComponents(Mat image, Mat labels)
FUNC <int cv..connectedComponentsWithStats [ARG Mat image=, ARG Mat labels=, ARG Mat stats=, ARG Mat centroids=, ARG int connectivity=, ARG int ltype=, ARG int ccltype=]>
java: int connectedComponentsWithStatsWithAlgorithm(Mat image, Mat labels, Mat stats, Mat centroids, int connectivity, int ltype, int ccltype)
FUNC <int cv..connectedComponentsWithStats [ARG Mat image=, ARG Mat labels=, ARG Mat stats=, ARG Mat centroids=, ARG int connectivity=8, ARG int ltype=CV_32S]>
java: int connectedComponentsWithStats(Mat image, Mat labels, Mat stats, Mat centroids, int connectivity, int ltype)
java: int connectedComponentsWithStats(Mat image, Mat labels, Mat stats, Mat centroids, int connectivity)
java: int connectedComponentsWithStats(Mat image, Mat labels, Mat stats, Mat centroids)
FUNC <int cv..floodFill [ARG Mat image=, ARG Mat mask=, ARG Point seedPoint=, ARG Scalar newVal=, ARG Rect * rect=0, ARG Scalar loDiff=Scalar(), ARG Scalar upDiff=Scalar(), ARG int flags=4]>
java: int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff, int flags)
java: int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff, Scalar upDiff)
java: int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect, Scalar loDiff)
java: int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal, Rect rect)
java: int floodFill(Mat image, Mat mask, Point seedPoint, Scalar newVal)
FUNC <int cv..rotatedRectangleIntersection [ARG RotatedRect rect1=, ARG RotatedRect rect2=, ARG Mat intersectingRegion=]>
java: int rotatedRectangleIntersection(RotatedRect rect1, RotatedRect rect2, Mat intersectingRegion)
FUNC <void cv..Canny [ARG Mat dx=, ARG Mat dy=, ARG Mat edges=, ARG double threshold1=, ARG double threshold2=, ARG bool L2gradient=false]>
java: void Canny(Mat dx, Mat dy, Mat edges, double threshold1, double threshold2, boolean L2gradient)
java: void Canny(Mat dx, Mat dy, Mat edges, double threshold1, double threshold2)
FUNC <void cv..Canny [ARG Mat image=, ARG Mat edges=, ARG double threshold1=, ARG double threshold2=, ARG int apertureSize=3, ARG bool L2gradient=false]>
java: void Canny(Mat image, Mat edges, double threshold1, double threshold2, int apertureSize, boolean L2gradient)
java: void Canny(Mat image, Mat edges, double threshold1, double threshold2, int apertureSize)
java: void Canny(Mat image, Mat edges, double threshold1, double threshold2)
FUNC <void cv..GaussianBlur [ARG Mat src=, ARG Mat dst=, ARG Size ksize=, ARG double sigmaX=, ARG double sigmaY=0, ARG int borderType=BORDER_DEFAULT]>
java: void GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX, double sigmaY, int borderType)
java: void GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX, double sigmaY)
java: void GaussianBlur(Mat src, Mat dst, Size ksize, double sigmaX)
FUNC <void cv..HoughCircles [ARG Mat image=, ARG Mat circles=, ARG int method=, ARG double dp=, ARG double minDist=, ARG double param1=100, ARG double param2=100, ARG int minRadius=0, ARG int maxRadius=0]>
java: void HoughCircles(Mat image, Mat circles, int method, double dp, double minDist, double param1, double param2, int minRadius, int maxRadius)
java: void HoughCircles(Mat image, Mat circles, int method, double dp, double minDist, double param1, double param2, int minRadius)
java: void HoughCircles(Mat image, Mat circles, int method, double dp, double minDist, double param1, double param2)
java: void HoughCircles(Mat image, Mat circles, int method, double dp, double minDist, double param1)
java: void HoughCircles(Mat image, Mat circles, int method, double dp, double minDist)
FUNC <void cv..HoughLines [ARG Mat image=, ARG Mat lines=, ARG double rho=, ARG double theta=, ARG int threshold=, ARG double srn=0, ARG double stn=0, ARG double min_theta=0, ARG double max_theta=CV_PI]>
java: void HoughLines(Mat image, Mat lines, double rho, double theta, int threshold, double srn, double stn, double min_theta, double max_theta)
java: void HoughLines(Mat image, Mat lines, double rho, double theta, int threshold, double srn, double stn, double min_theta)
java: void HoughLines(Mat image, Mat lines, double rho, double theta, int threshold, double srn, double stn)
java: void HoughLines(Mat image, Mat lines, double rho, double theta, int threshold, double srn)
java: void HoughLines(Mat image, Mat lines, double rho, double theta, int threshold)
FUNC <void cv..HoughLinesP [ARG Mat image=, ARG Mat lines=, ARG double rho=, ARG double theta=, ARG int threshold=, ARG double minLineLength=0, ARG double maxLineGap=0]>
java: void HoughLinesP(Mat image, Mat lines, double rho, double theta, int threshold, double minLineLength, double maxLineGap)
java: void HoughLinesP(Mat image, Mat lines, double rho, double theta, int threshold, double minLineLength)
java: void HoughLinesP(Mat image, Mat lines, double rho, double theta, int threshold)
FUNC <void cv..HoughLinesPointSet [ARG Mat _point=, ARG Mat _lines=, ARG int lines_max=, ARG int threshold=, ARG double min_rho=, ARG double max_rho=, ARG double rho_step=, ARG double min_theta=, ARG double max_theta=, ARG double theta_step=]>
java: void HoughLinesPointSet(Mat _point, Mat _lines, int lines_max, int threshold, double min_rho, double max_rho, double rho_step, double min_theta, double max_theta, double theta_step)
FUNC <void cv..HuMoments [ARG Moments m=, ARG Mat hu=]>
java: void HuMoments(Moments m, Mat hu)
FUNC <void cv..Laplacian [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int ksize=1, ARG double scale=1, ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>
java: void Laplacian(Mat src, Mat dst, int ddepth, int ksize, double scale, double delta, int borderType)
java: void Laplacian(Mat src, Mat dst, int ddepth, int ksize, double scale, double delta)
java: void Laplacian(Mat src, Mat dst, int ddepth, int ksize, double scale)
java: void Laplacian(Mat src, Mat dst, int ddepth, int ksize)
java: void Laplacian(Mat src, Mat dst, int ddepth)
FUNC <void cv..Scharr [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int dx=, ARG int dy=, ARG double scale=1, ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>
java: void Scharr(Mat src, Mat dst, int ddepth, int dx, int dy, double scale, double delta, int borderType)
java: void Scharr(Mat src, Mat dst, int ddepth, int dx, int dy, double scale, double delta)
java: void Scharr(Mat src, Mat dst, int ddepth, int dx, int dy, double scale)
java: void Scharr(Mat src, Mat dst, int ddepth, int dx, int dy)
FUNC <void cv..Sobel [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG int dx=, ARG int dy=, ARG int ksize=3, ARG double scale=1, ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>
java: void Sobel(Mat src, Mat dst, int ddepth, int dx, int dy, int ksize, double scale, double delta, int borderType)
java: void Sobel(Mat src, Mat dst, int ddepth, int dx, int dy, int ksize, double scale, double delta)
java: void Sobel(Mat src, Mat dst, int ddepth, int dx, int dy, int ksize, double scale)
java: void Sobel(Mat src, Mat dst, int ddepth, int dx, int dy, int ksize)
java: void Sobel(Mat src, Mat dst, int ddepth, int dx, int dy)
FUNC <void cv..accumulate [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>
java: void accumulate(Mat src, Mat dst, Mat mask)
java: void accumulate(Mat src, Mat dst)
FUNC <void cv..accumulateProduct [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG Mat mask=Mat()]>
java: void accumulateProduct(Mat src1, Mat src2, Mat dst, Mat mask)
java: void accumulateProduct(Mat src1, Mat src2, Mat dst)
FUNC <void cv..accumulateSquare [ARG Mat src=, ARG Mat dst=, ARG Mat mask=Mat()]>
java: void accumulateSquare(Mat src, Mat dst, Mat mask)
java: void accumulateSquare(Mat src, Mat dst)
FUNC <void cv..accumulateWeighted [ARG Mat src=, ARG Mat dst=, ARG double alpha=, ARG Mat mask=Mat()]>
java: void accumulateWeighted(Mat src, Mat dst, double alpha, Mat mask)
java: void accumulateWeighted(Mat src, Mat dst, double alpha)
FUNC <void cv..adaptiveThreshold [ARG Mat src=, ARG Mat dst=, ARG double maxValue=, ARG int adaptiveMethod=, ARG int thresholdType=, ARG int blockSize=, ARG double C=]>
java: void adaptiveThreshold(Mat src, Mat dst, double maxValue, int adaptiveMethod, int thresholdType, int blockSize, double C)
FUNC <void cv..applyColorMap [ARG Mat src=, ARG Mat dst=, ARG Mat userColor=]>
java: void applyColorMap(Mat src, Mat dst, Mat userColor)
FUNC <void cv..applyColorMap [ARG Mat src=, ARG Mat dst=, ARG int colormap=]>
java: void applyColorMap(Mat src, Mat dst, int colormap)
FUNC <void cv..approxPolyDP [ARG vector_Point2f curve=, ARG vector_Point2f approxCurve=, ARG double epsilon=, ARG bool closed=]>
java: void approxPolyDP(MatOfPoint2f curve, MatOfPoint2f approxCurve, double epsilon, boolean closed)
FUNC <void cv..arrowedLine [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG int line_type=8, ARG int shift=0, ARG double tipLength=0.1]>
java: void arrowedLine(Mat img, Point pt1, Point pt2, Scalar color, int thickness, int line_type, int shift, double tipLength)
java: void arrowedLine(Mat img, Point pt1, Point pt2, Scalar color, int thickness, int line_type, int shift)
java: void arrowedLine(Mat img, Point pt1, Point pt2, Scalar color, int thickness, int line_type)
java: void arrowedLine(Mat img, Point pt1, Point pt2, Scalar color, int thickness)
java: void arrowedLine(Mat img, Point pt1, Point pt2, Scalar color)
FUNC <void cv..bilateralFilter [ARG Mat src=, ARG Mat dst=, ARG int d=, ARG double sigmaColor=, ARG double sigmaSpace=, ARG int borderType=BORDER_DEFAULT]>
java: void bilateralFilter(Mat src, Mat dst, int d, double sigmaColor, double sigmaSpace, int borderType)
java: void bilateralFilter(Mat src, Mat dst, int d, double sigmaColor, double sigmaSpace)
FUNC <void cv..blur [ARG Mat src=, ARG Mat dst=, ARG Size ksize=, ARG Point anchor=Point(-1,-1), ARG int borderType=BORDER_DEFAULT]>
java: void blur(Mat src, Mat dst, Size ksize, Point anchor, int borderType)
java: void blur(Mat src, Mat dst, Size ksize, Point anchor)
java: void blur(Mat src, Mat dst, Size ksize)
FUNC <void cv..boxFilter [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Size ksize=, ARG Point anchor=Point(-1,-1), ARG bool normalize=true, ARG int borderType=BORDER_DEFAULT]>
java: void boxFilter(Mat src, Mat dst, int ddepth, Size ksize, Point anchor, boolean normalize, int borderType)
java: void boxFilter(Mat src, Mat dst, int ddepth, Size ksize, Point anchor, boolean normalize)
java: void boxFilter(Mat src, Mat dst, int ddepth, Size ksize, Point anchor)
java: void boxFilter(Mat src, Mat dst, int ddepth, Size ksize)
FUNC <void cv..boxPoints [ARG RotatedRect box=, ARG Mat points=]>
java: void boxPoints(RotatedRect box, Mat points)
FUNC <void cv..calcBackProject [ARG vector_Mat images=, ARG vector_int channels=, ARG Mat hist=, ARG Mat dst=, ARG vector_float ranges=, ARG double scale=]>
java: void calcBackProject(List<Mat> images, MatOfInt channels, Mat hist, Mat dst, MatOfFloat ranges, double scale)
FUNC <void cv..calcHist [ARG vector_Mat images=, ARG vector_int channels=, ARG Mat mask=, ARG Mat hist=, ARG vector_int histSize=, ARG vector_float ranges=, ARG bool accumulate=false]>
java: void calcHist(List<Mat> images, MatOfInt channels, Mat mask, Mat hist, MatOfInt histSize, MatOfFloat ranges, boolean accumulate)
java: void calcHist(List<Mat> images, MatOfInt channels, Mat mask, Mat hist, MatOfInt histSize, MatOfFloat ranges)
FUNC <void cv..circle [ARG Mat img=, ARG Point center=, ARG int radius=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>
java: void circle(Mat img, Point center, int radius, Scalar color, int thickness, int lineType, int shift)
java: void circle(Mat img, Point center, int radius, Scalar color, int thickness, int lineType)
java: void circle(Mat img, Point center, int radius, Scalar color, int thickness)
java: void circle(Mat img, Point center, int radius, Scalar color)
FUNC <void cv..convertMaps [ARG Mat map1=, ARG Mat map2=, ARG Mat dstmap1=, ARG Mat dstmap2=, ARG int dstmap1type=, ARG bool nninterpolation=false]>
java: void convertMaps(Mat map1, Mat map2, Mat dstmap1, Mat dstmap2, int dstmap1type, boolean nninterpolation)
java: void convertMaps(Mat map1, Mat map2, Mat dstmap1, Mat dstmap2, int dstmap1type)
FUNC <void cv..convexHull [ARG vector_Point points=, ARG vector_int hull=, ARG bool clockwise=false, ARG  returnPoints=true]>
java: void convexHull(MatOfPoint points, MatOfInt hull, boolean clockwise)
java: void convexHull(MatOfPoint points, MatOfInt hull, boolean clockwise)
java: void convexHull(MatOfPoint points, MatOfInt hull)
FUNC <void cv..convexityDefects [ARG vector_Point contour=, ARG vector_int convexhull=, ARG vector_Vec4i convexityDefects=]>
java: void convexityDefects(MatOfPoint contour, MatOfInt convexhull, MatOfInt4 convexityDefects)
FUNC <void cv..cornerEigenValsAndVecs [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=, ARG int borderType=BORDER_DEFAULT]>
java: void cornerEigenValsAndVecs(Mat src, Mat dst, int blockSize, int ksize, int borderType)
java: void cornerEigenValsAndVecs(Mat src, Mat dst, int blockSize, int ksize)
FUNC <void cv..cornerHarris [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=, ARG double k=, ARG int borderType=BORDER_DEFAULT]>
java: void cornerHarris(Mat src, Mat dst, int blockSize, int ksize, double k, int borderType)
java: void cornerHarris(Mat src, Mat dst, int blockSize, int ksize, double k)
FUNC <void cv..cornerMinEigenVal [ARG Mat src=, ARG Mat dst=, ARG int blockSize=, ARG int ksize=3, ARG int borderType=BORDER_DEFAULT]>
java: void cornerMinEigenVal(Mat src, Mat dst, int blockSize, int ksize, int borderType)
java: void cornerMinEigenVal(Mat src, Mat dst, int blockSize, int ksize)
java: void cornerMinEigenVal(Mat src, Mat dst, int blockSize)
FUNC <void cv..cornerSubPix [ARG Mat image=, ARG Mat corners=, ARG Size winSize=, ARG Size zeroZone=, ARG TermCriteria criteria=]>
java: void cornerSubPix(Mat image, Mat corners, Size winSize, Size zeroZone, TermCriteria criteria)
FUNC <void cv..createHanningWindow [ARG Mat dst=, ARG Size winSize=, ARG int type=]>
java: void createHanningWindow(Mat dst, Size winSize, int type)
FUNC <void cv..cvtColor [ARG Mat src=, ARG Mat dst=, ARG int code=, ARG int dstCn=0]>
java: void cvtColor(Mat src, Mat dst, int code, int dstCn)
java: void cvtColor(Mat src, Mat dst, int code)
FUNC <void cv..cvtColorTwoPlane [ARG Mat src1=, ARG Mat src2=, ARG Mat dst=, ARG int code=]>
java: void cvtColorTwoPlane(Mat src1, Mat src2, Mat dst, int code)
FUNC <void cv..demosaicing [ARG Mat _src=, ARG Mat _dst=, ARG int code=, ARG int dcn=0]>
java: void demosaicing(Mat _src, Mat _dst, int code, int dcn)
java: void demosaicing(Mat _src, Mat _dst, int code)
FUNC <void cv..dilate [ARG Mat src=, ARG Mat dst=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG int borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>
java: void dilate(Mat src, Mat dst, Mat kernel, Point anchor, int iterations, int borderType, Scalar borderValue)
java: void dilate(Mat src, Mat dst, Mat kernel, Point anchor, int iterations, int borderType)
java: void dilate(Mat src, Mat dst, Mat kernel, Point anchor, int iterations)
java: void dilate(Mat src, Mat dst, Mat kernel, Point anchor)
java: void dilate(Mat src, Mat dst, Mat kernel)
FUNC <void cv..distanceTransform [ARG Mat src=, ARG Mat dst=, ARG Mat labels=, ARG int distanceType=, ARG int maskSize=, ARG int labelType=DIST_LABEL_CCOMP]>
java: void distanceTransformWithLabels(Mat src, Mat dst, Mat labels, int distanceType, int maskSize, int labelType)
java: void distanceTransformWithLabels(Mat src, Mat dst, Mat labels, int distanceType, int maskSize)
FUNC <void cv..distanceTransform [ARG Mat src=, ARG Mat dst=, ARG int distanceType=, ARG int maskSize=, ARG int dstType=CV_32F]>
java: void distanceTransform(Mat src, Mat dst, int distanceType, int maskSize, int dstType)
java: void distanceTransform(Mat src, Mat dst, int distanceType, int maskSize)
FUNC <void cv..drawContours [ARG Mat image=, ARG vector_vector_Point contours=, ARG int contourIdx=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG Mat hierarchy=Mat(), ARG int maxLevel=INT_MAX, ARG Point offset=Point()]>
java: void drawContours(Mat image, List<MatOfPoint> contours, int contourIdx, Scalar color, int thickness, int lineType, Mat hierarchy, int maxLevel, Point offset)
java: void drawContours(Mat image, List<MatOfPoint> contours, int contourIdx, Scalar color, int thickness, int lineType, Mat hierarchy, int maxLevel)
java: void drawContours(Mat image, List<MatOfPoint> contours, int contourIdx, Scalar color, int thickness, int lineType, Mat hierarchy)
java: void drawContours(Mat image, List<MatOfPoint> contours, int contourIdx, Scalar color, int thickness, int lineType)
java: void drawContours(Mat image, List<MatOfPoint> contours, int contourIdx, Scalar color, int thickness)
java: void drawContours(Mat image, List<MatOfPoint> contours, int contourIdx, Scalar color)
FUNC <void cv..drawMarker [ARG Mat img=, ARG Point position=, ARG Scalar color=, ARG int markerType=MARKER_CROSS, ARG int markerSize=20, ARG int thickness=1, ARG int line_type=8]>
java: void drawMarker(Mat img, Point position, Scalar color, int markerType, int markerSize, int thickness, int line_type)
java: void drawMarker(Mat img, Point position, Scalar color, int markerType, int markerSize, int thickness)
java: void drawMarker(Mat img, Point position, Scalar color, int markerType, int markerSize)
java: void drawMarker(Mat img, Point position, Scalar color, int markerType)
java: void drawMarker(Mat img, Point position, Scalar color)
FUNC <void cv..ellipse [ARG Mat img=, ARG Point center=, ARG Size axes=, ARG double angle=, ARG double startAngle=, ARG double endAngle=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>
java: void ellipse(Mat img, Point center, Size axes, double angle, double startAngle, double endAngle, Scalar color, int thickness, int lineType, int shift)
java: void ellipse(Mat img, Point center, Size axes, double angle, double startAngle, double endAngle, Scalar color, int thickness, int lineType)
java: void ellipse(Mat img, Point center, Size axes, double angle, double startAngle, double endAngle, Scalar color, int thickness)
java: void ellipse(Mat img, Point center, Size axes, double angle, double startAngle, double endAngle, Scalar color)
FUNC <void cv..ellipse [ARG Mat img=, ARG RotatedRect box=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8]>
java: void ellipse(Mat img, RotatedRect box, Scalar color, int thickness, int lineType)
java: void ellipse(Mat img, RotatedRect box, Scalar color, int thickness)
java: void ellipse(Mat img, RotatedRect box, Scalar color)
FUNC <void cv..ellipse2Poly [ARG Point center=, ARG Size axes=, ARG int angle=, ARG int arcStart=, ARG int arcEnd=, ARG int delta=, ARG vector_Point pts=]>
java: void ellipse2Poly(Point center, Size axes, int angle, int arcStart, int arcEnd, int delta, MatOfPoint pts)
FUNC <void cv..equalizeHist [ARG Mat src=, ARG Mat dst=]>
java: void equalizeHist(Mat src, Mat dst)
FUNC <void cv..erode [ARG Mat src=, ARG Mat dst=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG int borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>
java: void erode(Mat src, Mat dst, Mat kernel, Point anchor, int iterations, int borderType, Scalar borderValue)
java: void erode(Mat src, Mat dst, Mat kernel, Point anchor, int iterations, int borderType)
java: void erode(Mat src, Mat dst, Mat kernel, Point anchor, int iterations)
java: void erode(Mat src, Mat dst, Mat kernel, Point anchor)
java: void erode(Mat src, Mat dst, Mat kernel)
FUNC <void cv..fillConvexPoly [ARG Mat img=, ARG vector_Point points=, ARG Scalar color=, ARG int lineType=LINE_8, ARG int shift=0]>
java: void fillConvexPoly(Mat img, MatOfPoint points, Scalar color, int lineType, int shift)
java: void fillConvexPoly(Mat img, MatOfPoint points, Scalar color, int lineType)
java: void fillConvexPoly(Mat img, MatOfPoint points, Scalar color)
FUNC <void cv..fillPoly [ARG Mat img=, ARG vector_vector_Point pts=, ARG Scalar color=, ARG int lineType=LINE_8, ARG int shift=0, ARG Point offset=Point()]>
java: void fillPoly(Mat img, List<MatOfPoint> pts, Scalar color, int lineType, int shift, Point offset)
java: void fillPoly(Mat img, List<MatOfPoint> pts, Scalar color, int lineType, int shift)
java: void fillPoly(Mat img, List<MatOfPoint> pts, Scalar color, int lineType)
java: void fillPoly(Mat img, List<MatOfPoint> pts, Scalar color)
FUNC <void cv..filter2D [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>
java: void filter2D(Mat src, Mat dst, int ddepth, Mat kernel, Point anchor, double delta, int borderType)
java: void filter2D(Mat src, Mat dst, int ddepth, Mat kernel, Point anchor, double delta)
java: void filter2D(Mat src, Mat dst, int ddepth, Mat kernel, Point anchor)
java: void filter2D(Mat src, Mat dst, int ddepth, Mat kernel)
FUNC <void cv..findContours [ARG Mat image=, ARG vector_vector_Point contours=, ARG Mat hierarchy=, ARG int mode=, ARG int method=, ARG Point offset=Point()]>
java: void findContours(Mat image, List<MatOfPoint> contours, Mat hierarchy, int mode, int method, Point offset)
java: void findContours(Mat image, List<MatOfPoint> contours, Mat hierarchy, int mode, int method)
FUNC <void cv..fitLine [ARG Mat points=, ARG Mat line=, ARG int distType=, ARG double param=, ARG double reps=, ARG double aeps=]>
java: void fitLine(Mat points, Mat line, int distType, double param, double reps, double aeps)
FUNC <void cv..getDerivKernels [ARG Mat kx=, ARG Mat ky=, ARG int dx=, ARG int dy=, ARG int ksize=, ARG bool normalize=false, ARG int ktype=CV_32F]>
java: void getDerivKernels(Mat kx, Mat ky, int dx, int dy, int ksize, boolean normalize, int ktype)
java: void getDerivKernels(Mat kx, Mat ky, int dx, int dy, int ksize, boolean normalize)
java: void getDerivKernels(Mat kx, Mat ky, int dx, int dy, int ksize)
FUNC <void cv..getRectSubPix [ARG Mat image=, ARG Size patchSize=, ARG Point2f center=, ARG Mat patch=, ARG int patchType=-1]>
java: void getRectSubPix(Mat image, Size patchSize, Point center, Mat patch, int patchType)
java: void getRectSubPix(Mat image, Size patchSize, Point center, Mat patch)
FUNC <void cv..goodFeaturesToTrack [ARG Mat image=, ARG vector_Point corners=, ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG Mat mask=, ARG int blockSize=, ARG int gradientSize=, ARG bool useHarrisDetector=false, ARG double k=0.04]>
java: void goodFeaturesToTrack(Mat image, MatOfPoint corners, int maxCorners, double qualityLevel, double minDistance, Mat mask, int blockSize, int gradientSize, boolean useHarrisDetector, double k)
java: void goodFeaturesToTrack(Mat image, MatOfPoint corners, int maxCorners, double qualityLevel, double minDistance, Mat mask, int blockSize, int gradientSize, boolean useHarrisDetector)
java: void goodFeaturesToTrack(Mat image, MatOfPoint corners, int maxCorners, double qualityLevel, double minDistance, Mat mask, int blockSize, int gradientSize)
FUNC <void cv..goodFeaturesToTrack [ARG Mat image=, ARG vector_Point corners=, ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG Mat mask=Mat(), ARG int blockSize=3, ARG bool useHarrisDetector=false, ARG double k=0.04]>
java: void goodFeaturesToTrack(Mat image, MatOfPoint corners, int maxCorners, double qualityLevel, double minDistance, Mat mask, int blockSize, boolean useHarrisDetector, double k)
java: void goodFeaturesToTrack(Mat image, MatOfPoint corners, int maxCorners, double qualityLevel, double minDistance, Mat mask, int blockSize, boolean useHarrisDetector)
java: void goodFeaturesToTrack(Mat image, MatOfPoint corners, int maxCorners, double qualityLevel, double minDistance, Mat mask, int blockSize)
java: void goodFeaturesToTrack(Mat image, MatOfPoint corners, int maxCorners, double qualityLevel, double minDistance, Mat mask)
java: void goodFeaturesToTrack(Mat image, MatOfPoint corners, int maxCorners, double qualityLevel, double minDistance)
FUNC <void cv..grabCut [ARG Mat img=, ARG Mat mask=, ARG Rect rect=, ARG Mat bgdModel=, ARG Mat fgdModel=, ARG int iterCount=, ARG int mode=GC_EVAL]>
java: void grabCut(Mat img, Mat mask, Rect rect, Mat bgdModel, Mat fgdModel, int iterCount, int mode)
java: void grabCut(Mat img, Mat mask, Rect rect, Mat bgdModel, Mat fgdModel, int iterCount)
FUNC <void cv..initUndistortRectifyMap [ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat R=, ARG Mat newCameraMatrix=, ARG Size size=, ARG int m1type=, ARG Mat map1=, ARG Mat map2=]>
java: void initUndistortRectifyMap(Mat cameraMatrix, Mat distCoeffs, Mat R, Mat newCameraMatrix, Size size, int m1type, Mat map1, Mat map2)
FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG Mat sqsum=, ARG Mat tilted=, ARG int sdepth=-1, ARG int sqdepth=-1]>
java: void integral3(Mat src, Mat sum, Mat sqsum, Mat tilted, int sdepth, int sqdepth)
java: void integral3(Mat src, Mat sum, Mat sqsum, Mat tilted, int sdepth)
java: void integral3(Mat src, Mat sum, Mat sqsum, Mat tilted)
FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG Mat sqsum=, ARG int sdepth=-1, ARG int sqdepth=-1]>
java: void integral2(Mat src, Mat sum, Mat sqsum, int sdepth, int sqdepth)
java: void integral2(Mat src, Mat sum, Mat sqsum, int sdepth)
java: void integral2(Mat src, Mat sum, Mat sqsum)
FUNC <void cv..integral [ARG Mat src=, ARG Mat sum=, ARG int sdepth=-1]>
java: void integral(Mat src, Mat sum, int sdepth)
java: void integral(Mat src, Mat sum)
FUNC <void cv..invertAffineTransform [ARG Mat M=, ARG Mat iM=]>
java: void invertAffineTransform(Mat M, Mat iM)
FUNC <void cv..line [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>
java: void line(Mat img, Point pt1, Point pt2, Scalar color, int thickness, int lineType, int shift)
java: void line(Mat img, Point pt1, Point pt2, Scalar color, int thickness, int lineType)
java: void line(Mat img, Point pt1, Point pt2, Scalar color, int thickness)
java: void line(Mat img, Point pt1, Point pt2, Scalar color)
FUNC <void cv..linearPolar [ARG Mat src=, ARG Mat dst=, ARG Point2f center=, ARG double maxRadius=, ARG int flags=]>
java: void linearPolar(Mat src, Mat dst, Point center, double maxRadius, int flags)
FUNC <void cv..logPolar [ARG Mat src=, ARG Mat dst=, ARG Point2f center=, ARG double M=, ARG int flags=]>
java: void logPolar(Mat src, Mat dst, Point center, double M, int flags)
FUNC <void cv..matchTemplate [ARG Mat image=, ARG Mat templ=, ARG Mat result=, ARG int method=, ARG Mat mask=Mat()]>
java: void matchTemplate(Mat image, Mat templ, Mat result, int method, Mat mask)
java: void matchTemplate(Mat image, Mat templ, Mat result, int method)
FUNC <void cv..medianBlur [ARG Mat src=, ARG Mat dst=, ARG int ksize=]>
java: void medianBlur(Mat src, Mat dst, int ksize)
FUNC <void cv..minEnclosingCircle [ARG vector_Point2f points=, ARG Point2f center=, ARG float radius=]>
java: void minEnclosingCircle(MatOfPoint2f points, Point center, float[] radius)
FUNC <void cv..morphologyEx [ARG Mat src=, ARG Mat dst=, ARG int op=, ARG Mat kernel=, ARG Point anchor=Point(-1,-1), ARG int iterations=1, ARG int borderType=BORDER_CONSTANT, ARG Scalar borderValue=morphologyDefaultBorderValue()]>
java: void morphologyEx(Mat src, Mat dst, int op, Mat kernel, Point anchor, int iterations, int borderType, Scalar borderValue)
java: void morphologyEx(Mat src, Mat dst, int op, Mat kernel, Point anchor, int iterations, int borderType)
java: void morphologyEx(Mat src, Mat dst, int op, Mat kernel, Point anchor, int iterations)
java: void morphologyEx(Mat src, Mat dst, int op, Mat kernel, Point anchor)
java: void morphologyEx(Mat src, Mat dst, int op, Mat kernel)
FUNC <void cv..polylines [ARG Mat img=, ARG vector_vector_Point pts=, ARG bool isClosed=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>
java: void polylines(Mat img, List<MatOfPoint> pts, boolean isClosed, Scalar color, int thickness, int lineType, int shift)
java: void polylines(Mat img, List<MatOfPoint> pts, boolean isClosed, Scalar color, int thickness, int lineType)
java: void polylines(Mat img, List<MatOfPoint> pts, boolean isClosed, Scalar color, int thickness)
java: void polylines(Mat img, List<MatOfPoint> pts, boolean isClosed, Scalar color)
FUNC <void cv..preCornerDetect [ARG Mat src=, ARG Mat dst=, ARG int ksize=, ARG int borderType=BORDER_DEFAULT]>
java: void preCornerDetect(Mat src, Mat dst, int ksize, int borderType)
java: void preCornerDetect(Mat src, Mat dst, int ksize)
FUNC <void cv..putText [ARG Mat img=, ARG String text=, ARG Point org=, ARG int fontFace=, ARG double fontScale=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG bool bottomLeftOrigin=false]>
java: void putText(Mat img, String text, Point org, int fontFace, double fontScale, Scalar color, int thickness, int lineType, boolean bottomLeftOrigin)
java: void putText(Mat img, String text, Point org, int fontFace, double fontScale, Scalar color, int thickness, int lineType)
java: void putText(Mat img, String text, Point org, int fontFace, double fontScale, Scalar color, int thickness)
java: void putText(Mat img, String text, Point org, int fontFace, double fontScale, Scalar color)
FUNC <void cv..pyrDown [ARG Mat src=, ARG Mat dst=, ARG Size dstsize=Size(), ARG int borderType=BORDER_DEFAULT]>
java: void pyrDown(Mat src, Mat dst, Size dstsize, int borderType)
java: void pyrDown(Mat src, Mat dst, Size dstsize)
java: void pyrDown(Mat src, Mat dst)
FUNC <void cv..pyrMeanShiftFiltering [ARG Mat src=, ARG Mat dst=, ARG double sp=, ARG double sr=, ARG int maxLevel=1, ARG TermCriteria termcrit=TermCriteria(TermCriteria::MAX_ITER+TermCriteria::EPS,5,1)]>
java: void pyrMeanShiftFiltering(Mat src, Mat dst, double sp, double sr, int maxLevel, TermCriteria termcrit)
java: void pyrMeanShiftFiltering(Mat src, Mat dst, double sp, double sr, int maxLevel)
java: void pyrMeanShiftFiltering(Mat src, Mat dst, double sp, double sr)
FUNC <void cv..pyrUp [ARG Mat src=, ARG Mat dst=, ARG Size dstsize=Size(), ARG int borderType=BORDER_DEFAULT]>
java: void pyrUp(Mat src, Mat dst, Size dstsize, int borderType)
java: void pyrUp(Mat src, Mat dst, Size dstsize)
java: void pyrUp(Mat src, Mat dst)
FUNC <void cv..rectangle [ARG Mat img=, ARG Point pt1=, ARG Point pt2=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>
java: void rectangle(Mat img, Point pt1, Point pt2, Scalar color, int thickness, int lineType, int shift)
java: void rectangle(Mat img, Point pt1, Point pt2, Scalar color, int thickness, int lineType)
java: void rectangle(Mat img, Point pt1, Point pt2, Scalar color, int thickness)
java: void rectangle(Mat img, Point pt1, Point pt2, Scalar color)
FUNC <void cv..rectangle [ARG Mat img=, ARG Rect rec=, ARG Scalar color=, ARG int thickness=1, ARG int lineType=LINE_8, ARG int shift=0]>
java: void rectangle(Mat img, Rect rec, Scalar color, int thickness, int lineType, int shift)
java: void rectangle(Mat img, Rect rec, Scalar color, int thickness, int lineType)
java: void rectangle(Mat img, Rect rec, Scalar color, int thickness)
java: void rectangle(Mat img, Rect rec, Scalar color)
FUNC <void cv..remap [ARG Mat src=, ARG Mat dst=, ARG Mat map1=, ARG Mat map2=, ARG int interpolation=, ARG int borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>
java: void remap(Mat src, Mat dst, Mat map1, Mat map2, int interpolation, int borderMode, Scalar borderValue)
java: void remap(Mat src, Mat dst, Mat map1, Mat map2, int interpolation, int borderMode)
java: void remap(Mat src, Mat dst, Mat map1, Mat map2, int interpolation)
FUNC <void cv..resize [ARG Mat src=, ARG Mat dst=, ARG Size dsize=, ARG double fx=0, ARG double fy=0, ARG int interpolation=INTER_LINEAR]>
java: void resize(Mat src, Mat dst, Size dsize, double fx, double fy, int interpolation)
java: void resize(Mat src, Mat dst, Size dsize, double fx, double fy)
java: void resize(Mat src, Mat dst, Size dsize, double fx)
java: void resize(Mat src, Mat dst, Size dsize)
FUNC <void cv..sepFilter2D [ARG Mat src=, ARG Mat dst=, ARG int ddepth=, ARG Mat kernelX=, ARG Mat kernelY=, ARG Point anchor=Point(-1,-1), ARG double delta=0, ARG int borderType=BORDER_DEFAULT]>
java: void sepFilter2D(Mat src, Mat dst, int ddepth, Mat kernelX, Mat kernelY, Point anchor, double delta, int borderType)
java: void sepFilter2D(Mat src, Mat dst, int ddepth, Mat kernelX, Mat kernelY, Point anchor, double delta)
java: void sepFilter2D(Mat src, Mat dst, int ddepth, Mat kernelX, Mat kernelY, Point anchor)
java: void sepFilter2D(Mat src, Mat dst, int ddepth, Mat kernelX, Mat kernelY)
FUNC <void cv..spatialGradient [ARG Mat src=, ARG Mat dx=, ARG Mat dy=, ARG int ksize=3, ARG int borderType=BORDER_DEFAULT]>
java: void spatialGradient(Mat src, Mat dx, Mat dy, int ksize, int borderType)
java: void spatialGradient(Mat src, Mat dx, Mat dy, int ksize)
java: void spatialGradient(Mat src, Mat dx, Mat dy)
FUNC <void cv..sqrBoxFilter [ARG Mat _src=, ARG Mat _dst=, ARG int ddepth=, ARG Size ksize=, ARG Point anchor=Point(-1, -1), ARG bool normalize=true, ARG int borderType=BORDER_DEFAULT]>
java: void sqrBoxFilter(Mat _src, Mat _dst, int ddepth, Size ksize, Point anchor, boolean normalize, int borderType)
java: void sqrBoxFilter(Mat _src, Mat _dst, int ddepth, Size ksize, Point anchor, boolean normalize)
java: void sqrBoxFilter(Mat _src, Mat _dst, int ddepth, Size ksize, Point anchor)
java: void sqrBoxFilter(Mat _src, Mat _dst, int ddepth, Size ksize)
FUNC <void cv..undistort [ARG Mat src=, ARG Mat dst=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat newCameraMatrix=Mat()]>
java: void undistort(Mat src, Mat dst, Mat cameraMatrix, Mat distCoeffs, Mat newCameraMatrix)
java: void undistort(Mat src, Mat dst, Mat cameraMatrix, Mat distCoeffs)
FUNC <void cv..undistortPoints [ARG Mat src=, ARG Mat dst=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat R=, ARG Mat P=, ARG TermCriteria criteria=]>
java: void undistortPointsIter(Mat src, Mat dst, Mat cameraMatrix, Mat distCoeffs, Mat R, Mat P, TermCriteria criteria)
FUNC <void cv..undistortPoints [ARG Mat src=, ARG Mat dst=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Mat R=Mat(), ARG Mat P=Mat()]>
java: void undistortPoints(Mat src, Mat dst, Mat cameraMatrix, Mat distCoeffs, Mat R, Mat P)
java: void undistortPoints(Mat src, Mat dst, Mat cameraMatrix, Mat distCoeffs, Mat R)
java: void undistortPoints(Mat src, Mat dst, Mat cameraMatrix, Mat distCoeffs)
FUNC <void cv..warpAffine [ARG Mat src=, ARG Mat dst=, ARG Mat M=, ARG Size dsize=, ARG int flags=INTER_LINEAR, ARG int borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>
java: void warpAffine(Mat src, Mat dst, Mat M, Size dsize, int flags, int borderMode, Scalar borderValue)
java: void warpAffine(Mat src, Mat dst, Mat M, Size dsize, int flags, int borderMode)
java: void warpAffine(Mat src, Mat dst, Mat M, Size dsize, int flags)
java: void warpAffine(Mat src, Mat dst, Mat M, Size dsize)
FUNC <void cv..warpPerspective [ARG Mat src=, ARG Mat dst=, ARG Mat M=, ARG Size dsize=, ARG int flags=INTER_LINEAR, ARG int borderMode=BORDER_CONSTANT, ARG Scalar borderValue=Scalar()]>
java: void warpPerspective(Mat src, Mat dst, Mat M, Size dsize, int flags, int borderMode, Scalar borderValue)
java: void warpPerspective(Mat src, Mat dst, Mat M, Size dsize, int flags, int borderMode)
java: void warpPerspective(Mat src, Mat dst, Mat M, Size dsize, int flags)
java: void warpPerspective(Mat src, Mat dst, Mat M, Size dsize)
FUNC <void cv..warpPolar [ARG Mat src=, ARG Mat dst=, ARG Size dsize=, ARG Point2f center=, ARG double maxRadius=, ARG int flags=]>
java: void warpPolar(Mat src, Mat dst, Size dsize, Point center, double maxRadius, int flags)
FUNC <void cv..watershed [ARG Mat image=, ARG Mat markers=]>
java: void watershed(Mat image, Mat markers)
CLASS cv::.CLAHE : Algorithm
FUNC <Size cv.CLAHE.getTilesGridSize []>
java: Size getTilesGridSize()
FUNC <double cv.CLAHE.getClipLimit []>
java: double getClipLimit()
FUNC <void cv.CLAHE.apply [ARG Mat src=, ARG Mat dst=]>
java: void apply(Mat src, Mat dst)
FUNC <void cv.CLAHE.collectGarbage []>
java: void collectGarbage()
FUNC <void cv.CLAHE.setClipLimit [ARG double clipLimit=]>
java: void setClipLimit(double clipLimit)
FUNC <void cv.CLAHE.setTilesGridSize [ARG Size tileGridSize=]>
java: void setTilesGridSize(Size tileGridSize)
CLASS cv::.Subdiv2D : 
[CONST PTLOC_ERROR=-2, CONST PTLOC_OUTSIDE_RECT=-1, CONST PTLOC_INSIDE=0, CONST PTLOC_VERTEX=1, CONST PTLOC_ON_EDGE=2, CONST NEXT_AROUND_ORG=0x00, CONST NEXT_AROUND_DST=0x22, CONST PREV_AROUND_ORG=0x11, CONST PREV_AROUND_DST=0x33, CONST NEXT_AROUND_LEFT=0x13, CONST NEXT_AROUND_RIGHT=0x31, CONST PREV_AROUND_LEFT=0x20, CONST PREV_AROUND_RIGHT=0x02]
FUNC < cv.Subdiv2D.Subdiv2D [ARG Rect rect=]>
java:  Subdiv2D(Rect rect)
FUNC < cv.Subdiv2D.Subdiv2D []>
java:  Subdiv2D()
FUNC <Point2f cv.Subdiv2D.getVertex [ARG int vertex=, ARG int * firstEdge=0]>
java: Point getVertex(int vertex, int[] firstEdge)
java: Point getVertex(int vertex)
FUNC <int cv.Subdiv2D.edgeDst [ARG int edge=, ARG Point2f * dstpt=0]>
java: int edgeDst(int edge, Point dstpt)
java: int edgeDst(int edge)
FUNC <int cv.Subdiv2D.edgeOrg [ARG int edge=, ARG Point2f * orgpt=0]>
java: int edgeOrg(int edge, Point orgpt)
java: int edgeOrg(int edge)
FUNC <int cv.Subdiv2D.findNearest [ARG Point2f pt=, ARG Point2f * nearestPt=0]>
java: int findNearest(Point pt, Point nearestPt)
java: int findNearest(Point pt)
FUNC <int cv.Subdiv2D.getEdge [ARG int edge=, ARG int nextEdgeType=]>
java: int getEdge(int edge, int nextEdgeType)
FUNC <int cv.Subdiv2D.insert [ARG Point2f pt=]>
java: int insert(Point pt)
FUNC <int cv.Subdiv2D.locate [ARG Point2f pt=, ARG int edge=, ARG int vertex=]>
java: int locate(Point pt, int[] edge, int[] vertex)
FUNC <int cv.Subdiv2D.nextEdge [ARG int edge=]>
java: int nextEdge(int edge)
FUNC <int cv.Subdiv2D.rotateEdge [ARG int edge=, ARG int rotate=]>
java: int rotateEdge(int edge, int rotate)
FUNC <int cv.Subdiv2D.symEdge [ARG int edge=]>
java: int symEdge(int edge)
FUNC <void cv.Subdiv2D.getEdgeList [ARG vector_Vec4f edgeList=]>
java: void getEdgeList(MatOfFloat4 edgeList)
FUNC <void cv.Subdiv2D.getLeadingEdgeList [ARG vector_int leadingEdgeList=]>
java: void getLeadingEdgeList(MatOfInt leadingEdgeList)
FUNC <void cv.Subdiv2D.getTriangleList [ARG vector_Vec6f triangleList=]>
java: void getTriangleList(MatOfFloat6 triangleList)
FUNC <void cv.Subdiv2D.getVoronoiFacetList [ARG vector_int idx=, ARG vector_vector_Point2f facetList=, ARG vector_Point2f facetCenters=]>
java: void getVoronoiFacetList(MatOfInt idx, List<MatOfPoint2f> facetList, MatOfPoint2f facetCenters)
FUNC <void cv.Subdiv2D.initDelaunay [ARG Rect rect=]>
java: void initDelaunay(Rect rect)
FUNC <void cv.Subdiv2D.insert [ARG vector_Point2f ptvec=]>
java: void insert(MatOfPoint2f ptvec)
CLASS cv::.LineSegmentDetector : Algorithm
FUNC <int cv.LineSegmentDetector.compareSegments [ARG Size size=, ARG Mat lines1=, ARG Mat lines2=, ARG Mat _image=Mat()]>
java: int compareSegments(Size size, Mat lines1, Mat lines2, Mat _image)
java: int compareSegments(Size size, Mat lines1, Mat lines2)
FUNC <void cv.LineSegmentDetector.detect [ARG Mat _image=, ARG Mat _lines=, ARG Mat width=Mat(), ARG Mat prec=Mat(), ARG Mat nfa=Mat()]>
java: void detect(Mat _image, Mat _lines, Mat width, Mat prec, Mat nfa)
java: void detect(Mat _image, Mat _lines, Mat width, Mat prec)
java: void detect(Mat _image, Mat _lines, Mat width)
java: void detect(Mat _image, Mat _lines)
FUNC <void cv.LineSegmentDetector.drawSegments [ARG Mat _image=, ARG Mat lines=]>
java: void drawSegments(Mat _image, Mat lines)

=== MODULE: ml (C:/Users/d_dan/Desktop/opencv-master\modules/ml) ===


Files (2):
['C:/Users/d_dan/Desktop/opencv-master\\modules/ml\\include\\opencv2\\ml.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/ml\\include\\opencv2\\ml\\ml.hpp']

Common headers (0):
[]
ok: class CLASS ::.Ml : , name: Ml, base: 


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/ml\include\opencv2\ml.hpp =====
Namespaces: {'cv.ml', 'cv'}

--- Incoming ---
['const cv.ml.VAR_NUMERICAL', '0', [], [], None]
ok: CONST VAR_NUMERICAL=0

--- Incoming ---
['const cv.ml.VAR_ORDERED', '0', [], [], None]
ok: CONST VAR_ORDERED=0

--- Incoming ---
['const cv.ml.VAR_CATEGORICAL', '1', [], [], None]
ok: CONST VAR_CATEGORICAL=1

--- Incoming ---
['const cv.ml.TEST_ERROR', '0', [], [], None]
ok: CONST TEST_ERROR=0

--- Incoming ---
['const cv.ml.TRAIN_ERROR', '1', [], [], None]
ok: CONST TRAIN_ERROR=1

--- Incoming ---
['const cv.ml.ROW_SAMPLE', '0', [], [], None]
ok: CONST ROW_SAMPLE=0

--- Incoming ---
['const cv.ml.COL_SAMPLE', '1', [], [], None]
ok: CONST COL_SAMPLE=1

--- Incoming ---
[   'class cv.ml.ParamGrid',
    '',
    [],
    [   ['double', 'minVal', '', ['/RW']],
        ['double', 'maxVal', '', ['/RW']],
        ['double', 'logStep', '', ['/RW']]],
    None]
ok: class CLASS cv.ml::.ParamGrid : , name: ParamGrid, base: 

--- Incoming ---
[   'cv.ml.ParamGrid.create',
    'Ptr_ParamGrid',
    ['/S'],
    [   ['double', 'minVal', '0.', []],
        ['double', 'maxVal', '0.', []],
        ['double', 'logstep', '1.', []]],
    'Ptr<ParamGrid>']
ok: FUNC <Ptr_ParamGrid cv.ml.ParamGrid.create [ARG double minVal=0., ARG double maxVal=0., ARG double logstep=1.]>

--- Incoming ---
['class cv.ml.TrainData', '', [], [], None]
ok: class CLASS cv.ml::.TrainData : , name: TrainData, base: 

--- Incoming ---
['cv.ml.TrainData.getLayout', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.TrainData.getLayout []>

--- Incoming ---
['cv.ml.TrainData.getNTrainSamples', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.TrainData.getNTrainSamples []>

--- Incoming ---
['cv.ml.TrainData.getNTestSamples', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.TrainData.getNTestSamples []>

--- Incoming ---
['cv.ml.TrainData.getNSamples', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.TrainData.getNSamples []>

--- Incoming ---
['cv.ml.TrainData.getNVars', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.TrainData.getNVars []>

--- Incoming ---
['cv.ml.TrainData.getNAllVars', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.TrainData.getNAllVars []>

--- Incoming ---
[   'cv.ml.TrainData.getSample',
    'void',
    ['/C', '/V', '/PV'],
    [   ['Mat', 'varIdx', '', []],
        ['int', 'sidx', '', []],
        ['float*', 'buf', '', []]],
    'void']
ok: FUNC <void cv.ml.TrainData.getSample [ARG Mat varIdx=, ARG int sidx=, ARG float * buf=]>

--- Incoming ---
['cv.ml.TrainData.getSamples', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getSamples []>

--- Incoming ---
['cv.ml.TrainData.getMissing', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getMissing []>

--- Incoming ---
[   'cv.ml.TrainData.getTrainSamples',
    'Mat',
    ['/C', '/V', '/PV'],
    [   ['int', 'layout', 'ROW_SAMPLE', []],
        ['bool', 'compressSamples', 'true', []],
        ['bool', 'compressVars', 'true', []]],
    'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTrainSamples [ARG int layout=ROW_SAMPLE, ARG bool compressSamples=true, ARG bool compressVars=true]>

--- Incoming ---
['cv.ml.TrainData.getTrainResponses', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTrainResponses []>

--- Incoming ---
[   'cv.ml.TrainData.getTrainNormCatResponses',
    'Mat',
    ['/C', '/V', '/PV'],
    [],
    'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTrainNormCatResponses []>

--- Incoming ---
['cv.ml.TrainData.getTestResponses', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTestResponses []>

--- Incoming ---
[   'cv.ml.TrainData.getTestNormCatResponses',
    'Mat',
    ['/C', '/V', '/PV'],
    [],
    'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTestNormCatResponses []>

--- Incoming ---
['cv.ml.TrainData.getResponses', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getResponses []>

--- Incoming ---
['cv.ml.TrainData.getNormCatResponses', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getNormCatResponses []>

--- Incoming ---
['cv.ml.TrainData.getSampleWeights', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getSampleWeights []>

--- Incoming ---
['cv.ml.TrainData.getTrainSampleWeights', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTrainSampleWeights []>

--- Incoming ---
['cv.ml.TrainData.getTestSampleWeights', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTestSampleWeights []>

--- Incoming ---
['cv.ml.TrainData.getVarIdx', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getVarIdx []>

--- Incoming ---
['cv.ml.TrainData.getVarType', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getVarType []>

--- Incoming ---
['cv.ml.TrainData.getVarSymbolFlags', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getVarSymbolFlags []>

--- Incoming ---
['cv.ml.TrainData.getResponseType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.TrainData.getResponseType []>

--- Incoming ---
['cv.ml.TrainData.getTrainSampleIdx', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTrainSampleIdx []>

--- Incoming ---
['cv.ml.TrainData.getTestSampleIdx', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTestSampleIdx []>

--- Incoming ---
[   'cv.ml.TrainData.getValues',
    'void',
    ['/C', '/V', '/PV'],
    [   ['int', 'vi', '', []],
        ['Mat', 'sidx', '', []],
        ['float*', 'values', '', []]],
    'void']
ok: FUNC <void cv.ml.TrainData.getValues [ARG int vi=, ARG Mat sidx=, ARG float * values=]>

--- Incoming ---
['cv.ml.TrainData.getDefaultSubstValues', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getDefaultSubstValues []>

--- Incoming ---
[   'cv.ml.TrainData.getCatCount',
    'int',
    ['/C', '/V', '/PV'],
    [['int', 'vi', '', []]],
    'int']
ok: FUNC <int cv.ml.TrainData.getCatCount [ARG int vi=]>

--- Incoming ---
['cv.ml.TrainData.getClassLabels', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getClassLabels []>

--- Incoming ---
['cv.ml.TrainData.getCatOfs', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getCatOfs []>

--- Incoming ---
['cv.ml.TrainData.getCatMap', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getCatMap []>

--- Incoming ---
[   'cv.ml.TrainData.setTrainTestSplit',
    'void',
    ['/V', '/PV'],
    [['int', 'count', '', []], ['bool', 'shuffle', 'true', []]],
    'void']
ok: FUNC <void cv.ml.TrainData.setTrainTestSplit [ARG int count=, ARG bool shuffle=true]>

--- Incoming ---
[   'cv.ml.TrainData.setTrainTestSplitRatio',
    'void',
    ['/V', '/PV'],
    [['double', 'ratio', '', []], ['bool', 'shuffle', 'true', []]],
    'void']
ok: FUNC <void cv.ml.TrainData.setTrainTestSplitRatio [ARG double ratio=, ARG bool shuffle=true]>

--- Incoming ---
['cv.ml.TrainData.shuffleTrainTest', 'void', ['/V', '/PV'], [], 'void']
ok: FUNC <void cv.ml.TrainData.shuffleTrainTest []>

--- Incoming ---
['cv.ml.TrainData.getTestSamples', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.TrainData.getTestSamples []>

--- Incoming ---
[   'cv.ml.TrainData.getNames',
    'void',
    ['/C', '/V', '/PV'],
    [['vector_String', 'names', '', ['/Ref']]],
    'void']
ok: FUNC <void cv.ml.TrainData.getNames [ARG vector_String names=]>

--- Incoming ---
[   'cv.ml.TrainData.getSubVector',
    'Mat',
    ['/S'],
    [['Mat', 'vec', '', ['/C', '/Ref']], ['Mat', 'idx', '', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv.ml.TrainData.getSubVector [ARG Mat vec=, ARG Mat idx=]>

--- Incoming ---
[   'cv.ml.TrainData.create',
    'Ptr_TrainData',
    ['/S'],
    [   ['Mat', 'samples', '', []],
        ['int', 'layout', '', []],
        ['Mat', 'responses', '', []],
        ['Mat', 'varIdx', 'Mat()', []],
        ['Mat', 'sampleIdx', 'Mat()', []],
        ['Mat', 'sampleWeights', 'Mat()', []],
        ['Mat', 'varType', 'Mat()', []]],
    'Ptr<TrainData>']
ok: FUNC <Ptr_TrainData cv.ml.TrainData.create [ARG Mat samples=, ARG int layout=, ARG Mat responses=, ARG Mat varIdx=Mat(), ARG Mat sampleIdx=Mat(), ARG Mat sampleWeights=Mat(), ARG Mat varType=Mat()]>

--- Incoming ---
['class cv.ml.StatModel', ': cv::Algorithm', [], [], None]
ok: class CLASS cv.ml::.StatModel : Algorithm, name: StatModel, base: Algorithm

--- Incoming ---
['const cv.ml.StatModel.UPDATE_MODEL', '1', [], [], None]
ok: CONST UPDATE_MODEL=1

--- Incoming ---
['const cv.ml.StatModel.RAW_OUTPUT', '1', [], [], None]
ok: CONST RAW_OUTPUT=1

--- Incoming ---
['const cv.ml.StatModel.COMPRESSED_INPUT', '2', [], [], None]
ok: CONST COMPRESSED_INPUT=2

--- Incoming ---
['const cv.ml.StatModel.PREPROCESSED_INPUT', '4', [], [], None]
ok: CONST PREPROCESSED_INPUT=4

--- Incoming ---
['cv.ml.StatModel.getVarCount', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.StatModel.getVarCount []>

--- Incoming ---
['cv.ml.StatModel.empty', 'bool', ['/C', '/V'], [], 'bool']
ok: FUNC <bool cv.ml.StatModel.empty []>

--- Incoming ---
['cv.ml.StatModel.isTrained', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.ml.StatModel.isTrained []>

--- Incoming ---
['cv.ml.StatModel.isClassifier', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.ml.StatModel.isClassifier []>

--- Incoming ---
[   'cv.ml.StatModel.train',
    'bool',
    ['/V'],
    [   ['Ptr_TrainData', 'trainData', '', ['/C', '/Ref']],
        ['int', 'flags', '0', []]],
    'bool']
ok: FUNC <bool cv.ml.StatModel.train [ARG Ptr_TrainData trainData=, ARG int flags=0]>

--- Incoming ---
[   'cv.ml.StatModel.train',
    'bool',
    ['/V'],
    [   ['Mat', 'samples', '', []],
        ['int', 'layout', '', []],
        ['Mat', 'responses', '', []]],
    'bool']
ok: FUNC <bool cv.ml.StatModel.train [ARG Mat samples=, ARG int layout=, ARG Mat responses=]>

--- Incoming ---
[   'cv.ml.StatModel.calcError',
    'float',
    ['/C', '/V'],
    [   ['Ptr_TrainData', 'data', '', ['/C', '/Ref']],
        ['bool', 'test', '', []],
        ['Mat', 'resp', '', ['/O']]],
    'float']
ok: FUNC <float cv.ml.StatModel.calcError [ARG Ptr_TrainData data=, ARG bool test=, ARG Mat resp=]>

--- Incoming ---
[   'cv.ml.StatModel.predict',
    'float',
    ['/C', '/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['Mat', 'results', 'Mat()', ['/O']],
        ['int', 'flags', '0', []]],
    'float']
ok: FUNC <float cv.ml.StatModel.predict [ARG Mat samples=, ARG Mat results=Mat(), ARG int flags=0]>

--- Incoming ---
['class cv.ml.NormalBayesClassifier', ': cv::ml::StatModel', [], [], None]
ok: class CLASS cv.ml::.NormalBayesClassifier : StatModel, name: NormalBayesClassifier, base: StatModel

--- Incoming ---
[   'cv.ml.NormalBayesClassifier.predictProb',
    'float',
    ['/C', '/V', '/PV'],
    [   ['Mat', 'inputs', '', []],
        ['Mat', 'outputs', '', ['/O']],
        ['Mat', 'outputProbs', '', ['/O']],
        ['int', 'flags', '0', []]],
    'float']
ok: FUNC <float cv.ml.NormalBayesClassifier.predictProb [ARG Mat inputs=, ARG Mat outputs=, ARG Mat outputProbs=, ARG int flags=0]>

--- Incoming ---
[   'cv.ml.NormalBayesClassifier.create',
    'Ptr_NormalBayesClassifier',
    ['/S'],
    [],
    'Ptr<NormalBayesClassifier>']
ok: FUNC <Ptr_NormalBayesClassifier cv.ml.NormalBayesClassifier.create []>

--- Incoming ---
[   'cv.ml.NormalBayesClassifier.load',
    'Ptr_NormalBayesClassifier',
    ['/S'],
    [   ['String', 'filepath', '', ['/C', '/Ref']],
        ['String', 'nodeName', 'String()', ['/C', '/Ref']]],
    'Ptr<NormalBayesClassifier>']
ok: FUNC <Ptr_NormalBayesClassifier cv.ml.NormalBayesClassifier.load [ARG String filepath=, ARG String nodeName=String()]>

--- Incoming ---
['class cv.ml.KNearest', ': cv::ml::StatModel', [], [], None]
ok: class CLASS cv.ml::.KNearest : StatModel, name: KNearest, base: StatModel

--- Incoming ---
['cv.ml.KNearest.getDefaultK', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.KNearest.getDefaultK []>

--- Incoming ---
[   'cv.ml.KNearest.setDefaultK',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.KNearest.setDefaultK [ARG int val=]>

--- Incoming ---
['cv.ml.KNearest.getIsClassifier', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.ml.KNearest.getIsClassifier []>

--- Incoming ---
[   'cv.ml.KNearest.setIsClassifier',
    'void',
    ['/V', '/PV'],
    [['bool', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.KNearest.setIsClassifier [ARG bool val=]>

--- Incoming ---
['cv.ml.KNearest.getEmax', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.KNearest.getEmax []>

--- Incoming ---
[   'cv.ml.KNearest.setEmax',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.KNearest.setEmax [ARG int val=]>

--- Incoming ---
['cv.ml.KNearest.getAlgorithmType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.KNearest.getAlgorithmType []>

--- Incoming ---
[   'cv.ml.KNearest.setAlgorithmType',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.KNearest.setAlgorithmType [ARG int val=]>

--- Incoming ---
[   'cv.ml.KNearest.findNearest',
    'float',
    ['/C', '/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['int', 'k', '', []],
        ['Mat', 'results', '', ['/O']],
        ['Mat', 'neighborResponses', 'Mat()', ['/O']],
        ['Mat', 'dist', 'Mat()', ['/O']]],
    'float']
ok: FUNC <float cv.ml.KNearest.findNearest [ARG Mat samples=, ARG int k=, ARG Mat results=, ARG Mat neighborResponses=Mat(), ARG Mat dist=Mat()]>

--- Incoming ---
['const cv.ml.KNearest.BRUTE_FORCE', '1', [], [], None]
ok: CONST BRUTE_FORCE=1

--- Incoming ---
['const cv.ml.KNearest.KDTREE', '2', [], [], None]
ok: CONST KDTREE=2

--- Incoming ---
['cv.ml.KNearest.create', 'Ptr_KNearest', ['/S'], [], 'Ptr<KNearest>']
ok: FUNC <Ptr_KNearest cv.ml.KNearest.create []>

--- Incoming ---
['class cv.ml.SVM', ': cv::ml::StatModel', [], [], None]
ok: class CLASS cv.ml::.SVM : StatModel, name: SVM, base: StatModel

--- Incoming ---
['cv.ml.SVM.getType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.SVM.getType []>

--- Incoming ---
['cv.ml.SVM.setType', 'void', ['/V', '/PV'], [['int', 'val', '', []]], 'void']
ok: FUNC <void cv.ml.SVM.setType [ARG int val=]>

--- Incoming ---
['cv.ml.SVM.getGamma', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.SVM.getGamma []>

--- Incoming ---
[   'cv.ml.SVM.setGamma',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.SVM.setGamma [ARG double val=]>

--- Incoming ---
['cv.ml.SVM.getCoef0', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.SVM.getCoef0 []>

--- Incoming ---
[   'cv.ml.SVM.setCoef0',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.SVM.setCoef0 [ARG double val=]>

--- Incoming ---
['cv.ml.SVM.getDegree', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.SVM.getDegree []>

--- Incoming ---
[   'cv.ml.SVM.setDegree',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.SVM.setDegree [ARG double val=]>

--- Incoming ---
['cv.ml.SVM.getC', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.SVM.getC []>

--- Incoming ---
['cv.ml.SVM.setC', 'void', ['/V', '/PV'], [['double', 'val', '', []]], 'void']
ok: FUNC <void cv.ml.SVM.setC [ARG double val=]>

--- Incoming ---
['cv.ml.SVM.getNu', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.SVM.getNu []>

--- Incoming ---
['cv.ml.SVM.setNu', 'void', ['/V', '/PV'], [['double', 'val', '', []]], 'void']
ok: FUNC <void cv.ml.SVM.setNu [ARG double val=]>

--- Incoming ---
['cv.ml.SVM.getP', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.SVM.getP []>

--- Incoming ---
['cv.ml.SVM.setP', 'void', ['/V', '/PV'], [['double', 'val', '', []]], 'void']
ok: FUNC <void cv.ml.SVM.setP [ARG double val=]>

--- Incoming ---
['cv.ml.SVM.getClassWeights', 'Mat', ['/C', '/V', '/PV'], [], 'cv::Mat']
ok: FUNC <Mat cv.ml.SVM.getClassWeights []>

--- Incoming ---
[   'cv.ml.SVM.setClassWeights',
    'void',
    ['/V', '/PV'],
    [['Mat', 'val', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.ml.SVM.setClassWeights [ARG Mat val=]>

--- Incoming ---
[   'cv.ml.SVM.getTermCriteria',
    'TermCriteria',
    ['/C', '/V', '/PV'],
    [],
    'cv::TermCriteria']
ok: FUNC <TermCriteria cv.ml.SVM.getTermCriteria []>

--- Incoming ---
[   'cv.ml.SVM.setTermCriteria',
    'void',
    ['/V', '/PV'],
    [['TermCriteria', 'val', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.ml.SVM.setTermCriteria [ARG TermCriteria val=]>

--- Incoming ---
['cv.ml.SVM.getKernelType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.SVM.getKernelType []>

--- Incoming ---
[   'cv.ml.SVM.setKernel',
    'void',
    ['/V', '/PV'],
    [['int', 'kernelType', '', []]],
    'void']
ok: FUNC <void cv.ml.SVM.setKernel [ARG int kernelType=]>

--- Incoming ---
['const cv.ml.SVM.C_SVC', '100', [], [], None]
ok: CONST C_SVC=100

--- Incoming ---
['const cv.ml.SVM.NU_SVC', '101', [], [], None]
ok: CONST NU_SVC=101

--- Incoming ---
['const cv.ml.SVM.ONE_CLASS', '102', [], [], None]
ok: CONST ONE_CLASS=102

--- Incoming ---
['const cv.ml.SVM.EPS_SVR', '103', [], [], None]
ok: CONST EPS_SVR=103

--- Incoming ---
['const cv.ml.SVM.NU_SVR', '104', [], [], None]
ok: CONST NU_SVR=104

--- Incoming ---
['const cv.ml.SVM.CUSTOM', '-1', [], [], None]
ok: CONST CUSTOM=-1

--- Incoming ---
['const cv.ml.SVM.LINEAR', '0', [], [], None]
ok: CONST LINEAR=0

--- Incoming ---
['const cv.ml.SVM.POLY', '1', [], [], None]
ok: CONST POLY=1

--- Incoming ---
['const cv.ml.SVM.RBF', '2', [], [], None]
ok: CONST RBF=2

--- Incoming ---
['const cv.ml.SVM.SIGMOID', '3', [], [], None]
ok: CONST SIGMOID=3

--- Incoming ---
['const cv.ml.SVM.CHI2', '4', [], [], None]
ok: CONST CHI2=4

--- Incoming ---
['const cv.ml.SVM.INTER', '5', [], [], None]
ok: CONST INTER=5

--- Incoming ---
['const cv.ml.SVM.C', '0', [], [], None]
ok: CONST C=0

--- Incoming ---
['const cv.ml.SVM.GAMMA', '1', [], [], None]
ok: CONST GAMMA=1

--- Incoming ---
['const cv.ml.SVM.P', '2', [], [], None]
ok: CONST P=2

--- Incoming ---
['const cv.ml.SVM.NU', '3', [], [], None]
ok: CONST NU=3

--- Incoming ---
['const cv.ml.SVM.COEF', '4', [], [], None]
ok: CONST COEF=4

--- Incoming ---
['const cv.ml.SVM.DEGREE', '5', [], [], None]
ok: CONST DEGREE=5

--- Incoming ---
[   'cv.ml.SVM.trainAuto',
    'bool',
    ['/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['int', 'layout', '', []],
        ['Mat', 'responses', '', []],
        ['int', 'kFold', '10', []],
        ['Ptr_ParamGrid', 'Cgrid', 'SVM::getDefaultGridPtr(SVM::C)', []],
        [   'Ptr_ParamGrid',
            'gammaGrid',
            'SVM::getDefaultGridPtr(SVM::GAMMA)',
            []],
        ['Ptr_ParamGrid', 'pGrid', 'SVM::getDefaultGridPtr(SVM::P)', []],
        ['Ptr_ParamGrid', 'nuGrid', 'SVM::getDefaultGridPtr(SVM::NU)', []],
        ['Ptr_ParamGrid', 'coeffGrid', 'SVM::getDefaultGridPtr(SVM::COEF)', []],
        [   'Ptr_ParamGrid',
            'degreeGrid',
            'SVM::getDefaultGridPtr(SVM::DEGREE)',
            []],
        ['bool', 'balanced', 'false', []]],
    'bool']
ok: FUNC <bool cv.ml.SVM.trainAuto [ARG Mat samples=, ARG int layout=, ARG Mat responses=, ARG int kFold=10, ARG Ptr_ParamGrid Cgrid=SVM::getDefaultGridPtr(SVM::C), ARG Ptr_ParamGrid gammaGrid=SVM::getDefaultGridPtr(SVM::GAMMA), ARG Ptr_ParamGrid pGrid=SVM::getDefaultGridPtr(SVM::P), ARG Ptr_ParamGrid nuGrid=SVM::getDefaultGridPtr(SVM::NU), ARG Ptr_ParamGrid coeffGrid=SVM::getDefaultGridPtr(SVM::COEF), ARG Ptr_ParamGrid degreeGrid=SVM::getDefaultGridPtr(SVM::DEGREE), ARG bool balanced=false]>

--- Incoming ---
['cv.ml.SVM.getSupportVectors', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.SVM.getSupportVectors []>

--- Incoming ---
[   'cv.ml.SVM.getUncompressedSupportVectors',
    'Mat',
    ['/C', '/V', '/PV'],
    [],
    'Mat']
ok: FUNC <Mat cv.ml.SVM.getUncompressedSupportVectors []>

--- Incoming ---
[   'cv.ml.SVM.getDecisionFunction',
    'double',
    ['/C', '/V', '/PV'],
    [   ['int', 'i', '', []],
        ['Mat', 'alpha', '', ['/O']],
        ['Mat', 'svidx', '', ['/O']]],
    'double']
ok: FUNC <double cv.ml.SVM.getDecisionFunction [ARG int i=, ARG Mat alpha=, ARG Mat svidx=]>

--- Incoming ---
[   'cv.ml.SVM.getDefaultGridPtr',
    'Ptr_ParamGrid',
    ['/S'],
    [['int', 'param_id', '', []]],
    'Ptr<ParamGrid>']
ok: FUNC <Ptr_ParamGrid cv.ml.SVM.getDefaultGridPtr [ARG int param_id=]>

--- Incoming ---
['cv.ml.SVM.create', 'Ptr_SVM', ['/S'], [], 'Ptr<SVM>']
ok: FUNC <Ptr_SVM cv.ml.SVM.create []>

--- Incoming ---
[   'cv.ml.SVM.load',
    'Ptr_SVM',
    ['/S'],
    [['String', 'filepath', '', ['/C', '/Ref']]],
    'Ptr<SVM>']
ok: FUNC <Ptr_SVM cv.ml.SVM.load [ARG String filepath=]>

--- Incoming ---
['class cv.ml.EM', ': cv::ml::StatModel', [], [], None]
ok: class CLASS cv.ml::.EM : StatModel, name: EM, base: StatModel

--- Incoming ---
['const cv.ml.EM.COV_MAT_SPHERICAL', '0', [], [], None]
ok: CONST COV_MAT_SPHERICAL=0

--- Incoming ---
['const cv.ml.EM.COV_MAT_DIAGONAL', '1', [], [], None]
ok: CONST COV_MAT_DIAGONAL=1

--- Incoming ---
['const cv.ml.EM.COV_MAT_GENERIC', '2', [], [], None]
ok: CONST COV_MAT_GENERIC=2

--- Incoming ---
['const cv.ml.EM.COV_MAT_DEFAULT', 'COV_MAT_DIAGONAL', [], [], None]
ok: CONST COV_MAT_DEFAULT=COV_MAT_DIAGONAL

--- Incoming ---
['const cv.ml.EM.DEFAULT_NCLUSTERS', '5', [], [], None]
ok: CONST DEFAULT_NCLUSTERS=5

--- Incoming ---
['const cv.ml.EM.DEFAULT_MAX_ITERS', '100', [], [], None]
ok: CONST DEFAULT_MAX_ITERS=100

--- Incoming ---
['const cv.ml.EM.START_E_STEP', '1', [], [], None]
ok: CONST START_E_STEP=1

--- Incoming ---
['const cv.ml.EM.START_M_STEP', '2', [], [], None]
ok: CONST START_M_STEP=2

--- Incoming ---
['const cv.ml.EM.START_AUTO_STEP', '0', [], [], None]
ok: CONST START_AUTO_STEP=0

--- Incoming ---
['cv.ml.EM.getClustersNumber', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.EM.getClustersNumber []>

--- Incoming ---
[   'cv.ml.EM.setClustersNumber',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.EM.setClustersNumber [ARG int val=]>

--- Incoming ---
['cv.ml.EM.getCovarianceMatrixType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.EM.getCovarianceMatrixType []>

--- Incoming ---
[   'cv.ml.EM.setCovarianceMatrixType',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.EM.setCovarianceMatrixType [ARG int val=]>

--- Incoming ---
[   'cv.ml.EM.getTermCriteria',
    'TermCriteria',
    ['/C', '/V', '/PV'],
    [],
    'TermCriteria']
ok: FUNC <TermCriteria cv.ml.EM.getTermCriteria []>

--- Incoming ---
[   'cv.ml.EM.setTermCriteria',
    'void',
    ['/V', '/PV'],
    [['TermCriteria', 'val', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.ml.EM.setTermCriteria [ARG TermCriteria val=]>

--- Incoming ---
['cv.ml.EM.getWeights', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.EM.getWeights []>

--- Incoming ---
['cv.ml.EM.getMeans', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.EM.getMeans []>

--- Incoming ---
[   'cv.ml.EM.getCovs',
    'void',
    ['/C', '/V', '/PV'],
    [['vector_Mat', 'covs', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.ml.EM.getCovs [ARG vector_Mat covs=]>

--- Incoming ---
[   'cv.ml.EM.predict',
    'float',
    ['/C', '/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['Mat', 'results', 'Mat()', ['/O']],
        ['int', 'flags', '0', []]],
    'float']
ok: FUNC <float cv.ml.EM.predict [ARG Mat samples=, ARG Mat results=Mat(), ARG int flags=0]>

--- Incoming ---
[   'cv.ml.EM.predict2',
    'Vec2d',
    ['/C', '/V', '/PV'],
    [['Mat', 'sample', '', []], ['Mat', 'probs', '', ['/O']]],
    'Vec2d']
ok: FUNC <Vec2d cv.ml.EM.predict2 [ARG Mat sample=, ARG Mat probs=]>

--- Incoming ---
[   'cv.ml.EM.trainEM',
    'bool',
    ['/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['Mat', 'logLikelihoods', 'Mat()', ['/O']],
        ['Mat', 'labels', 'Mat()', ['/O']],
        ['Mat', 'probs', 'Mat()', ['/O']]],
    'bool']
ok: FUNC <bool cv.ml.EM.trainEM [ARG Mat samples=, ARG Mat logLikelihoods=Mat(), ARG Mat labels=Mat(), ARG Mat probs=Mat()]>

--- Incoming ---
[   'cv.ml.EM.trainE',
    'bool',
    ['/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['Mat', 'means0', '', []],
        ['Mat', 'covs0', 'Mat()', []],
        ['Mat', 'weights0', 'Mat()', []],
        ['Mat', 'logLikelihoods', 'Mat()', ['/O']],
        ['Mat', 'labels', 'Mat()', ['/O']],
        ['Mat', 'probs', 'Mat()', ['/O']]],
    'bool']
ok: FUNC <bool cv.ml.EM.trainE [ARG Mat samples=, ARG Mat means0=, ARG Mat covs0=Mat(), ARG Mat weights0=Mat(), ARG Mat logLikelihoods=Mat(), ARG Mat labels=Mat(), ARG Mat probs=Mat()]>

--- Incoming ---
[   'cv.ml.EM.trainM',
    'bool',
    ['/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['Mat', 'probs0', '', []],
        ['Mat', 'logLikelihoods', 'Mat()', ['/O']],
        ['Mat', 'labels', 'Mat()', ['/O']],
        ['Mat', 'probs', 'Mat()', ['/O']]],
    'bool']
ok: FUNC <bool cv.ml.EM.trainM [ARG Mat samples=, ARG Mat probs0=, ARG Mat logLikelihoods=Mat(), ARG Mat labels=Mat(), ARG Mat probs=Mat()]>

--- Incoming ---
['cv.ml.EM.create', 'Ptr_EM', ['/S'], [], 'Ptr<EM>']
ok: FUNC <Ptr_EM cv.ml.EM.create []>

--- Incoming ---
[   'cv.ml.EM.load',
    'Ptr_EM',
    ['/S'],
    [   ['String', 'filepath', '', ['/C', '/Ref']],
        ['String', 'nodeName', 'String()', ['/C', '/Ref']]],
    'Ptr<EM>']
ok: FUNC <Ptr_EM cv.ml.EM.load [ARG String filepath=, ARG String nodeName=String()]>

--- Incoming ---
['class cv.ml.DTrees', ': cv::ml::StatModel', [], [], None]
ok: class CLASS cv.ml::.DTrees : StatModel, name: DTrees, base: StatModel

--- Incoming ---
['const cv.ml.DTrees.PREDICT_AUTO', '0', [], [], None]
ok: CONST PREDICT_AUTO=0

--- Incoming ---
['const cv.ml.DTrees.PREDICT_SUM', '(1<<8)', [], [], None]
ok: CONST PREDICT_SUM=(1<<8)

--- Incoming ---
['const cv.ml.DTrees.PREDICT_MAX_VOTE', '(2<<8)', [], [], None]
ok: CONST PREDICT_MAX_VOTE=(2<<8)

--- Incoming ---
['const cv.ml.DTrees.PREDICT_MASK', '(3<<8)', [], [], None]
ok: CONST PREDICT_MASK=(3<<8)

--- Incoming ---
['cv.ml.DTrees.getMaxCategories', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.DTrees.getMaxCategories []>

--- Incoming ---
[   'cv.ml.DTrees.setMaxCategories',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.DTrees.setMaxCategories [ARG int val=]>

--- Incoming ---
['cv.ml.DTrees.getMaxDepth', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.DTrees.getMaxDepth []>

--- Incoming ---
[   'cv.ml.DTrees.setMaxDepth',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.DTrees.setMaxDepth [ARG int val=]>

--- Incoming ---
['cv.ml.DTrees.getMinSampleCount', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.DTrees.getMinSampleCount []>

--- Incoming ---
[   'cv.ml.DTrees.setMinSampleCount',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.DTrees.setMinSampleCount [ARG int val=]>

--- Incoming ---
['cv.ml.DTrees.getCVFolds', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.DTrees.getCVFolds []>

--- Incoming ---
[   'cv.ml.DTrees.setCVFolds',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.DTrees.setCVFolds [ARG int val=]>

--- Incoming ---
['cv.ml.DTrees.getUseSurrogates', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.ml.DTrees.getUseSurrogates []>

--- Incoming ---
[   'cv.ml.DTrees.setUseSurrogates',
    'void',
    ['/V', '/PV'],
    [['bool', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.DTrees.setUseSurrogates [ARG bool val=]>

--- Incoming ---
['cv.ml.DTrees.getUse1SERule', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.ml.DTrees.getUse1SERule []>

--- Incoming ---
[   'cv.ml.DTrees.setUse1SERule',
    'void',
    ['/V', '/PV'],
    [['bool', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.DTrees.setUse1SERule [ARG bool val=]>

--- Incoming ---
['cv.ml.DTrees.getTruncatePrunedTree', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.ml.DTrees.getTruncatePrunedTree []>

--- Incoming ---
[   'cv.ml.DTrees.setTruncatePrunedTree',
    'void',
    ['/V', '/PV'],
    [['bool', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.DTrees.setTruncatePrunedTree [ARG bool val=]>

--- Incoming ---
[   'cv.ml.DTrees.getRegressionAccuracy',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.ml.DTrees.getRegressionAccuracy []>

--- Incoming ---
[   'cv.ml.DTrees.setRegressionAccuracy',
    'void',
    ['/V', '/PV'],
    [['float', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.DTrees.setRegressionAccuracy [ARG float val=]>

--- Incoming ---
['cv.ml.DTrees.getPriors', 'Mat', ['/C', '/V', '/PV'], [], 'cv::Mat']
ok: FUNC <Mat cv.ml.DTrees.getPriors []>

--- Incoming ---
[   'cv.ml.DTrees.setPriors',
    'void',
    ['/V', '/PV'],
    [['Mat', 'val', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.ml.DTrees.setPriors [ARG Mat val=]>

--- Incoming ---
['cv.ml.DTrees.create', 'Ptr_DTrees', ['/S'], [], 'Ptr<DTrees>']
ok: FUNC <Ptr_DTrees cv.ml.DTrees.create []>

--- Incoming ---
[   'cv.ml.DTrees.load',
    'Ptr_DTrees',
    ['/S'],
    [   ['String', 'filepath', '', ['/C', '/Ref']],
        ['String', 'nodeName', 'String()', ['/C', '/Ref']]],
    'Ptr<DTrees>']
ok: FUNC <Ptr_DTrees cv.ml.DTrees.load [ARG String filepath=, ARG String nodeName=String()]>

--- Incoming ---
['class cv.ml.RTrees', ': cv::ml::DTrees', [], [], None]
ok: class CLASS cv.ml::.RTrees : DTrees, name: RTrees, base: DTrees

--- Incoming ---
[   'cv.ml.RTrees.getCalculateVarImportance',
    'bool',
    ['/C', '/V', '/PV'],
    [],
    'bool']
ok: FUNC <bool cv.ml.RTrees.getCalculateVarImportance []>

--- Incoming ---
[   'cv.ml.RTrees.setCalculateVarImportance',
    'void',
    ['/V', '/PV'],
    [['bool', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.RTrees.setCalculateVarImportance [ARG bool val=]>

--- Incoming ---
['cv.ml.RTrees.getActiveVarCount', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.RTrees.getActiveVarCount []>

--- Incoming ---
[   'cv.ml.RTrees.setActiveVarCount',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.RTrees.setActiveVarCount [ARG int val=]>

--- Incoming ---
[   'cv.ml.RTrees.getTermCriteria',
    'TermCriteria',
    ['/C', '/V', '/PV'],
    [],
    'TermCriteria']
ok: FUNC <TermCriteria cv.ml.RTrees.getTermCriteria []>

--- Incoming ---
[   'cv.ml.RTrees.setTermCriteria',
    'void',
    ['/V', '/PV'],
    [['TermCriteria', 'val', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.ml.RTrees.setTermCriteria [ARG TermCriteria val=]>

--- Incoming ---
['cv.ml.RTrees.getVarImportance', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.RTrees.getVarImportance []>

--- Incoming ---
[   'cv.ml.RTrees.getVotes',
    'void',
    ['/C', '/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['Mat', 'results', '', ['/O']],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv.ml.RTrees.getVotes [ARG Mat samples=, ARG Mat results=, ARG int flags=]>

--- Incoming ---
['cv.ml.RTrees.create', 'Ptr_RTrees', ['/S'], [], 'Ptr<RTrees>']
ok: FUNC <Ptr_RTrees cv.ml.RTrees.create []>

--- Incoming ---
[   'cv.ml.RTrees.load',
    'Ptr_RTrees',
    ['/S'],
    [   ['String', 'filepath', '', ['/C', '/Ref']],
        ['String', 'nodeName', 'String()', ['/C', '/Ref']]],
    'Ptr<RTrees>']
ok: FUNC <Ptr_RTrees cv.ml.RTrees.load [ARG String filepath=, ARG String nodeName=String()]>

--- Incoming ---
['class cv.ml.Boost', ': cv::ml::DTrees', [], [], None]
ok: class CLASS cv.ml::.Boost : DTrees, name: Boost, base: DTrees

--- Incoming ---
['cv.ml.Boost.getBoostType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.Boost.getBoostType []>

--- Incoming ---
[   'cv.ml.Boost.setBoostType',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.Boost.setBoostType [ARG int val=]>

--- Incoming ---
['cv.ml.Boost.getWeakCount', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.Boost.getWeakCount []>

--- Incoming ---
[   'cv.ml.Boost.setWeakCount',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.Boost.setWeakCount [ARG int val=]>

--- Incoming ---
['cv.ml.Boost.getWeightTrimRate', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.Boost.getWeightTrimRate []>

--- Incoming ---
[   'cv.ml.Boost.setWeightTrimRate',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.Boost.setWeightTrimRate [ARG double val=]>

--- Incoming ---
['const cv.ml.Boost.DISCRETE', '0', [], [], None]
ok: CONST DISCRETE=0

--- Incoming ---
['const cv.ml.Boost.REAL', '1', [], [], None]
ok: CONST REAL=1

--- Incoming ---
['const cv.ml.Boost.LOGIT', '2', [], [], None]
ok: CONST LOGIT=2

--- Incoming ---
['const cv.ml.Boost.GENTLE', '3', [], [], None]
ok: CONST GENTLE=3

--- Incoming ---
['cv.ml.Boost.create', 'Ptr_Boost', ['/S'], [], 'Ptr<Boost>']
ok: FUNC <Ptr_Boost cv.ml.Boost.create []>

--- Incoming ---
[   'cv.ml.Boost.load',
    'Ptr_Boost',
    ['/S'],
    [   ['String', 'filepath', '', ['/C', '/Ref']],
        ['String', 'nodeName', 'String()', ['/C', '/Ref']]],
    'Ptr<Boost>']
ok: FUNC <Ptr_Boost cv.ml.Boost.load [ARG String filepath=, ARG String nodeName=String()]>

--- Incoming ---
['class cv.ml.ANN_MLP', ': cv::ml::StatModel', [], [], None]
ok: class CLASS cv.ml::.ANN_MLP : StatModel, name: ANN_MLP, base: StatModel

--- Incoming ---
['const cv.ml.ANN_MLP.BACKPROP', '0', [], [], None]
ok: CONST BACKPROP=0

--- Incoming ---
['const cv.ml.ANN_MLP.RPROP', '1', [], [], None]
ok: CONST RPROP=1

--- Incoming ---
['const cv.ml.ANN_MLP.ANNEAL', '2', [], [], None]
ok: CONST ANNEAL=2

--- Incoming ---
[   'cv.ml.ANN_MLP.setTrainMethod',
    'void',
    ['/V', '/PV'],
    [   ['int', 'method', '', []],
        ['double', 'param1', '0', []],
        ['double', 'param2', '0', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setTrainMethod [ARG int method=, ARG double param1=0, ARG double param2=0]>

--- Incoming ---
['cv.ml.ANN_MLP.getTrainMethod', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.ANN_MLP.getTrainMethod []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setActivationFunction',
    'void',
    ['/V', '/PV'],
    [   ['int', 'type', '', []],
        ['double', 'param1', '0', []],
        ['double', 'param2', '0', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setActivationFunction [ARG int type=, ARG double param1=0, ARG double param2=0]>

--- Incoming ---
[   'cv.ml.ANN_MLP.setLayerSizes',
    'void',
    ['/V', '/PV'],
    [['Mat', '_layer_sizes', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setLayerSizes [ARG Mat _layer_sizes=]>

--- Incoming ---
['cv.ml.ANN_MLP.getLayerSizes', 'Mat', ['/C', '/V', '/PV'], [], 'cv::Mat']
ok: FUNC <Mat cv.ml.ANN_MLP.getLayerSizes []>

--- Incoming ---
[   'cv.ml.ANN_MLP.getTermCriteria',
    'TermCriteria',
    ['/C', '/V', '/PV'],
    [],
    'TermCriteria']
ok: FUNC <TermCriteria cv.ml.ANN_MLP.getTermCriteria []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setTermCriteria',
    'void',
    ['/V', '/PV'],
    [['TermCriteria', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setTermCriteria [ARG TermCriteria val=]>

--- Incoming ---
[   'cv.ml.ANN_MLP.getBackpropWeightScale',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.ml.ANN_MLP.getBackpropWeightScale []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setBackpropWeightScale',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setBackpropWeightScale [ARG double val=]>

--- Incoming ---
[   'cv.ml.ANN_MLP.getBackpropMomentumScale',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.ml.ANN_MLP.getBackpropMomentumScale []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setBackpropMomentumScale',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setBackpropMomentumScale [ARG double val=]>

--- Incoming ---
['cv.ml.ANN_MLP.getRpropDW0', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.ANN_MLP.getRpropDW0 []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setRpropDW0',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setRpropDW0 [ARG double val=]>

--- Incoming ---
['cv.ml.ANN_MLP.getRpropDWPlus', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.ANN_MLP.getRpropDWPlus []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setRpropDWPlus',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setRpropDWPlus [ARG double val=]>

--- Incoming ---
['cv.ml.ANN_MLP.getRpropDWMinus', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.ANN_MLP.getRpropDWMinus []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setRpropDWMinus',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setRpropDWMinus [ARG double val=]>

--- Incoming ---
['cv.ml.ANN_MLP.getRpropDWMin', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.ANN_MLP.getRpropDWMin []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setRpropDWMin',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setRpropDWMin [ARG double val=]>

--- Incoming ---
['cv.ml.ANN_MLP.getRpropDWMax', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.ANN_MLP.getRpropDWMax []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setRpropDWMax',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setRpropDWMax [ARG double val=]>

--- Incoming ---
['cv.ml.ANN_MLP.getAnnealInitialT', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.ANN_MLP.getAnnealInitialT []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setAnnealInitialT',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setAnnealInitialT [ARG double val=]>

--- Incoming ---
['cv.ml.ANN_MLP.getAnnealFinalT', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ml.ANN_MLP.getAnnealFinalT []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setAnnealFinalT',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setAnnealFinalT [ARG double val=]>

--- Incoming ---
[   'cv.ml.ANN_MLP.getAnnealCoolingRatio',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.ml.ANN_MLP.getAnnealCoolingRatio []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setAnnealCoolingRatio',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setAnnealCoolingRatio [ARG double val=]>

--- Incoming ---
['cv.ml.ANN_MLP.getAnnealItePerStep', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.ANN_MLP.getAnnealItePerStep []>

--- Incoming ---
[   'cv.ml.ANN_MLP.setAnnealItePerStep',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.ANN_MLP.setAnnealItePerStep [ARG int val=]>

--- Incoming ---
['const cv.ml.ANN_MLP.IDENTITY', '0', [], [], None]
ok: CONST IDENTITY=0

--- Incoming ---
['const cv.ml.ANN_MLP.SIGMOID_SYM', '1', [], [], None]
ok: CONST SIGMOID_SYM=1

--- Incoming ---
['const cv.ml.ANN_MLP.GAUSSIAN', '2', [], [], None]
ok: CONST GAUSSIAN=2

--- Incoming ---
['const cv.ml.ANN_MLP.RELU', '3', [], [], None]
ok: CONST RELU=3

--- Incoming ---
['const cv.ml.ANN_MLP.LEAKYRELU', '4', [], [], None]
ok: CONST LEAKYRELU=4

--- Incoming ---
['const cv.ml.ANN_MLP.UPDATE_WEIGHTS', '1', [], [], None]
ok: CONST UPDATE_WEIGHTS=1

--- Incoming ---
['const cv.ml.ANN_MLP.NO_INPUT_SCALE', '2', [], [], None]
ok: CONST NO_INPUT_SCALE=2

--- Incoming ---
['const cv.ml.ANN_MLP.NO_OUTPUT_SCALE', '4', [], [], None]
ok: CONST NO_OUTPUT_SCALE=4

--- Incoming ---
[   'cv.ml.ANN_MLP.getWeights',
    'Mat',
    ['/C', '/V', '/PV'],
    [['int', 'layerIdx', '', []]],
    'Mat']
ok: FUNC <Mat cv.ml.ANN_MLP.getWeights [ARG int layerIdx=]>

--- Incoming ---
['cv.ml.ANN_MLP.create', 'Ptr_ANN_MLP', ['/S'], [], 'Ptr<ANN_MLP>']
ok: FUNC <Ptr_ANN_MLP cv.ml.ANN_MLP.create []>

--- Incoming ---
[   'cv.ml.ANN_MLP.load',
    'Ptr_ANN_MLP',
    ['/S'],
    [['String', 'filepath', '', ['/C', '/Ref']]],
    'Ptr<ANN_MLP>']
ok: FUNC <Ptr_ANN_MLP cv.ml.ANN_MLP.load [ARG String filepath=]>

--- Incoming ---
['class cv.ml.LogisticRegression', ': cv::ml::StatModel', [], [], None]
ok: class CLASS cv.ml::.LogisticRegression : StatModel, name: LogisticRegression, base: StatModel

--- Incoming ---
[   'cv.ml.LogisticRegression.getLearningRate',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.ml.LogisticRegression.getLearningRate []>

--- Incoming ---
[   'cv.ml.LogisticRegression.setLearningRate',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.LogisticRegression.setLearningRate [ARG double val=]>

--- Incoming ---
[   'cv.ml.LogisticRegression.getIterations',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.ml.LogisticRegression.getIterations []>

--- Incoming ---
[   'cv.ml.LogisticRegression.setIterations',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.LogisticRegression.setIterations [ARG int val=]>

--- Incoming ---
[   'cv.ml.LogisticRegression.getRegularization',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.ml.LogisticRegression.getRegularization []>

--- Incoming ---
[   'cv.ml.LogisticRegression.setRegularization',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.LogisticRegression.setRegularization [ARG int val=]>

--- Incoming ---
[   'cv.ml.LogisticRegression.getTrainMethod',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.ml.LogisticRegression.getTrainMethod []>

--- Incoming ---
[   'cv.ml.LogisticRegression.setTrainMethod',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.LogisticRegression.setTrainMethod [ARG int val=]>

--- Incoming ---
[   'cv.ml.LogisticRegression.getMiniBatchSize',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.ml.LogisticRegression.getMiniBatchSize []>

--- Incoming ---
[   'cv.ml.LogisticRegression.setMiniBatchSize',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.LogisticRegression.setMiniBatchSize [ARG int val=]>

--- Incoming ---
[   'cv.ml.LogisticRegression.getTermCriteria',
    'TermCriteria',
    ['/C', '/V', '/PV'],
    [],
    'TermCriteria']
ok: FUNC <TermCriteria cv.ml.LogisticRegression.getTermCriteria []>

--- Incoming ---
[   'cv.ml.LogisticRegression.setTermCriteria',
    'void',
    ['/V', '/PV'],
    [['TermCriteria', 'val', '', []]],
    'void']
ok: FUNC <void cv.ml.LogisticRegression.setTermCriteria [ARG TermCriteria val=]>

--- Incoming ---
['const cv.ml.LogisticRegression.REG_DISABLE', '-1', [], [], None]
ok: CONST REG_DISABLE=-1

--- Incoming ---
['const cv.ml.LogisticRegression.REG_L1', '0', [], [], None]
ok: CONST REG_L1=0

--- Incoming ---
['const cv.ml.LogisticRegression.REG_L2', '1', [], [], None]
ok: CONST REG_L2=1

--- Incoming ---
['const cv.ml.LogisticRegression.BATCH', '0', [], [], None]
ok: CONST BATCH=0

--- Incoming ---
['const cv.ml.LogisticRegression.MINI_BATCH', '1', [], [], None]
ok: CONST MINI_BATCH=1

--- Incoming ---
[   'cv.ml.LogisticRegression.predict',
    'float',
    ['/C', '/V', '/PV'],
    [   ['Mat', 'samples', '', []],
        ['Mat', 'results', 'Mat()', ['/O']],
        ['int', 'flags', '0', []]],
    'float']
ok: FUNC <float cv.ml.LogisticRegression.predict [ARG Mat samples=, ARG Mat results=Mat(), ARG int flags=0]>

--- Incoming ---
[   'cv.ml.LogisticRegression.get_learnt_thetas',
    'Mat',
    ['/C', '/V', '/PV'],
    [],
    'Mat']
ok: FUNC <Mat cv.ml.LogisticRegression.get_learnt_thetas []>

--- Incoming ---
[   'cv.ml.LogisticRegression.create',
    'Ptr_LogisticRegression',
    ['/S'],
    [],
    'Ptr<LogisticRegression>']
ok: FUNC <Ptr_LogisticRegression cv.ml.LogisticRegression.create []>

--- Incoming ---
[   'cv.ml.LogisticRegression.load',
    'Ptr_LogisticRegression',
    ['/S'],
    [   ['String', 'filepath', '', ['/C', '/Ref']],
        ['String', 'nodeName', 'String()', ['/C', '/Ref']]],
    'Ptr<LogisticRegression>']
ok: FUNC <Ptr_LogisticRegression cv.ml.LogisticRegression.load [ARG String filepath=, ARG String nodeName=String()]>

--- Incoming ---
['class cv.ml.SVMSGD', ': cv::ml::StatModel', [], [], None]
ok: class CLASS cv.ml::.SVMSGD : StatModel, name: SVMSGD, base: StatModel

--- Incoming ---
['const cv.ml.SVMSGD.SGD', '0', [], [], None]
ok: CONST SGD=0

--- Incoming ---
['const cv.ml.SVMSGD.ASGD', '1', [], [], None]
ok: CONST ASGD=1

--- Incoming ---
['const cv.ml.SVMSGD.SOFT_MARGIN', '0', [], [], None]
ok: CONST SOFT_MARGIN=0

--- Incoming ---
['const cv.ml.SVMSGD.HARD_MARGIN', '1', [], [], None]
ok: CONST HARD_MARGIN=1

--- Incoming ---
['cv.ml.SVMSGD.getWeights', 'Mat', ['/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.ml.SVMSGD.getWeights []>

--- Incoming ---
['cv.ml.SVMSGD.getShift', 'float', ['/V', '/PV'], [], 'float']
ok: FUNC <float cv.ml.SVMSGD.getShift []>

--- Incoming ---
['cv.ml.SVMSGD.create', 'Ptr_SVMSGD', ['/S'], [], 'Ptr<SVMSGD>']
ok: FUNC <Ptr_SVMSGD cv.ml.SVMSGD.create []>

--- Incoming ---
[   'cv.ml.SVMSGD.load',
    'Ptr_SVMSGD',
    ['/S'],
    [   ['String', 'filepath', '', ['/C', '/Ref']],
        ['String', 'nodeName', 'String()', ['/C', '/Ref']]],
    'Ptr<SVMSGD>']
ok: FUNC <Ptr_SVMSGD cv.ml.SVMSGD.load [ARG String filepath=, ARG String nodeName=String()]>

--- Incoming ---
[   'cv.ml.SVMSGD.setOptimalParameters',
    'void',
    ['/V', '/PV'],
    [   ['int', 'svmsgdType', 'SVMSGD::ASGD', []],
        ['int', 'marginType', 'SVMSGD::SOFT_MARGIN', []]],
    'void']
ok: FUNC <void cv.ml.SVMSGD.setOptimalParameters [ARG int svmsgdType=SVMSGD::ASGD, ARG int marginType=SVMSGD::SOFT_MARGIN]>

--- Incoming ---
['cv.ml.SVMSGD.getSvmsgdType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.SVMSGD.getSvmsgdType []>

--- Incoming ---
[   'cv.ml.SVMSGD.setSvmsgdType',
    'void',
    ['/V', '/PV'],
    [['int', 'svmsgdType', '', []]],
    'void']
ok: FUNC <void cv.ml.SVMSGD.setSvmsgdType [ARG int svmsgdType=]>

--- Incoming ---
['cv.ml.SVMSGD.getMarginType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ml.SVMSGD.getMarginType []>

--- Incoming ---
[   'cv.ml.SVMSGD.setMarginType',
    'void',
    ['/V', '/PV'],
    [['int', 'marginType', '', []]],
    'void']
ok: FUNC <void cv.ml.SVMSGD.setMarginType [ARG int marginType=]>

--- Incoming ---
[   'cv.ml.SVMSGD.getMarginRegularization',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.ml.SVMSGD.getMarginRegularization []>

--- Incoming ---
[   'cv.ml.SVMSGD.setMarginRegularization',
    'void',
    ['/V', '/PV'],
    [['float', 'marginRegularization', '', []]],
    'void']
ok: FUNC <void cv.ml.SVMSGD.setMarginRegularization [ARG float marginRegularization=]>

--- Incoming ---
['cv.ml.SVMSGD.getInitialStepSize', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.ml.SVMSGD.getInitialStepSize []>

--- Incoming ---
[   'cv.ml.SVMSGD.setInitialStepSize',
    'void',
    ['/V', '/PV'],
    [['float', 'InitialStepSize', '', []]],
    'void']
ok: FUNC <void cv.ml.SVMSGD.setInitialStepSize [ARG float InitialStepSize=]>

--- Incoming ---
[   'cv.ml.SVMSGD.getStepDecreasingPower',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.ml.SVMSGD.getStepDecreasingPower []>

--- Incoming ---
[   'cv.ml.SVMSGD.setStepDecreasingPower',
    'void',
    ['/V', '/PV'],
    [['float', 'stepDecreasingPower', '', []]],
    'void']
ok: FUNC <void cv.ml.SVMSGD.setStepDecreasingPower [ARG float stepDecreasingPower=]>

--- Incoming ---
[   'cv.ml.SVMSGD.getTermCriteria',
    'TermCriteria',
    ['/C', '/V', '/PV'],
    [],
    'TermCriteria']
ok: FUNC <TermCriteria cv.ml.SVMSGD.getTermCriteria []>

--- Incoming ---
[   'cv.ml.SVMSGD.setTermCriteria',
    'void',
    ['/V', '/PV'],
    [['TermCriteria', 'val', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.ml.SVMSGD.setTermCriteria [ARG TermCriteria val=]>


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/ml\include\opencv2\ml\ml.hpp =====
Namespaces: {'cv.ml', 'cv'}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/ml\include\opencv2\ml\ml.hpp


===== Generating... =====
CLASS ::.Ml : 
[CONST VAR_NUMERICAL=0, CONST VAR_ORDERED=0, CONST VAR_CATEGORICAL=1, CONST TEST_ERROR=0, CONST TRAIN_ERROR=1, CONST ROW_SAMPLE=0, CONST COL_SAMPLE=1]
CLASS cv.ml::.ParamGrid : 
FUNC <Ptr_ParamGrid cv.ml.ParamGrid.create [ARG double minVal=0., ARG double maxVal=0., ARG double logstep=1.]>
java: ParamGrid create(double minVal, double maxVal, double logstep)
java: ParamGrid create(double minVal, double maxVal)
java: ParamGrid create(double minVal)
java: ParamGrid create()
FUNC <double cv.ml.ParamGrid.get_minVal []>
java: double get_minVal()
FUNC <void cv.ml.ParamGrid.set_minVal [ARG double minVal=]>
java: void set_minVal(double minVal)
FUNC <double cv.ml.ParamGrid.get_maxVal []>
java: double get_maxVal()
FUNC <void cv.ml.ParamGrid.set_maxVal [ARG double maxVal=]>
java: void set_maxVal(double maxVal)
FUNC <double cv.ml.ParamGrid.get_logStep []>
java: double get_logStep()
FUNC <void cv.ml.ParamGrid.set_logStep [ARG double logStep=]>
java: void set_logStep(double logStep)
CLASS cv.ml::.TrainData : 
FUNC <Mat cv.ml.TrainData.getCatMap []>
java: Mat getCatMap()
FUNC <Mat cv.ml.TrainData.getCatOfs []>
java: Mat getCatOfs()
FUNC <Mat cv.ml.TrainData.getClassLabels []>
java: Mat getClassLabels()
FUNC <Mat cv.ml.TrainData.getDefaultSubstValues []>
java: Mat getDefaultSubstValues()
FUNC <Mat cv.ml.TrainData.getMissing []>
java: Mat getMissing()
FUNC <Mat cv.ml.TrainData.getNormCatResponses []>
java: Mat getNormCatResponses()
FUNC <Mat cv.ml.TrainData.getResponses []>
java: Mat getResponses()
FUNC <Mat cv.ml.TrainData.getSampleWeights []>
java: Mat getSampleWeights()
FUNC <Mat cv.ml.TrainData.getSamples []>
java: Mat getSamples()
FUNC <Mat cv.ml.TrainData.getSubVector [ARG Mat vec=, ARG Mat idx=]>
java: Mat getSubVector(Mat vec, Mat idx)
FUNC <Mat cv.ml.TrainData.getTestNormCatResponses []>
java: Mat getTestNormCatResponses()
FUNC <Mat cv.ml.TrainData.getTestResponses []>
java: Mat getTestResponses()
FUNC <Mat cv.ml.TrainData.getTestSampleIdx []>
java: Mat getTestSampleIdx()
FUNC <Mat cv.ml.TrainData.getTestSampleWeights []>
java: Mat getTestSampleWeights()
FUNC <Mat cv.ml.TrainData.getTestSamples []>
java: Mat getTestSamples()
FUNC <Mat cv.ml.TrainData.getTrainNormCatResponses []>
java: Mat getTrainNormCatResponses()
FUNC <Mat cv.ml.TrainData.getTrainResponses []>
java: Mat getTrainResponses()
FUNC <Mat cv.ml.TrainData.getTrainSampleIdx []>
java: Mat getTrainSampleIdx()
FUNC <Mat cv.ml.TrainData.getTrainSampleWeights []>
java: Mat getTrainSampleWeights()
FUNC <Mat cv.ml.TrainData.getTrainSamples [ARG int layout=ROW_SAMPLE, ARG bool compressSamples=true, ARG bool compressVars=true]>
java: Mat getTrainSamples(int layout, boolean compressSamples, boolean compressVars)
java: Mat getTrainSamples(int layout, boolean compressSamples)
java: Mat getTrainSamples(int layout)
java: Mat getTrainSamples()
FUNC <Mat cv.ml.TrainData.getVarIdx []>
java: Mat getVarIdx()
FUNC <Mat cv.ml.TrainData.getVarSymbolFlags []>
java: Mat getVarSymbolFlags()
FUNC <Mat cv.ml.TrainData.getVarType []>
java: Mat getVarType()
FUNC <Ptr_TrainData cv.ml.TrainData.create [ARG Mat samples=, ARG int layout=, ARG Mat responses=, ARG Mat varIdx=Mat(), ARG Mat sampleIdx=Mat(), ARG Mat sampleWeights=Mat(), ARG Mat varType=Mat()]>
java: TrainData create(Mat samples, int layout, Mat responses, Mat varIdx, Mat sampleIdx, Mat sampleWeights, Mat varType)
java: TrainData create(Mat samples, int layout, Mat responses, Mat varIdx, Mat sampleIdx, Mat sampleWeights)
java: TrainData create(Mat samples, int layout, Mat responses, Mat varIdx, Mat sampleIdx)
java: TrainData create(Mat samples, int layout, Mat responses, Mat varIdx)
java: TrainData create(Mat samples, int layout, Mat responses)
FUNC <int cv.ml.TrainData.getCatCount [ARG int vi=]>
java: int getCatCount(int vi)
FUNC <int cv.ml.TrainData.getLayout []>
java: int getLayout()
FUNC <int cv.ml.TrainData.getNAllVars []>
java: int getNAllVars()
FUNC <int cv.ml.TrainData.getNSamples []>
java: int getNSamples()
FUNC <int cv.ml.TrainData.getNTestSamples []>
java: int getNTestSamples()
FUNC <int cv.ml.TrainData.getNTrainSamples []>
java: int getNTrainSamples()
FUNC <int cv.ml.TrainData.getNVars []>
java: int getNVars()
FUNC <int cv.ml.TrainData.getResponseType []>
java: int getResponseType()
FUNC <void cv.ml.TrainData.getNames [ARG vector_String names=]>
java: void getNames(List<String> names)
FUNC <void cv.ml.TrainData.getSample [ARG Mat varIdx=, ARG int sidx=, ARG float * buf=]>
java: void getSample(Mat varIdx, int sidx, float buf)
FUNC <void cv.ml.TrainData.getValues [ARG int vi=, ARG Mat sidx=, ARG float * values=]>
java: void getValues(int vi, Mat sidx, float values)
FUNC <void cv.ml.TrainData.setTrainTestSplit [ARG int count=, ARG bool shuffle=true]>
java: void setTrainTestSplit(int count, boolean shuffle)
java: void setTrainTestSplit(int count)
FUNC <void cv.ml.TrainData.setTrainTestSplitRatio [ARG double ratio=, ARG bool shuffle=true]>
java: void setTrainTestSplitRatio(double ratio, boolean shuffle)
java: void setTrainTestSplitRatio(double ratio)
FUNC <void cv.ml.TrainData.shuffleTrainTest []>
java: void shuffleTrainTest()
CLASS cv.ml::.StatModel : Algorithm
[CONST UPDATE_MODEL=1, CONST RAW_OUTPUT=1, CONST COMPRESSED_INPUT=2, CONST PREPROCESSED_INPUT=4]
FUNC <bool cv.ml.StatModel.empty []>
java: boolean empty()
FUNC <bool cv.ml.StatModel.isClassifier []>
java: boolean isClassifier()
FUNC <bool cv.ml.StatModel.isTrained []>
java: boolean isTrained()
FUNC <bool cv.ml.StatModel.train [ARG Mat samples=, ARG int layout=, ARG Mat responses=]>
java: boolean train(Mat samples, int layout, Mat responses)
FUNC <bool cv.ml.StatModel.train [ARG Ptr_TrainData trainData=, ARG int flags=0]>
java: boolean train(TrainData trainData, int flags)
java: boolean train(TrainData trainData)
FUNC <float cv.ml.StatModel.calcError [ARG Ptr_TrainData data=, ARG bool test=, ARG Mat resp=]>
java: float calcError(TrainData data, boolean test, Mat resp)
FUNC <float cv.ml.StatModel.predict [ARG Mat samples=, ARG Mat results=Mat(), ARG int flags=0]>
java: float predict(Mat samples, Mat results, int flags)
java: float predict(Mat samples, Mat results)
java: float predict(Mat samples)
FUNC <int cv.ml.StatModel.getVarCount []>
java: int getVarCount()
CLASS cv.ml::.NormalBayesClassifier : StatModel
FUNC <Ptr_NormalBayesClassifier cv.ml.NormalBayesClassifier.create []>
java: NormalBayesClassifier create()
FUNC <Ptr_NormalBayesClassifier cv.ml.NormalBayesClassifier.load [ARG String filepath=, ARG String nodeName=String()]>
java: NormalBayesClassifier load(String filepath, String nodeName)
java: NormalBayesClassifier load(String filepath)
FUNC <float cv.ml.NormalBayesClassifier.predictProb [ARG Mat inputs=, ARG Mat outputs=, ARG Mat outputProbs=, ARG int flags=0]>
java: float predictProb(Mat inputs, Mat outputs, Mat outputProbs, int flags)
java: float predictProb(Mat inputs, Mat outputs, Mat outputProbs)
CLASS cv.ml::.KNearest : StatModel
[CONST BRUTE_FORCE=1, CONST KDTREE=2]
FUNC <Ptr_KNearest cv.ml.KNearest.create []>
java: KNearest create()
FUNC <bool cv.ml.KNearest.getIsClassifier []>
java: boolean getIsClassifier()
FUNC <float cv.ml.KNearest.findNearest [ARG Mat samples=, ARG int k=, ARG Mat results=, ARG Mat neighborResponses=Mat(), ARG Mat dist=Mat()]>
java: float findNearest(Mat samples, int k, Mat results, Mat neighborResponses, Mat dist)
java: float findNearest(Mat samples, int k, Mat results, Mat neighborResponses)
java: float findNearest(Mat samples, int k, Mat results)
FUNC <int cv.ml.KNearest.getAlgorithmType []>
java: int getAlgorithmType()
FUNC <int cv.ml.KNearest.getDefaultK []>
java: int getDefaultK()
FUNC <int cv.ml.KNearest.getEmax []>
java: int getEmax()
FUNC <void cv.ml.KNearest.setAlgorithmType [ARG int val=]>
java: void setAlgorithmType(int val)
FUNC <void cv.ml.KNearest.setDefaultK [ARG int val=]>
java: void setDefaultK(int val)
FUNC <void cv.ml.KNearest.setEmax [ARG int val=]>
java: void setEmax(int val)
FUNC <void cv.ml.KNearest.setIsClassifier [ARG bool val=]>
java: void setIsClassifier(boolean val)
CLASS cv.ml::.SVM : StatModel
[CONST C_SVC=100, CONST NU_SVC=101, CONST ONE_CLASS=102, CONST EPS_SVR=103, CONST NU_SVR=104, CONST CUSTOM=-1, CONST LINEAR=0, CONST POLY=1, CONST RBF=2, CONST SIGMOID=3, CONST CHI2=4, CONST INTER=5, CONST C=0, CONST GAMMA=1, CONST P=2, CONST NU=3, CONST COEF=4, CONST DEGREE=5]
FUNC <Mat cv.ml.SVM.getClassWeights []>
java: Mat getClassWeights()
FUNC <Mat cv.ml.SVM.getSupportVectors []>
java: Mat getSupportVectors()
FUNC <Mat cv.ml.SVM.getUncompressedSupportVectors []>
java: Mat getUncompressedSupportVectors()
FUNC <Ptr_ParamGrid cv.ml.SVM.getDefaultGridPtr [ARG int param_id=]>
java: ParamGrid getDefaultGridPtr(int param_id)
FUNC <Ptr_SVM cv.ml.SVM.create []>
java: SVM create()
FUNC <Ptr_SVM cv.ml.SVM.load [ARG String filepath=]>
java: SVM load(String filepath)
FUNC <TermCriteria cv.ml.SVM.getTermCriteria []>
java: TermCriteria getTermCriteria()
FUNC <bool cv.ml.SVM.trainAuto [ARG Mat samples=, ARG int layout=, ARG Mat responses=, ARG int kFold=10, ARG Ptr_ParamGrid Cgrid=SVM::getDefaultGridPtr(SVM::C), ARG Ptr_ParamGrid gammaGrid=SVM::getDefaultGridPtr(SVM::GAMMA), ARG Ptr_ParamGrid pGrid=SVM::getDefaultGridPtr(SVM::P), ARG Ptr_ParamGrid nuGrid=SVM::getDefaultGridPtr(SVM::NU), ARG Ptr_ParamGrid coeffGrid=SVM::getDefaultGridPtr(SVM::COEF), ARG Ptr_ParamGrid degreeGrid=SVM::getDefaultGridPtr(SVM::DEGREE), ARG bool balanced=false]>
java: boolean trainAuto(Mat samples, int layout, Mat responses, int kFold, ParamGrid Cgrid, ParamGrid gammaGrid, ParamGrid pGrid, ParamGrid nuGrid, ParamGrid coeffGrid, ParamGrid degreeGrid, boolean balanced)
java: boolean trainAuto(Mat samples, int layout, Mat responses, int kFold, ParamGrid Cgrid, ParamGrid gammaGrid, ParamGrid pGrid, ParamGrid nuGrid, ParamGrid coeffGrid, ParamGrid degreeGrid)
java: boolean trainAuto(Mat samples, int layout, Mat responses, int kFold, ParamGrid Cgrid, ParamGrid gammaGrid, ParamGrid pGrid, ParamGrid nuGrid, ParamGrid coeffGrid)
java: boolean trainAuto(Mat samples, int layout, Mat responses, int kFold, ParamGrid Cgrid, ParamGrid gammaGrid, ParamGrid pGrid, ParamGrid nuGrid)
java: boolean trainAuto(Mat samples, int layout, Mat responses, int kFold, ParamGrid Cgrid, ParamGrid gammaGrid, ParamGrid pGrid)
java: boolean trainAuto(Mat samples, int layout, Mat responses, int kFold, ParamGrid Cgrid, ParamGrid gammaGrid)
java: boolean trainAuto(Mat samples, int layout, Mat responses, int kFold, ParamGrid Cgrid)
java: boolean trainAuto(Mat samples, int layout, Mat responses, int kFold)
java: boolean trainAuto(Mat samples, int layout, Mat responses)
FUNC <double cv.ml.SVM.getC []>
java: double getC()
FUNC <double cv.ml.SVM.getCoef0 []>
java: double getCoef0()
FUNC <double cv.ml.SVM.getDecisionFunction [ARG int i=, ARG Mat alpha=, ARG Mat svidx=]>
java: double getDecisionFunction(int i, Mat alpha, Mat svidx)
FUNC <double cv.ml.SVM.getDegree []>
java: double getDegree()
FUNC <double cv.ml.SVM.getGamma []>
java: double getGamma()
FUNC <double cv.ml.SVM.getNu []>
java: double getNu()
FUNC <double cv.ml.SVM.getP []>
java: double getP()
FUNC <int cv.ml.SVM.getKernelType []>
java: int getKernelType()
FUNC <int cv.ml.SVM.getType []>
java: int getType()
FUNC <void cv.ml.SVM.setC [ARG double val=]>
java: void setC(double val)
FUNC <void cv.ml.SVM.setClassWeights [ARG Mat val=]>
java: void setClassWeights(Mat val)
FUNC <void cv.ml.SVM.setCoef0 [ARG double val=]>
java: void setCoef0(double val)
FUNC <void cv.ml.SVM.setDegree [ARG double val=]>
java: void setDegree(double val)
FUNC <void cv.ml.SVM.setGamma [ARG double val=]>
java: void setGamma(double val)
FUNC <void cv.ml.SVM.setKernel [ARG int kernelType=]>
java: void setKernel(int kernelType)
FUNC <void cv.ml.SVM.setNu [ARG double val=]>
java: void setNu(double val)
FUNC <void cv.ml.SVM.setP [ARG double val=]>
java: void setP(double val)
FUNC <void cv.ml.SVM.setTermCriteria [ARG TermCriteria val=]>
java: void setTermCriteria(TermCriteria val)
FUNC <void cv.ml.SVM.setType [ARG int val=]>
java: void setType(int val)
CLASS cv.ml::.EM : StatModel
[CONST COV_MAT_SPHERICAL=0, CONST COV_MAT_DIAGONAL=1, CONST COV_MAT_GENERIC=2, CONST COV_MAT_DEFAULT=COV_MAT_DIAGONAL, CONST DEFAULT_NCLUSTERS=5, CONST DEFAULT_MAX_ITERS=100, CONST START_E_STEP=1, CONST START_M_STEP=2, CONST START_AUTO_STEP=0]
FUNC <Mat cv.ml.EM.getMeans []>
java: Mat getMeans()
FUNC <Mat cv.ml.EM.getWeights []>
java: Mat getWeights()
FUNC <Ptr_EM cv.ml.EM.create []>
java: EM create()
FUNC <Ptr_EM cv.ml.EM.load [ARG String filepath=, ARG String nodeName=String()]>
java: EM load(String filepath, String nodeName)
java: EM load(String filepath)
FUNC <TermCriteria cv.ml.EM.getTermCriteria []>
java: TermCriteria getTermCriteria()
FUNC <Vec2d cv.ml.EM.predict2 [ARG Mat sample=, ARG Mat probs=]>
java: double[] predict2(Mat sample, Mat probs)
FUNC <bool cv.ml.EM.trainE [ARG Mat samples=, ARG Mat means0=, ARG Mat covs0=Mat(), ARG Mat weights0=Mat(), ARG Mat logLikelihoods=Mat(), ARG Mat labels=Mat(), ARG Mat probs=Mat()]>
java: boolean trainE(Mat samples, Mat means0, Mat covs0, Mat weights0, Mat logLikelihoods, Mat labels, Mat probs)
java: boolean trainE(Mat samples, Mat means0, Mat covs0, Mat weights0, Mat logLikelihoods, Mat labels)
java: boolean trainE(Mat samples, Mat means0, Mat covs0, Mat weights0, Mat logLikelihoods)
java: boolean trainE(Mat samples, Mat means0, Mat covs0, Mat weights0)
java: boolean trainE(Mat samples, Mat means0, Mat covs0)
java: boolean trainE(Mat samples, Mat means0)
FUNC <bool cv.ml.EM.trainEM [ARG Mat samples=, ARG Mat logLikelihoods=Mat(), ARG Mat labels=Mat(), ARG Mat probs=Mat()]>
java: boolean trainEM(Mat samples, Mat logLikelihoods, Mat labels, Mat probs)
java: boolean trainEM(Mat samples, Mat logLikelihoods, Mat labels)
java: boolean trainEM(Mat samples, Mat logLikelihoods)
java: boolean trainEM(Mat samples)
FUNC <bool cv.ml.EM.trainM [ARG Mat samples=, ARG Mat probs0=, ARG Mat logLikelihoods=Mat(), ARG Mat labels=Mat(), ARG Mat probs=Mat()]>
java: boolean trainM(Mat samples, Mat probs0, Mat logLikelihoods, Mat labels, Mat probs)
java: boolean trainM(Mat samples, Mat probs0, Mat logLikelihoods, Mat labels)
java: boolean trainM(Mat samples, Mat probs0, Mat logLikelihoods)
java: boolean trainM(Mat samples, Mat probs0)
FUNC <float cv.ml.EM.predict [ARG Mat samples=, ARG Mat results=Mat(), ARG int flags=0]>
java: float predict(Mat samples, Mat results, int flags)
java: float predict(Mat samples, Mat results)
java: float predict(Mat samples)
FUNC <int cv.ml.EM.getClustersNumber []>
java: int getClustersNumber()
FUNC <int cv.ml.EM.getCovarianceMatrixType []>
java: int getCovarianceMatrixType()
FUNC <void cv.ml.EM.getCovs [ARG vector_Mat covs=]>
java: void getCovs(List<Mat> covs)
FUNC <void cv.ml.EM.setClustersNumber [ARG int val=]>
java: void setClustersNumber(int val)
FUNC <void cv.ml.EM.setCovarianceMatrixType [ARG int val=]>
java: void setCovarianceMatrixType(int val)
FUNC <void cv.ml.EM.setTermCriteria [ARG TermCriteria val=]>
java: void setTermCriteria(TermCriteria val)
CLASS cv.ml::.DTrees : StatModel
[CONST PREDICT_AUTO=0, CONST PREDICT_SUM=(1<<8), CONST PREDICT_MAX_VOTE=(2<<8), CONST PREDICT_MASK=(3<<8)]
FUNC <Mat cv.ml.DTrees.getPriors []>
java: Mat getPriors()
FUNC <Ptr_DTrees cv.ml.DTrees.create []>
java: DTrees create()
FUNC <Ptr_DTrees cv.ml.DTrees.load [ARG String filepath=, ARG String nodeName=String()]>
java: DTrees load(String filepath, String nodeName)
java: DTrees load(String filepath)
FUNC <bool cv.ml.DTrees.getTruncatePrunedTree []>
java: boolean getTruncatePrunedTree()
FUNC <bool cv.ml.DTrees.getUse1SERule []>
java: boolean getUse1SERule()
FUNC <bool cv.ml.DTrees.getUseSurrogates []>
java: boolean getUseSurrogates()
FUNC <float cv.ml.DTrees.getRegressionAccuracy []>
java: float getRegressionAccuracy()
FUNC <int cv.ml.DTrees.getCVFolds []>
java: int getCVFolds()
FUNC <int cv.ml.DTrees.getMaxCategories []>
java: int getMaxCategories()
FUNC <int cv.ml.DTrees.getMaxDepth []>
java: int getMaxDepth()
FUNC <int cv.ml.DTrees.getMinSampleCount []>
java: int getMinSampleCount()
FUNC <void cv.ml.DTrees.setCVFolds [ARG int val=]>
java: void setCVFolds(int val)
FUNC <void cv.ml.DTrees.setMaxCategories [ARG int val=]>
java: void setMaxCategories(int val)
FUNC <void cv.ml.DTrees.setMaxDepth [ARG int val=]>
java: void setMaxDepth(int val)
FUNC <void cv.ml.DTrees.setMinSampleCount [ARG int val=]>
java: void setMinSampleCount(int val)
FUNC <void cv.ml.DTrees.setPriors [ARG Mat val=]>
java: void setPriors(Mat val)
FUNC <void cv.ml.DTrees.setRegressionAccuracy [ARG float val=]>
java: void setRegressionAccuracy(float val)
FUNC <void cv.ml.DTrees.setTruncatePrunedTree [ARG bool val=]>
java: void setTruncatePrunedTree(boolean val)
FUNC <void cv.ml.DTrees.setUse1SERule [ARG bool val=]>
java: void setUse1SERule(boolean val)
FUNC <void cv.ml.DTrees.setUseSurrogates [ARG bool val=]>
java: void setUseSurrogates(boolean val)
CLASS cv.ml::.RTrees : DTrees
FUNC <Mat cv.ml.RTrees.getVarImportance []>
java: Mat getVarImportance()
FUNC <Ptr_RTrees cv.ml.RTrees.create []>
java: RTrees create()
FUNC <Ptr_RTrees cv.ml.RTrees.load [ARG String filepath=, ARG String nodeName=String()]>
java: RTrees load(String filepath, String nodeName)
java: RTrees load(String filepath)
FUNC <TermCriteria cv.ml.RTrees.getTermCriteria []>
java: TermCriteria getTermCriteria()
FUNC <bool cv.ml.RTrees.getCalculateVarImportance []>
java: boolean getCalculateVarImportance()
FUNC <int cv.ml.RTrees.getActiveVarCount []>
java: int getActiveVarCount()
FUNC <void cv.ml.RTrees.getVotes [ARG Mat samples=, ARG Mat results=, ARG int flags=]>
java: void getVotes(Mat samples, Mat results, int flags)
FUNC <void cv.ml.RTrees.setActiveVarCount [ARG int val=]>
java: void setActiveVarCount(int val)
FUNC <void cv.ml.RTrees.setCalculateVarImportance [ARG bool val=]>
java: void setCalculateVarImportance(boolean val)
FUNC <void cv.ml.RTrees.setTermCriteria [ARG TermCriteria val=]>
java: void setTermCriteria(TermCriteria val)
CLASS cv.ml::.Boost : DTrees
[CONST DISCRETE=0, CONST REAL=1, CONST LOGIT=2, CONST GENTLE=3]
FUNC <Ptr_Boost cv.ml.Boost.create []>
java: Boost create()
FUNC <Ptr_Boost cv.ml.Boost.load [ARG String filepath=, ARG String nodeName=String()]>
java: Boost load(String filepath, String nodeName)
java: Boost load(String filepath)
FUNC <double cv.ml.Boost.getWeightTrimRate []>
java: double getWeightTrimRate()
FUNC <int cv.ml.Boost.getBoostType []>
java: int getBoostType()
FUNC <int cv.ml.Boost.getWeakCount []>
java: int getWeakCount()
FUNC <void cv.ml.Boost.setBoostType [ARG int val=]>
java: void setBoostType(int val)
FUNC <void cv.ml.Boost.setWeakCount [ARG int val=]>
java: void setWeakCount(int val)
FUNC <void cv.ml.Boost.setWeightTrimRate [ARG double val=]>
java: void setWeightTrimRate(double val)
CLASS cv.ml::.ANN_MLP : StatModel
[CONST BACKPROP=0, CONST RPROP=1, CONST ANNEAL=2, CONST IDENTITY=0, CONST SIGMOID_SYM=1, CONST GAUSSIAN=2, CONST RELU=3, CONST LEAKYRELU=4, CONST UPDATE_WEIGHTS=1, CONST NO_INPUT_SCALE=2, CONST NO_OUTPUT_SCALE=4]
FUNC <Mat cv.ml.ANN_MLP.getLayerSizes []>
java: Mat getLayerSizes()
FUNC <Mat cv.ml.ANN_MLP.getWeights [ARG int layerIdx=]>
java: Mat getWeights(int layerIdx)
FUNC <Ptr_ANN_MLP cv.ml.ANN_MLP.create []>
java: ANN_MLP create()
FUNC <Ptr_ANN_MLP cv.ml.ANN_MLP.load [ARG String filepath=]>
java: ANN_MLP load(String filepath)
FUNC <TermCriteria cv.ml.ANN_MLP.getTermCriteria []>
java: TermCriteria getTermCriteria()
FUNC <double cv.ml.ANN_MLP.getAnnealCoolingRatio []>
java: double getAnnealCoolingRatio()
FUNC <double cv.ml.ANN_MLP.getAnnealFinalT []>
java: double getAnnealFinalT()
FUNC <double cv.ml.ANN_MLP.getAnnealInitialT []>
java: double getAnnealInitialT()
FUNC <double cv.ml.ANN_MLP.getBackpropMomentumScale []>
java: double getBackpropMomentumScale()
FUNC <double cv.ml.ANN_MLP.getBackpropWeightScale []>
java: double getBackpropWeightScale()
FUNC <double cv.ml.ANN_MLP.getRpropDW0 []>
java: double getRpropDW0()
FUNC <double cv.ml.ANN_MLP.getRpropDWMax []>
java: double getRpropDWMax()
FUNC <double cv.ml.ANN_MLP.getRpropDWMin []>
java: double getRpropDWMin()
FUNC <double cv.ml.ANN_MLP.getRpropDWMinus []>
java: double getRpropDWMinus()
FUNC <double cv.ml.ANN_MLP.getRpropDWPlus []>
java: double getRpropDWPlus()
FUNC <int cv.ml.ANN_MLP.getAnnealItePerStep []>
java: int getAnnealItePerStep()
FUNC <int cv.ml.ANN_MLP.getTrainMethod []>
java: int getTrainMethod()
FUNC <void cv.ml.ANN_MLP.setActivationFunction [ARG int type=, ARG double param1=0, ARG double param2=0]>
java: void setActivationFunction(int type, double param1, double param2)
java: void setActivationFunction(int type, double param1)
java: void setActivationFunction(int type)
FUNC <void cv.ml.ANN_MLP.setAnnealCoolingRatio [ARG double val=]>
java: void setAnnealCoolingRatio(double val)
FUNC <void cv.ml.ANN_MLP.setAnnealFinalT [ARG double val=]>
java: void setAnnealFinalT(double val)
FUNC <void cv.ml.ANN_MLP.setAnnealInitialT [ARG double val=]>
java: void setAnnealInitialT(double val)
FUNC <void cv.ml.ANN_MLP.setAnnealItePerStep [ARG int val=]>
java: void setAnnealItePerStep(int val)
FUNC <void cv.ml.ANN_MLP.setBackpropMomentumScale [ARG double val=]>
java: void setBackpropMomentumScale(double val)
FUNC <void cv.ml.ANN_MLP.setBackpropWeightScale [ARG double val=]>
java: void setBackpropWeightScale(double val)
FUNC <void cv.ml.ANN_MLP.setLayerSizes [ARG Mat _layer_sizes=]>
java: void setLayerSizes(Mat _layer_sizes)
FUNC <void cv.ml.ANN_MLP.setRpropDW0 [ARG double val=]>
java: void setRpropDW0(double val)
FUNC <void cv.ml.ANN_MLP.setRpropDWMax [ARG double val=]>
java: void setRpropDWMax(double val)
FUNC <void cv.ml.ANN_MLP.setRpropDWMin [ARG double val=]>
java: void setRpropDWMin(double val)
FUNC <void cv.ml.ANN_MLP.setRpropDWMinus [ARG double val=]>
java: void setRpropDWMinus(double val)
FUNC <void cv.ml.ANN_MLP.setRpropDWPlus [ARG double val=]>
java: void setRpropDWPlus(double val)
FUNC <void cv.ml.ANN_MLP.setTermCriteria [ARG TermCriteria val=]>
java: void setTermCriteria(TermCriteria val)
FUNC <void cv.ml.ANN_MLP.setTrainMethod [ARG int method=, ARG double param1=0, ARG double param2=0]>
java: void setTrainMethod(int method, double param1, double param2)
java: void setTrainMethod(int method, double param1)
java: void setTrainMethod(int method)
CLASS cv.ml::.LogisticRegression : StatModel
[CONST REG_DISABLE=-1, CONST REG_L1=0, CONST REG_L2=1, CONST BATCH=0, CONST MINI_BATCH=1]
FUNC <Mat cv.ml.LogisticRegression.get_learnt_thetas []>
java: Mat get_learnt_thetas()
FUNC <Ptr_LogisticRegression cv.ml.LogisticRegression.create []>
java: LogisticRegression create()
FUNC <Ptr_LogisticRegression cv.ml.LogisticRegression.load [ARG String filepath=, ARG String nodeName=String()]>
java: LogisticRegression load(String filepath, String nodeName)
java: LogisticRegression load(String filepath)
FUNC <TermCriteria cv.ml.LogisticRegression.getTermCriteria []>
java: TermCriteria getTermCriteria()
FUNC <double cv.ml.LogisticRegression.getLearningRate []>
java: double getLearningRate()
FUNC <float cv.ml.LogisticRegression.predict [ARG Mat samples=, ARG Mat results=Mat(), ARG int flags=0]>
java: float predict(Mat samples, Mat results, int flags)
java: float predict(Mat samples, Mat results)
java: float predict(Mat samples)
FUNC <int cv.ml.LogisticRegression.getIterations []>
java: int getIterations()
FUNC <int cv.ml.LogisticRegression.getMiniBatchSize []>
java: int getMiniBatchSize()
FUNC <int cv.ml.LogisticRegression.getRegularization []>
java: int getRegularization()
FUNC <int cv.ml.LogisticRegression.getTrainMethod []>
java: int getTrainMethod()
FUNC <void cv.ml.LogisticRegression.setIterations [ARG int val=]>
java: void setIterations(int val)
FUNC <void cv.ml.LogisticRegression.setLearningRate [ARG double val=]>
java: void setLearningRate(double val)
FUNC <void cv.ml.LogisticRegression.setMiniBatchSize [ARG int val=]>
java: void setMiniBatchSize(int val)
FUNC <void cv.ml.LogisticRegression.setRegularization [ARG int val=]>
java: void setRegularization(int val)
FUNC <void cv.ml.LogisticRegression.setTermCriteria [ARG TermCriteria val=]>
java: void setTermCriteria(TermCriteria val)
FUNC <void cv.ml.LogisticRegression.setTrainMethod [ARG int val=]>
java: void setTrainMethod(int val)
CLASS cv.ml::.SVMSGD : StatModel
[CONST SGD=0, CONST ASGD=1, CONST SOFT_MARGIN=0, CONST HARD_MARGIN=1]
FUNC <Mat cv.ml.SVMSGD.getWeights []>
java: Mat getWeights()
FUNC <Ptr_SVMSGD cv.ml.SVMSGD.create []>
java: SVMSGD create()
FUNC <Ptr_SVMSGD cv.ml.SVMSGD.load [ARG String filepath=, ARG String nodeName=String()]>
java: SVMSGD load(String filepath, String nodeName)
java: SVMSGD load(String filepath)
FUNC <TermCriteria cv.ml.SVMSGD.getTermCriteria []>
java: TermCriteria getTermCriteria()
FUNC <float cv.ml.SVMSGD.getInitialStepSize []>
java: float getInitialStepSize()
FUNC <float cv.ml.SVMSGD.getMarginRegularization []>
java: float getMarginRegularization()
FUNC <float cv.ml.SVMSGD.getShift []>
java: float getShift()
FUNC <float cv.ml.SVMSGD.getStepDecreasingPower []>
java: float getStepDecreasingPower()
FUNC <int cv.ml.SVMSGD.getMarginType []>
java: int getMarginType()
FUNC <int cv.ml.SVMSGD.getSvmsgdType []>
java: int getSvmsgdType()
FUNC <void cv.ml.SVMSGD.setInitialStepSize [ARG float InitialStepSize=]>
java: void setInitialStepSize(float InitialStepSize)
FUNC <void cv.ml.SVMSGD.setMarginRegularization [ARG float marginRegularization=]>
java: void setMarginRegularization(float marginRegularization)
FUNC <void cv.ml.SVMSGD.setMarginType [ARG int marginType=]>
java: void setMarginType(int marginType)
FUNC <void cv.ml.SVMSGD.setOptimalParameters [ARG int svmsgdType=SVMSGD::ASGD, ARG int marginType=SVMSGD::SOFT_MARGIN]>
java: void setOptimalParameters(int svmsgdType, int marginType)
java: void setOptimalParameters(int svmsgdType)
java: void setOptimalParameters()
FUNC <void cv.ml.SVMSGD.setStepDecreasingPower [ARG float stepDecreasingPower=]>
java: void setStepDecreasingPower(float stepDecreasingPower)
FUNC <void cv.ml.SVMSGD.setSvmsgdType [ARG int svmsgdType=]>
java: void setSvmsgdType(int svmsgdType)
FUNC <void cv.ml.SVMSGD.setTermCriteria [ARG TermCriteria val=]>
java: void setTermCriteria(TermCriteria val)

=== MODULE: objdetect (C:/Users/d_dan/Desktop/opencv-master\modules/objdetect) ===


Files (4):
['C:/Users/d_dan/Desktop/opencv-master\\modules/objdetect\\include\\opencv2\\objdetect\\objdetect_c.h',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/objdetect\\include\\opencv2\\objdetect.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/objdetect\\include\\opencv2\\objdetect\\detection_based_tracker.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/objdetect\\include\\opencv2\\objdetect\\objdetect.hpp']

Common headers (0):
[]
ok: class CLASS ::.Objdetect : , name: Objdetect, base: 


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/objdetect\include\opencv2\objdetect\objdetect_c.h =====
Namespaces: {''}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/objdetect\include\opencv2\objdetect\objdetect_c.h


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/objdetect\include\opencv2\objdetect.hpp =====
Namespaces: {'', 'cv'}

--- Incoming ---
[   'cv.groupRectangles',
    'void',
    [],
    [   ['vector_Rect', 'rectList', '', ['/IO', '/Ref']],
        ['vector_int', 'weights', '', ['/O', '/Ref']],
        ['int', 'groupThreshold', '', []],
        ['double', 'eps', '0.2', []]],
    'void']
ok: FUNC <void cv..groupRectangles [ARG vector_Rect rectList=, ARG vector_int weights=, ARG int groupThreshold=, ARG double eps=0.2]>

--- Incoming ---
['const cv.CASCADE_DO_CANNY_PRUNING', '1', [], [], None]
ok: CONST CASCADE_DO_CANNY_PRUNING=1

--- Incoming ---
['const cv.CASCADE_SCALE_IMAGE', '2', [], [], None]
ok: CONST CASCADE_SCALE_IMAGE=2

--- Incoming ---
['const cv.CASCADE_FIND_BIGGEST_OBJECT', '4', [], [], None]
ok: CONST CASCADE_FIND_BIGGEST_OBJECT=4

--- Incoming ---
['const cv.CASCADE_DO_ROUGH_SEARCH', '8', [], [], None]
ok: CONST CASCADE_DO_ROUGH_SEARCH=8

--- Incoming ---
['class cv.BaseCascadeClassifier', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.BaseCascadeClassifier : Algorithm, name: BaseCascadeClassifier, base: Algorithm

--- Incoming ---
['class cv.CascadeClassifier', '', [], [], None]
ok: class CLASS cv::.CascadeClassifier : , name: CascadeClassifier, base: 

--- Incoming ---
['cv.CascadeClassifier.CascadeClassifier', '', [], [], None]
ok: FUNC < cv.CascadeClassifier.CascadeClassifier []>

--- Incoming ---
[   'cv.CascadeClassifier.CascadeClassifier',
    '',
    [],
    [['String', 'filename', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.CascadeClassifier.CascadeClassifier [ARG String filename=]>

--- Incoming ---
['cv.CascadeClassifier.empty', 'bool', ['/C'], [], 'bool']
ok: FUNC <bool cv.CascadeClassifier.empty []>

--- Incoming ---
[   'cv.CascadeClassifier.load',
    'bool',
    [],
    [['String', 'filename', '', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.CascadeClassifier.load [ARG String filename=]>

--- Incoming ---
[   'cv.CascadeClassifier.read',
    'bool',
    [],
    [['FileNode', 'node', '', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.CascadeClassifier.read [ARG FileNode node=]>

--- Incoming ---
[   'cv.CascadeClassifier.detectMultiScale',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['vector_Rect', 'objects', '', ['/O', '/Ref']],
        ['double', 'scaleFactor', '1.1', []],
        ['int', 'minNeighbors', '3', []],
        ['int', 'flags', '0', []],
        ['Size', 'minSize', 'Size()', []],
        ['Size', 'maxSize', 'Size()', []]],
    'void']
ok: FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size()]>

--- Incoming ---
[   'cv.CascadeClassifier.detectMultiScale',
    'void',
    ['=detectMultiScale2'],
    [   ['Mat', 'image', '', []],
        ['vector_Rect', 'objects', '', ['/O', '/Ref']],
        ['vector_int', 'numDetections', '', ['/O', '/Ref']],
        ['double', 'scaleFactor', '1.1', []],
        ['int', 'minNeighbors', '3', []],
        ['int', 'flags', '0', []],
        ['Size', 'minSize', 'Size()', []],
        ['Size', 'maxSize', 'Size()', []]],
    'void']
ok: FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG vector_int numDetections=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size()]>

--- Incoming ---
[   'cv.CascadeClassifier.detectMultiScale',
    'void',
    ['=detectMultiScale3'],
    [   ['Mat', 'image', '', []],
        ['vector_Rect', 'objects', '', ['/O', '/Ref']],
        ['vector_int', 'rejectLevels', '', ['/O', '/Ref']],
        ['vector_double', 'levelWeights', '', ['/O', '/Ref']],
        ['double', 'scaleFactor', '1.1', []],
        ['int', 'minNeighbors', '3', []],
        ['int', 'flags', '0', []],
        ['Size', 'minSize', 'Size()', []],
        ['Size', 'maxSize', 'Size()', []],
        ['bool', 'outputRejectLevels', 'false', []]],
    'void']
ok: FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG vector_int rejectLevels=, ARG vector_double levelWeights=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size(), ARG bool outputRejectLevels=false]>

--- Incoming ---
['cv.CascadeClassifier.isOldFormatCascade', 'bool', ['/C'], [], 'bool']
ok: FUNC <bool cv.CascadeClassifier.isOldFormatCascade []>

--- Incoming ---
['cv.CascadeClassifier.getOriginalWindowSize', 'Size', ['/C'], [], 'Size']
ok: FUNC <Size cv.CascadeClassifier.getOriginalWindowSize []>

--- Incoming ---
['cv.CascadeClassifier.getFeatureType', 'int', ['/C'], [], 'int']
ok: FUNC <int cv.CascadeClassifier.getFeatureType []>

--- Incoming ---
[   'cv.CascadeClassifier.convert',
    'bool',
    ['/S'],
    [   ['String', 'oldcascade', '', ['/C', '/Ref']],
        ['String', 'newcascade', '', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.CascadeClassifier.convert [ARG String oldcascade=, ARG String newcascade=]>

--- Incoming ---
[   'struct cv.HOGDescriptor',
    '',
    [],
    [   ['Size', 'winSize', '', []],
        ['Size', 'blockSize', '', []],
        ['Size', 'blockStride', '', []],
        ['Size', 'cellSize', '', []],
        ['int', 'nbins', '', []],
        ['int', 'derivAperture', '', []],
        ['double', 'winSigma', '', []],
        ['int', 'histogramNormType', '', []],
        ['double', 'L2HysThreshold', '', []],
        ['bool', 'gammaCorrection', '', []],
        ['vector_float', 'svmDetector', '', []],
        ['int', 'nlevels', '', []],
        ['bool', 'signedGradient', '', []]],
    None]
ok: class CLASS cv::.HOGDescriptor : , name: HOGDescriptor, base: 

--- Incoming ---
['const cv.HOGDescriptor.L2Hys', '0', [], [], None]
ok: CONST L2Hys=0

--- Incoming ---
['const cv.HOGDescriptor.DEFAULT_NLEVELS', '64', [], [], None]
ok: CONST DEFAULT_NLEVELS=64

--- Incoming ---
['cv.HOGDescriptor.HOGDescriptor', '', [], [], None]
ok: FUNC < cv.HOGDescriptor.HOGDescriptor []>

--- Incoming ---
[   'cv.HOGDescriptor.HOGDescriptor',
    '',
    [],
    [   ['Size', '_winSize', '', []],
        ['Size', '_blockSize', '', []],
        ['Size', '_blockStride', '', []],
        ['Size', '_cellSize', '', []],
        ['int', '_nbins', '', []],
        ['int', '_derivAperture', '1', []],
        ['double', '_winSigma', '-1', []],
        ['int', '_histogramNormType', 'HOGDescriptor::L2Hys', []],
        ['double', '_L2HysThreshold', '0.2', []],
        ['bool', '_gammaCorrection', 'false', []],
        ['int', '_nlevels', 'HOGDescriptor::DEFAULT_NLEVELS', []],
        ['bool', '_signedGradient', 'false', []]],
    None]
ok: FUNC < cv.HOGDescriptor.HOGDescriptor [ARG Size _winSize=, ARG Size _blockSize=, ARG Size _blockStride=, ARG Size _cellSize=, ARG int _nbins=, ARG int _derivAperture=1, ARG double _winSigma=-1, ARG int _histogramNormType=HOGDescriptor::L2Hys, ARG double _L2HysThreshold=0.2, ARG bool _gammaCorrection=false, ARG int _nlevels=HOGDescriptor::DEFAULT_NLEVELS, ARG bool _signedGradient=false]>

--- Incoming ---
[   'cv.HOGDescriptor.HOGDescriptor',
    '',
    [],
    [['String', 'filename', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.HOGDescriptor.HOGDescriptor [ARG String filename=]>

--- Incoming ---
['cv.HOGDescriptor.getDescriptorSize', 'size_t', ['/C'], [], 'size_t']
ok: FUNC <size_t cv.HOGDescriptor.getDescriptorSize []>

--- Incoming ---
['cv.HOGDescriptor.checkDetectorSize', 'bool', ['/C'], [], 'bool']
ok: FUNC <bool cv.HOGDescriptor.checkDetectorSize []>

--- Incoming ---
['cv.HOGDescriptor.getWinSigma', 'double', ['/C'], [], 'double']
ok: FUNC <double cv.HOGDescriptor.getWinSigma []>

--- Incoming ---
[   'cv.HOGDescriptor.setSVMDetector',
    'void',
    ['/V'],
    [['Mat', '_svmdetector', '', []]],
    'void']
ok: FUNC <void cv.HOGDescriptor.setSVMDetector [ARG Mat _svmdetector=]>

--- Incoming ---
[   'cv.HOGDescriptor.load',
    'bool',
    ['/V'],
    [   ['String', 'filename', '', ['/C', '/Ref']],
        ['String', 'objname', 'String()', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.HOGDescriptor.load [ARG String filename=, ARG String objname=String()]>

--- Incoming ---
[   'cv.HOGDescriptor.save',
    'void',
    ['/C', '/V'],
    [   ['String', 'filename', '', ['/C', '/Ref']],
        ['String', 'objname', 'String()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.HOGDescriptor.save [ARG String filename=, ARG String objname=String()]>

--- Incoming ---
[   'cv.HOGDescriptor.compute',
    'void',
    ['/C', '/V'],
    [   ['Mat', 'img', '', []],
        ['vector_float', 'descriptors', '', ['/O', '/Ref']],
        ['Size', 'winStride', 'Size()', []],
        ['Size', 'padding', 'Size()', []],
        ['vector_Point', 'locations', 'std::vector<Point>()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.HOGDescriptor.compute [ARG Mat img=, ARG vector_float descriptors=, ARG Size winStride=Size(), ARG Size padding=Size(), ARG vector_Point locations=std::vector<Point>()]>

--- Incoming ---
[   'cv.HOGDescriptor.detect',
    'void',
    ['/C', '/V'],
    [   ['Mat', 'img', '', ['/C', '/Ref']],
        ['vector_Point', 'foundLocations', '', ['/O', '/Ref']],
        ['vector_double', 'weights', '', ['/O', '/Ref']],
        ['double', 'hitThreshold', '0', []],
        ['Size', 'winStride', 'Size()', []],
        ['Size', 'padding', 'Size()', []],
        [   'vector_Point',
            'searchLocations',
            'std::vector<Point>()',
            ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.HOGDescriptor.detect [ARG Mat img=, ARG vector_Point foundLocations=, ARG vector_double weights=, ARG double hitThreshold=0, ARG Size winStride=Size(), ARG Size padding=Size(), ARG vector_Point searchLocations=std::vector<Point>()]>

--- Incoming ---
[   'cv.HOGDescriptor.detectMultiScale',
    'void',
    ['/C', '/V'],
    [   ['Mat', 'img', '', []],
        ['vector_Rect', 'foundLocations', '', ['/O', '/Ref']],
        ['vector_double', 'foundWeights', '', ['/O', '/Ref']],
        ['double', 'hitThreshold', '0', []],
        ['Size', 'winStride', 'Size()', []],
        ['Size', 'padding', 'Size()', []],
        ['double', 'scale', '1.05', []],
        ['double', 'finalThreshold', '2.0', []],
        ['bool', 'useMeanshiftGrouping', 'false', []]],
    'void']
ok: FUNC <void cv.HOGDescriptor.detectMultiScale [ARG Mat img=, ARG vector_Rect foundLocations=, ARG vector_double foundWeights=, ARG double hitThreshold=0, ARG Size winStride=Size(), ARG Size padding=Size(), ARG double scale=1.05, ARG double finalThreshold=2.0, ARG bool useMeanshiftGrouping=false]>

--- Incoming ---
[   'cv.HOGDescriptor.computeGradient',
    'void',
    ['/C', '/V'],
    [   ['Mat', 'img', '', ['/C', '/Ref']],
        ['Mat', 'grad', '', ['/O', '/Ref']],
        ['Mat', 'angleOfs', '', ['/O', '/Ref']],
        ['Size', 'paddingTL', 'Size()', []],
        ['Size', 'paddingBR', 'Size()', []]],
    'void']
ok: FUNC <void cv.HOGDescriptor.computeGradient [ARG Mat img=, ARG Mat grad=, ARG Mat angleOfs=, ARG Size paddingTL=Size(), ARG Size paddingBR=Size()]>

--- Incoming ---
[   'cv.HOGDescriptor.getDefaultPeopleDetector',
    'vector_float',
    ['/S'],
    [],
    'std::vector<float>']
ok: FUNC <vector_float cv.HOGDescriptor.getDefaultPeopleDetector []>

--- Incoming ---
[   'cv.HOGDescriptor.getDaimlerPeopleDetector',
    'vector_float',
    ['/S'],
    [],
    'std::vector<float>']
ok: FUNC <vector_float cv.HOGDescriptor.getDaimlerPeopleDetector []>


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/objdetect\include\opencv2\objdetect\detection_based_tracker.hpp =====
Namespaces: {'', 'cv'}

--- Incoming ---
['const cv.DetectionBasedTracker.DETECTED_NOT_SHOWN_YET', '0', [], [], None]
class not found: CONST DETECTED_NOT_SHOWN_YET=0

--- Incoming ---
['const cv.DetectionBasedTracker.DETECTED', '1', [], [], None]
class not found: CONST DETECTED=1

--- Incoming ---
['const cv.DetectionBasedTracker.DETECTED_TEMPORARY_LOST', '2', [], [], None]
class not found: CONST DETECTED_TEMPORARY_LOST=2

--- Incoming ---
['const cv.DetectionBasedTracker.WRONG_OBJECT', '3', [], [], None]
class not found: CONST WRONG_OBJECT=3


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/objdetect\include\opencv2\objdetect\objdetect.hpp =====
Namespaces: {'', 'cv'}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/objdetect\include\opencv2\objdetect\objdetect.hpp


===== Generating... =====
CLASS ::.Objdetect : 
[CONST CASCADE_DO_CANNY_PRUNING=1, CONST CASCADE_SCALE_IMAGE=2, CONST CASCADE_FIND_BIGGEST_OBJECT=4, CONST CASCADE_DO_ROUGH_SEARCH=8]
FUNC <void cv..groupRectangles [ARG vector_Rect rectList=, ARG vector_int weights=, ARG int groupThreshold=, ARG double eps=0.2]>
java: void groupRectangles(MatOfRect rectList, MatOfInt weights, int groupThreshold, double eps)
java: void groupRectangles(MatOfRect rectList, MatOfInt weights, int groupThreshold)
CLASS cv::.BaseCascadeClassifier : Algorithm
CLASS cv::.CascadeClassifier : 
FUNC < cv.CascadeClassifier.CascadeClassifier [ARG String filename=]>
java:  CascadeClassifier(String filename)
FUNC < cv.CascadeClassifier.CascadeClassifier []>
java:  CascadeClassifier()
FUNC <Size cv.CascadeClassifier.getOriginalWindowSize []>
java: Size getOriginalWindowSize()
FUNC <bool cv.CascadeClassifier.convert [ARG String oldcascade=, ARG String newcascade=]>
java: boolean convert(String oldcascade, String newcascade)
FUNC <bool cv.CascadeClassifier.empty []>
java: boolean empty()
FUNC <bool cv.CascadeClassifier.isOldFormatCascade []>
java: boolean isOldFormatCascade()
FUNC <bool cv.CascadeClassifier.load [ARG String filename=]>
java: boolean load(String filename)
FUNC <bool cv.CascadeClassifier.read [ARG FileNode node=]>
SKIP:bool cv::CascadeClassifier::read(FileNode node)	 due to ARG typeFileNode/I
FUNC <int cv.CascadeClassifier.getFeatureType []>
java: int getFeatureType()
FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size()]>
java: void detectMultiScale(Mat image, MatOfRect objects, double scaleFactor, int minNeighbors, int flags, Size minSize, Size maxSize)
java: void detectMultiScale(Mat image, MatOfRect objects, double scaleFactor, int minNeighbors, int flags, Size minSize)
java: void detectMultiScale(Mat image, MatOfRect objects, double scaleFactor, int minNeighbors, int flags)
java: void detectMultiScale(Mat image, MatOfRect objects, double scaleFactor, int minNeighbors)
java: void detectMultiScale(Mat image, MatOfRect objects, double scaleFactor)
java: void detectMultiScale(Mat image, MatOfRect objects)
FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG vector_int numDetections=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size()]>
java: void detectMultiScale2(Mat image, MatOfRect objects, MatOfInt numDetections, double scaleFactor, int minNeighbors, int flags, Size minSize, Size maxSize)
java: void detectMultiScale2(Mat image, MatOfRect objects, MatOfInt numDetections, double scaleFactor, int minNeighbors, int flags, Size minSize)
java: void detectMultiScale2(Mat image, MatOfRect objects, MatOfInt numDetections, double scaleFactor, int minNeighbors, int flags)
java: void detectMultiScale2(Mat image, MatOfRect objects, MatOfInt numDetections, double scaleFactor, int minNeighbors)
java: void detectMultiScale2(Mat image, MatOfRect objects, MatOfInt numDetections, double scaleFactor)
java: void detectMultiScale2(Mat image, MatOfRect objects, MatOfInt numDetections)
FUNC <void cv.CascadeClassifier.detectMultiScale [ARG Mat image=, ARG vector_Rect objects=, ARG vector_int rejectLevels=, ARG vector_double levelWeights=, ARG double scaleFactor=1.1, ARG int minNeighbors=3, ARG int flags=0, ARG Size minSize=Size(), ARG Size maxSize=Size(), ARG bool outputRejectLevels=false]>
java: void detectMultiScale3(Mat image, MatOfRect objects, MatOfInt rejectLevels, MatOfDouble levelWeights, double scaleFactor, int minNeighbors, int flags, Size minSize, Size maxSize, boolean outputRejectLevels)
java: void detectMultiScale3(Mat image, MatOfRect objects, MatOfInt rejectLevels, MatOfDouble levelWeights, double scaleFactor, int minNeighbors, int flags, Size minSize, Size maxSize)
java: void detectMultiScale3(Mat image, MatOfRect objects, MatOfInt rejectLevels, MatOfDouble levelWeights, double scaleFactor, int minNeighbors, int flags, Size minSize)
java: void detectMultiScale3(Mat image, MatOfRect objects, MatOfInt rejectLevels, MatOfDouble levelWeights, double scaleFactor, int minNeighbors, int flags)
java: void detectMultiScale3(Mat image, MatOfRect objects, MatOfInt rejectLevels, MatOfDouble levelWeights, double scaleFactor, int minNeighbors)
java: void detectMultiScale3(Mat image, MatOfRect objects, MatOfInt rejectLevels, MatOfDouble levelWeights, double scaleFactor)
java: void detectMultiScale3(Mat image, MatOfRect objects, MatOfInt rejectLevels, MatOfDouble levelWeights)
CLASS cv::.HOGDescriptor : 
[CONST L2Hys=0, CONST DEFAULT_NLEVELS=64]
FUNC < cv.HOGDescriptor.HOGDescriptor [ARG Size _winSize=, ARG Size _blockSize=, ARG Size _blockStride=, ARG Size _cellSize=, ARG int _nbins=, ARG int _derivAperture=1, ARG double _winSigma=-1, ARG int _histogramNormType=HOGDescriptor::L2Hys, ARG double _L2HysThreshold=0.2, ARG bool _gammaCorrection=false, ARG int _nlevels=HOGDescriptor::DEFAULT_NLEVELS, ARG bool _signedGradient=false]>
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins, int _derivAperture, double _winSigma, int _histogramNormType, double _L2HysThreshold, boolean _gammaCorrection, int _nlevels, boolean _signedGradient)
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins, int _derivAperture, double _winSigma, int _histogramNormType, double _L2HysThreshold, boolean _gammaCorrection, int _nlevels)
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins, int _derivAperture, double _winSigma, int _histogramNormType, double _L2HysThreshold, boolean _gammaCorrection)
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins, int _derivAperture, double _winSigma, int _histogramNormType, double _L2HysThreshold)
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins, int _derivAperture, double _winSigma, int _histogramNormType)
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins, int _derivAperture, double _winSigma)
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins, int _derivAperture)
java:  HOGDescriptor(Size _winSize, Size _blockSize, Size _blockStride, Size _cellSize, int _nbins)
FUNC < cv.HOGDescriptor.HOGDescriptor [ARG String filename=]>
java:  HOGDescriptor(String filename)
FUNC < cv.HOGDescriptor.HOGDescriptor []>
java:  HOGDescriptor()
FUNC <bool cv.HOGDescriptor.checkDetectorSize []>
java: boolean checkDetectorSize()
FUNC <bool cv.HOGDescriptor.load [ARG String filename=, ARG String objname=String()]>
java: boolean load(String filename, String objname)
java: boolean load(String filename)
FUNC <double cv.HOGDescriptor.getWinSigma []>
java: double getWinSigma()
FUNC <size_t cv.HOGDescriptor.getDescriptorSize []>
java: long getDescriptorSize()
FUNC <vector_float cv.HOGDescriptor.getDaimlerPeopleDetector []>
java: MatOfFloat getDaimlerPeopleDetector()
FUNC <vector_float cv.HOGDescriptor.getDefaultPeopleDetector []>
java: MatOfFloat getDefaultPeopleDetector()
FUNC <void cv.HOGDescriptor.compute [ARG Mat img=, ARG vector_float descriptors=, ARG Size winStride=Size(), ARG Size padding=Size(), ARG vector_Point locations=std::vector<Point>()]>
java: void compute(Mat img, MatOfFloat descriptors, Size winStride, Size padding, MatOfPoint locations)
java: void compute(Mat img, MatOfFloat descriptors, Size winStride, Size padding)
java: void compute(Mat img, MatOfFloat descriptors, Size winStride)
java: void compute(Mat img, MatOfFloat descriptors)
FUNC <void cv.HOGDescriptor.computeGradient [ARG Mat img=, ARG Mat grad=, ARG Mat angleOfs=, ARG Size paddingTL=Size(), ARG Size paddingBR=Size()]>
java: void computeGradient(Mat img, Mat grad, Mat angleOfs, Size paddingTL, Size paddingBR)
java: void computeGradient(Mat img, Mat grad, Mat angleOfs, Size paddingTL)
java: void computeGradient(Mat img, Mat grad, Mat angleOfs)
FUNC <void cv.HOGDescriptor.detect [ARG Mat img=, ARG vector_Point foundLocations=, ARG vector_double weights=, ARG double hitThreshold=0, ARG Size winStride=Size(), ARG Size padding=Size(), ARG vector_Point searchLocations=std::vector<Point>()]>
java: void detect(Mat img, MatOfPoint foundLocations, MatOfDouble weights, double hitThreshold, Size winStride, Size padding, MatOfPoint searchLocations)
java: void detect(Mat img, MatOfPoint foundLocations, MatOfDouble weights, double hitThreshold, Size winStride, Size padding)
java: void detect(Mat img, MatOfPoint foundLocations, MatOfDouble weights, double hitThreshold, Size winStride)
java: void detect(Mat img, MatOfPoint foundLocations, MatOfDouble weights, double hitThreshold)
java: void detect(Mat img, MatOfPoint foundLocations, MatOfDouble weights)
FUNC <void cv.HOGDescriptor.detectMultiScale [ARG Mat img=, ARG vector_Rect foundLocations=, ARG vector_double foundWeights=, ARG double hitThreshold=0, ARG Size winStride=Size(), ARG Size padding=Size(), ARG double scale=1.05, ARG double finalThreshold=2.0, ARG bool useMeanshiftGrouping=false]>
java: void detectMultiScale(Mat img, MatOfRect foundLocations, MatOfDouble foundWeights, double hitThreshold, Size winStride, Size padding, double scale, double finalThreshold, boolean useMeanshiftGrouping)
java: void detectMultiScale(Mat img, MatOfRect foundLocations, MatOfDouble foundWeights, double hitThreshold, Size winStride, Size padding, double scale, double finalThreshold)
java: void detectMultiScale(Mat img, MatOfRect foundLocations, MatOfDouble foundWeights, double hitThreshold, Size winStride, Size padding, double scale)
java: void detectMultiScale(Mat img, MatOfRect foundLocations, MatOfDouble foundWeights, double hitThreshold, Size winStride, Size padding)
java: void detectMultiScale(Mat img, MatOfRect foundLocations, MatOfDouble foundWeights, double hitThreshold, Size winStride)
java: void detectMultiScale(Mat img, MatOfRect foundLocations, MatOfDouble foundWeights, double hitThreshold)
java: void detectMultiScale(Mat img, MatOfRect foundLocations, MatOfDouble foundWeights)
FUNC <void cv.HOGDescriptor.save [ARG String filename=, ARG String objname=String()]>
java: void save(String filename, String objname)
java: void save(String filename)
FUNC <void cv.HOGDescriptor.setSVMDetector [ARG Mat _svmdetector=]>
java: void setSVMDetector(Mat _svmdetector)
FUNC <Size cv.HOGDescriptor.get_winSize []>
java: Size get_winSize()
FUNC <Size cv.HOGDescriptor.get_blockSize []>
java: Size get_blockSize()
FUNC <Size cv.HOGDescriptor.get_blockStride []>
java: Size get_blockStride()
FUNC <Size cv.HOGDescriptor.get_cellSize []>
java: Size get_cellSize()
FUNC <int cv.HOGDescriptor.get_nbins []>
java: int get_nbins()
FUNC <int cv.HOGDescriptor.get_derivAperture []>
java: int get_derivAperture()
FUNC <double cv.HOGDescriptor.get_winSigma []>
java: double get_winSigma()
FUNC <int cv.HOGDescriptor.get_histogramNormType []>
java: int get_histogramNormType()
FUNC <double cv.HOGDescriptor.get_L2HysThreshold []>
java: double get_L2HysThreshold()
FUNC <bool cv.HOGDescriptor.get_gammaCorrection []>
java: boolean get_gammaCorrection()
FUNC <vector_float cv.HOGDescriptor.get_svmDetector []>
java: MatOfFloat get_svmDetector()
FUNC <int cv.HOGDescriptor.get_nlevels []>
java: int get_nlevels()
FUNC <bool cv.HOGDescriptor.get_signedGradient []>
java: boolean get_signedGradient()

=== MODULE: photo (C:/Users/d_dan/Desktop/opencv-master\modules/photo) ===


Files (4):
['C:/Users/d_dan/Desktop/opencv-master\\modules/photo\\include\\opencv2\\photo\\photo_c.h',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/photo\\include\\opencv2\\photo.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/photo\\include\\opencv2\\photo\\cuda.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/photo\\include\\opencv2\\photo\\photo.hpp']

Common headers (0):
[]
ok: class CLASS ::.Photo : , name: Photo, base: 


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/photo\include\opencv2\photo\photo_c.h =====
Namespaces: {''}

--- Incoming ---
['const CV_INPAINT_NS', '0', [], [], None]
ok: CONST CV_INPAINT_NS=0

--- Incoming ---
['const CV_INPAINT_TELEA', '1', [], [], None]
ok: CONST CV_INPAINT_TELEA=1


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/photo\include\opencv2\photo.hpp =====
Namespaces: {'', 'cv'}

--- Incoming ---
['const cv.INPAINT_NS', '0', [], [], None]
ok: CONST INPAINT_NS=0

--- Incoming ---
['const cv.INPAINT_TELEA', '1', [], [], None]
ok: CONST INPAINT_TELEA=1

--- Incoming ---
['const cv.NORMAL_CLONE', '1', [], [], None]
ok: CONST NORMAL_CLONE=1

--- Incoming ---
['const cv.MIXED_CLONE', '2', [], [], None]
ok: CONST MIXED_CLONE=2

--- Incoming ---
['const cv.MONOCHROME_TRANSFER', '3', [], [], None]
ok: CONST MONOCHROME_TRANSFER=3

--- Incoming ---
['const cv.RECURS_FILTER', '1', [], [], None]
ok: CONST RECURS_FILTER=1

--- Incoming ---
['const cv.NORMCONV_FILTER', '2', [], [], None]
ok: CONST NORMCONV_FILTER=2

--- Incoming ---
[   'cv.inpaint',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'inpaintMask', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['double', 'inpaintRadius', '', []],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv..inpaint [ARG Mat src=, ARG Mat inpaintMask=, ARG Mat dst=, ARG double inpaintRadius=, ARG int flags=]>

--- Incoming ---
[   'cv.fastNlMeansDenoising',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['float', 'h', '3', []],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []]],
    'void']
ok: FUNC <void cv..fastNlMeansDenoising [ARG Mat src=, ARG Mat dst=, ARG float h=3, ARG int templateWindowSize=7, ARG int searchWindowSize=21]>

--- Incoming ---
[   'cv.fastNlMeansDenoising',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['vector_float', 'h', '', ['/C', '/Ref']],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []],
        ['int', 'normType', 'NORM_L2', []]],
    'void']
ok: FUNC <void cv..fastNlMeansDenoising [ARG Mat src=, ARG Mat dst=, ARG vector_float h=, ARG int templateWindowSize=7, ARG int searchWindowSize=21, ARG int normType=NORM_L2]>

--- Incoming ---
[   'cv.fastNlMeansDenoisingColored',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['float', 'h', '3', []],
        ['float', 'hColor', '3', []],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []]],
    'void']
ok: FUNC <void cv..fastNlMeansDenoisingColored [ARG Mat src=, ARG Mat dst=, ARG float h=3, ARG float hColor=3, ARG int templateWindowSize=7, ARG int searchWindowSize=21]>

--- Incoming ---
[   'cv.fastNlMeansDenoisingMulti',
    'void',
    [],
    [   ['vector_Mat', 'srcImgs', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'imgToDenoiseIndex', '', []],
        ['int', 'temporalWindowSize', '', []],
        ['float', 'h', '3', []],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []]],
    'void']
ok: FUNC <void cv..fastNlMeansDenoisingMulti [ARG vector_Mat srcImgs=, ARG Mat dst=, ARG int imgToDenoiseIndex=, ARG int temporalWindowSize=, ARG float h=3, ARG int templateWindowSize=7, ARG int searchWindowSize=21]>

--- Incoming ---
[   'cv.fastNlMeansDenoisingMulti',
    'void',
    [],
    [   ['vector_Mat', 'srcImgs', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'imgToDenoiseIndex', '', []],
        ['int', 'temporalWindowSize', '', []],
        ['vector_float', 'h', '', ['/C', '/Ref']],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []],
        ['int', 'normType', 'NORM_L2', []]],
    'void']
ok: FUNC <void cv..fastNlMeansDenoisingMulti [ARG vector_Mat srcImgs=, ARG Mat dst=, ARG int imgToDenoiseIndex=, ARG int temporalWindowSize=, ARG vector_float h=, ARG int templateWindowSize=7, ARG int searchWindowSize=21, ARG int normType=NORM_L2]>

--- Incoming ---
[   'cv.fastNlMeansDenoisingColoredMulti',
    'void',
    [],
    [   ['vector_Mat', 'srcImgs', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'imgToDenoiseIndex', '', []],
        ['int', 'temporalWindowSize', '', []],
        ['float', 'h', '3', []],
        ['float', 'hColor', '3', []],
        ['int', 'templateWindowSize', '7', []],
        ['int', 'searchWindowSize', '21', []]],
    'void']
ok: FUNC <void cv..fastNlMeansDenoisingColoredMulti [ARG vector_Mat srcImgs=, ARG Mat dst=, ARG int imgToDenoiseIndex=, ARG int temporalWindowSize=, ARG float h=3, ARG float hColor=3, ARG int templateWindowSize=7, ARG int searchWindowSize=21]>

--- Incoming ---
[   'cv.denoise_TVL1',
    'void',
    [],
    [   ['vector_Mat', 'observations', '', ['/C', '/Ref']],
        ['Mat', 'result', '', ['/Ref']],
        ['double', 'lambda', '1.0', []],
        ['int', 'niters', '30', []]],
    'void']
ok: FUNC <void cv..denoise_TVL1 [ARG vector_Mat observations=, ARG Mat result=, ARG double lambda=1.0, ARG int niters=30]>

--- Incoming ---
['const cv.LDR_SIZE', '256', [], [], None]
ok: CONST LDR_SIZE=256

--- Incoming ---
['class cv.Tonemap', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.Tonemap : Algorithm, name: Tonemap, base: Algorithm

--- Incoming ---
[   'cv.Tonemap.process',
    'void',
    ['/V', '/PV'],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv.Tonemap.process [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
['cv.Tonemap.getGamma', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.Tonemap.getGamma []>

--- Incoming ---
[   'cv.Tonemap.setGamma',
    'void',
    ['/V', '/PV'],
    [['float', 'gamma', '', []]],
    'void']
ok: FUNC <void cv.Tonemap.setGamma [ARG float gamma=]>

--- Incoming ---
[   'cv.createTonemap',
    'Ptr_Tonemap',
    [],
    [['float', 'gamma', '1.0f', []]],
    'Ptr<Tonemap>']
ok: FUNC <Ptr_Tonemap cv..createTonemap [ARG float gamma=1.0f]>

--- Incoming ---
['class cv.TonemapDrago', ': cv::Tonemap', [], [], None]
ok: class CLASS cv::.TonemapDrago : Tonemap, name: TonemapDrago, base: Tonemap

--- Incoming ---
['cv.TonemapDrago.getSaturation', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.TonemapDrago.getSaturation []>

--- Incoming ---
[   'cv.TonemapDrago.setSaturation',
    'void',
    ['/V', '/PV'],
    [['float', 'saturation', '', []]],
    'void']
ok: FUNC <void cv.TonemapDrago.setSaturation [ARG float saturation=]>

--- Incoming ---
['cv.TonemapDrago.getBias', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.TonemapDrago.getBias []>

--- Incoming ---
[   'cv.TonemapDrago.setBias',
    'void',
    ['/V', '/PV'],
    [['float', 'bias', '', []]],
    'void']
ok: FUNC <void cv.TonemapDrago.setBias [ARG float bias=]>

--- Incoming ---
[   'cv.createTonemapDrago',
    'Ptr_TonemapDrago',
    [],
    [   ['float', 'gamma', '1.0f', []],
        ['float', 'saturation', '1.0f', []],
        ['float', 'bias', '0.85f', []]],
    'Ptr<TonemapDrago>']
ok: FUNC <Ptr_TonemapDrago cv..createTonemapDrago [ARG float gamma=1.0f, ARG float saturation=1.0f, ARG float bias=0.85f]>

--- Incoming ---
['class cv.TonemapDurand', ': cv::Tonemap', [], [], None]
ok: class CLASS cv::.TonemapDurand : Tonemap, name: TonemapDurand, base: Tonemap

--- Incoming ---
['cv.TonemapDurand.getSaturation', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.TonemapDurand.getSaturation []>

--- Incoming ---
[   'cv.TonemapDurand.setSaturation',
    'void',
    ['/V', '/PV'],
    [['float', 'saturation', '', []]],
    'void']
ok: FUNC <void cv.TonemapDurand.setSaturation [ARG float saturation=]>

--- Incoming ---
['cv.TonemapDurand.getContrast', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.TonemapDurand.getContrast []>

--- Incoming ---
[   'cv.TonemapDurand.setContrast',
    'void',
    ['/V', '/PV'],
    [['float', 'contrast', '', []]],
    'void']
ok: FUNC <void cv.TonemapDurand.setContrast [ARG float contrast=]>

--- Incoming ---
['cv.TonemapDurand.getSigmaSpace', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.TonemapDurand.getSigmaSpace []>

--- Incoming ---
[   'cv.TonemapDurand.setSigmaSpace',
    'void',
    ['/V', '/PV'],
    [['float', 'sigma_space', '', []]],
    'void']
ok: FUNC <void cv.TonemapDurand.setSigmaSpace [ARG float sigma_space=]>

--- Incoming ---
['cv.TonemapDurand.getSigmaColor', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.TonemapDurand.getSigmaColor []>

--- Incoming ---
[   'cv.TonemapDurand.setSigmaColor',
    'void',
    ['/V', '/PV'],
    [['float', 'sigma_color', '', []]],
    'void']
ok: FUNC <void cv.TonemapDurand.setSigmaColor [ARG float sigma_color=]>

--- Incoming ---
[   'cv.createTonemapDurand',
    'Ptr_TonemapDurand',
    [],
    [   ['float', 'gamma', '1.0f', []],
        ['float', 'contrast', '4.0f', []],
        ['float', 'saturation', '1.0f', []],
        ['float', 'sigma_space', '2.0f', []],
        ['float', 'sigma_color', '2.0f', []]],
    'Ptr<TonemapDurand>']
ok: FUNC <Ptr_TonemapDurand cv..createTonemapDurand [ARG float gamma=1.0f, ARG float contrast=4.0f, ARG float saturation=1.0f, ARG float sigma_space=2.0f, ARG float sigma_color=2.0f]>

--- Incoming ---
['class cv.TonemapReinhard', ': cv::Tonemap', [], [], None]
ok: class CLASS cv::.TonemapReinhard : Tonemap, name: TonemapReinhard, base: Tonemap

--- Incoming ---
['cv.TonemapReinhard.getIntensity', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.TonemapReinhard.getIntensity []>

--- Incoming ---
[   'cv.TonemapReinhard.setIntensity',
    'void',
    ['/V', '/PV'],
    [['float', 'intensity', '', []]],
    'void']
ok: FUNC <void cv.TonemapReinhard.setIntensity [ARG float intensity=]>

--- Incoming ---
[   'cv.TonemapReinhard.getLightAdaptation',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.TonemapReinhard.getLightAdaptation []>

--- Incoming ---
[   'cv.TonemapReinhard.setLightAdaptation',
    'void',
    ['/V', '/PV'],
    [['float', 'light_adapt', '', []]],
    'void']
ok: FUNC <void cv.TonemapReinhard.setLightAdaptation [ARG float light_adapt=]>

--- Incoming ---
[   'cv.TonemapReinhard.getColorAdaptation',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.TonemapReinhard.getColorAdaptation []>

--- Incoming ---
[   'cv.TonemapReinhard.setColorAdaptation',
    'void',
    ['/V', '/PV'],
    [['float', 'color_adapt', '', []]],
    'void']
ok: FUNC <void cv.TonemapReinhard.setColorAdaptation [ARG float color_adapt=]>

--- Incoming ---
[   'cv.createTonemapReinhard',
    'Ptr_TonemapReinhard',
    [],
    [   ['float', 'gamma', '1.0f', []],
        ['float', 'intensity', '0.0f', []],
        ['float', 'light_adapt', '1.0f', []],
        ['float', 'color_adapt', '0.0f', []]],
    'Ptr<TonemapReinhard>']
ok: FUNC <Ptr_TonemapReinhard cv..createTonemapReinhard [ARG float gamma=1.0f, ARG float intensity=0.0f, ARG float light_adapt=1.0f, ARG float color_adapt=0.0f]>

--- Incoming ---
['class cv.TonemapMantiuk', ': cv::Tonemap', [], [], None]
ok: class CLASS cv::.TonemapMantiuk : Tonemap, name: TonemapMantiuk, base: Tonemap

--- Incoming ---
['cv.TonemapMantiuk.getScale', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.TonemapMantiuk.getScale []>

--- Incoming ---
[   'cv.TonemapMantiuk.setScale',
    'void',
    ['/V', '/PV'],
    [['float', 'scale', '', []]],
    'void']
ok: FUNC <void cv.TonemapMantiuk.setScale [ARG float scale=]>

--- Incoming ---
['cv.TonemapMantiuk.getSaturation', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.TonemapMantiuk.getSaturation []>

--- Incoming ---
[   'cv.TonemapMantiuk.setSaturation',
    'void',
    ['/V', '/PV'],
    [['float', 'saturation', '', []]],
    'void']
ok: FUNC <void cv.TonemapMantiuk.setSaturation [ARG float saturation=]>

--- Incoming ---
[   'cv.createTonemapMantiuk',
    'Ptr_TonemapMantiuk',
    [],
    [   ['float', 'gamma', '1.0f', []],
        ['float', 'scale', '0.7f', []],
        ['float', 'saturation', '1.0f', []]],
    'Ptr<TonemapMantiuk>']
ok: FUNC <Ptr_TonemapMantiuk cv..createTonemapMantiuk [ARG float gamma=1.0f, ARG float scale=0.7f, ARG float saturation=1.0f]>

--- Incoming ---
['class cv.AlignExposures', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.AlignExposures : Algorithm, name: AlignExposures, base: Algorithm

--- Incoming ---
[   'cv.AlignExposures.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['vector_Mat', 'dst', '', ['/Ref']],
        ['Mat', 'times', '', []],
        ['Mat', 'response', '', []]],
    'void']
ok: FUNC <void cv.AlignExposures.process [ARG vector_Mat src=, ARG vector_Mat dst=, ARG Mat times=, ARG Mat response=]>

--- Incoming ---
['class cv.AlignMTB', ': cv::AlignExposures', [], [], None]
ok: class CLASS cv::.AlignMTB : AlignExposures, name: AlignMTB, base: AlignExposures

--- Incoming ---
[   'cv.AlignMTB.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['vector_Mat', 'dst', '', ['/Ref']],
        ['Mat', 'times', '', []],
        ['Mat', 'response', '', []]],
    'void']
ok: FUNC <void cv.AlignMTB.process [ARG vector_Mat src=, ARG vector_Mat dst=, ARG Mat times=, ARG Mat response=]>

--- Incoming ---
[   'cv.AlignMTB.process',
    'void',
    ['/V', '/PV'],
    [['vector_Mat', 'src', '', []], ['vector_Mat', 'dst', '', ['/Ref']]],
    'void']
ok: FUNC <void cv.AlignMTB.process [ARG vector_Mat src=, ARG vector_Mat dst=]>

--- Incoming ---
[   'cv.AlignMTB.calculateShift',
    'Point',
    ['/V', '/PV'],
    [['Mat', 'img0', '', []], ['Mat', 'img1', '', []]],
    'Point']
ok: FUNC <Point cv.AlignMTB.calculateShift [ARG Mat img0=, ARG Mat img1=]>

--- Incoming ---
[   'cv.AlignMTB.shiftMat',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Point', 'shift', '', ['/C']]],
    'void']
ok: FUNC <void cv.AlignMTB.shiftMat [ARG Mat src=, ARG Mat dst=, ARG Point shift=]>

--- Incoming ---
[   'cv.AlignMTB.computeBitmaps',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'img', '', []],
        ['Mat', 'tb', '', ['/O']],
        ['Mat', 'eb', '', ['/O']]],
    'void']
ok: FUNC <void cv.AlignMTB.computeBitmaps [ARG Mat img=, ARG Mat tb=, ARG Mat eb=]>

--- Incoming ---
['cv.AlignMTB.getMaxBits', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AlignMTB.getMaxBits []>

--- Incoming ---
[   'cv.AlignMTB.setMaxBits',
    'void',
    ['/V', '/PV'],
    [['int', 'max_bits', '', []]],
    'void']
ok: FUNC <void cv.AlignMTB.setMaxBits [ARG int max_bits=]>

--- Incoming ---
['cv.AlignMTB.getExcludeRange', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AlignMTB.getExcludeRange []>

--- Incoming ---
[   'cv.AlignMTB.setExcludeRange',
    'void',
    ['/V', '/PV'],
    [['int', 'exclude_range', '', []]],
    'void']
ok: FUNC <void cv.AlignMTB.setExcludeRange [ARG int exclude_range=]>

--- Incoming ---
['cv.AlignMTB.getCut', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.AlignMTB.getCut []>

--- Incoming ---
[   'cv.AlignMTB.setCut',
    'void',
    ['/V', '/PV'],
    [['bool', 'value', '', []]],
    'void']
ok: FUNC <void cv.AlignMTB.setCut [ARG bool value=]>

--- Incoming ---
[   'cv.createAlignMTB',
    'Ptr_AlignMTB',
    [],
    [   ['int', 'max_bits', '6', []],
        ['int', 'exclude_range', '4', []],
        ['bool', 'cut', 'true', []]],
    'Ptr<AlignMTB>']
ok: FUNC <Ptr_AlignMTB cv..createAlignMTB [ARG int max_bits=6, ARG int exclude_range=4, ARG bool cut=true]>

--- Incoming ---
['class cv.CalibrateCRF', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.CalibrateCRF : Algorithm, name: CalibrateCRF, base: Algorithm

--- Incoming ---
[   'cv.CalibrateCRF.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'times', '', []]],
    'void']
ok: FUNC <void cv.CalibrateCRF.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=]>

--- Incoming ---
['class cv.CalibrateDebevec', ': cv::CalibrateCRF', [], [], None]
ok: class CLASS cv::.CalibrateDebevec : CalibrateCRF, name: CalibrateDebevec, base: CalibrateCRF

--- Incoming ---
['cv.CalibrateDebevec.getLambda', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.CalibrateDebevec.getLambda []>

--- Incoming ---
[   'cv.CalibrateDebevec.setLambda',
    'void',
    ['/V', '/PV'],
    [['float', 'lambda', '', []]],
    'void']
ok: FUNC <void cv.CalibrateDebevec.setLambda [ARG float lambda=]>

--- Incoming ---
['cv.CalibrateDebevec.getSamples', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.CalibrateDebevec.getSamples []>

--- Incoming ---
[   'cv.CalibrateDebevec.setSamples',
    'void',
    ['/V', '/PV'],
    [['int', 'samples', '', []]],
    'void']
ok: FUNC <void cv.CalibrateDebevec.setSamples [ARG int samples=]>

--- Incoming ---
['cv.CalibrateDebevec.getRandom', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.CalibrateDebevec.getRandom []>

--- Incoming ---
[   'cv.CalibrateDebevec.setRandom',
    'void',
    ['/V', '/PV'],
    [['bool', 'random', '', []]],
    'void']
ok: FUNC <void cv.CalibrateDebevec.setRandom [ARG bool random=]>

--- Incoming ---
[   'cv.createCalibrateDebevec',
    'Ptr_CalibrateDebevec',
    [],
    [   ['int', 'samples', '70', []],
        ['float', 'lambda', '10.0f', []],
        ['bool', 'random', 'false', []]],
    'Ptr<CalibrateDebevec>']
ok: FUNC <Ptr_CalibrateDebevec cv..createCalibrateDebevec [ARG int samples=70, ARG float lambda=10.0f, ARG bool random=false]>

--- Incoming ---
['class cv.CalibrateRobertson', ': cv::CalibrateCRF', [], [], None]
ok: class CLASS cv::.CalibrateRobertson : CalibrateCRF, name: CalibrateRobertson, base: CalibrateCRF

--- Incoming ---
['cv.CalibrateRobertson.getMaxIter', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.CalibrateRobertson.getMaxIter []>

--- Incoming ---
[   'cv.CalibrateRobertson.setMaxIter',
    'void',
    ['/V', '/PV'],
    [['int', 'max_iter', '', []]],
    'void']
ok: FUNC <void cv.CalibrateRobertson.setMaxIter [ARG int max_iter=]>

--- Incoming ---
[   'cv.CalibrateRobertson.getThreshold',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.CalibrateRobertson.getThreshold []>

--- Incoming ---
[   'cv.CalibrateRobertson.setThreshold',
    'void',
    ['/V', '/PV'],
    [['float', 'threshold', '', []]],
    'void']
ok: FUNC <void cv.CalibrateRobertson.setThreshold [ARG float threshold=]>

--- Incoming ---
['cv.CalibrateRobertson.getRadiance', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.CalibrateRobertson.getRadiance []>

--- Incoming ---
[   'cv.createCalibrateRobertson',
    'Ptr_CalibrateRobertson',
    [],
    [['int', 'max_iter', '30', []], ['float', 'threshold', '0.01f', []]],
    'Ptr<CalibrateRobertson>']
ok: FUNC <Ptr_CalibrateRobertson cv..createCalibrateRobertson [ARG int max_iter=30, ARG float threshold=0.01f]>

--- Incoming ---
['class cv.MergeExposures', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.MergeExposures : Algorithm, name: MergeExposures, base: Algorithm

--- Incoming ---
[   'cv.MergeExposures.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'times', '', []],
        ['Mat', 'response', '', []]],
    'void']
ok: FUNC <void cv.MergeExposures.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=, ARG Mat response=]>

--- Incoming ---
['class cv.MergeDebevec', ': cv::MergeExposures', [], [], None]
ok: class CLASS cv::.MergeDebevec : MergeExposures, name: MergeDebevec, base: MergeExposures

--- Incoming ---
[   'cv.MergeDebevec.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'times', '', []],
        ['Mat', 'response', '', []]],
    'void']
ok: FUNC <void cv.MergeDebevec.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=, ARG Mat response=]>

--- Incoming ---
[   'cv.MergeDebevec.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'times', '', []]],
    'void']
ok: FUNC <void cv.MergeDebevec.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=]>

--- Incoming ---
['cv.createMergeDebevec', 'Ptr_MergeDebevec', [], [], 'Ptr<MergeDebevec>']
ok: FUNC <Ptr_MergeDebevec cv..createMergeDebevec []>

--- Incoming ---
['class cv.MergeMertens', ': cv::MergeExposures', [], [], None]
ok: class CLASS cv::.MergeMertens : MergeExposures, name: MergeMertens, base: MergeExposures

--- Incoming ---
[   'cv.MergeMertens.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'times', '', []],
        ['Mat', 'response', '', []]],
    'void']
ok: FUNC <void cv.MergeMertens.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=, ARG Mat response=]>

--- Incoming ---
[   'cv.MergeMertens.process',
    'void',
    ['/V', '/PV'],
    [['vector_Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv.MergeMertens.process [ARG vector_Mat src=, ARG Mat dst=]>

--- Incoming ---
['cv.MergeMertens.getContrastWeight', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.MergeMertens.getContrastWeight []>

--- Incoming ---
[   'cv.MergeMertens.setContrastWeight',
    'void',
    ['/V', '/PV'],
    [['float', 'contrast_weiht', '', []]],
    'void']
ok: FUNC <void cv.MergeMertens.setContrastWeight [ARG float contrast_weiht=]>

--- Incoming ---
[   'cv.MergeMertens.getSaturationWeight',
    'float',
    ['/C', '/V', '/PV'],
    [],
    'float']
ok: FUNC <float cv.MergeMertens.getSaturationWeight []>

--- Incoming ---
[   'cv.MergeMertens.setSaturationWeight',
    'void',
    ['/V', '/PV'],
    [['float', 'saturation_weight', '', []]],
    'void']
ok: FUNC <void cv.MergeMertens.setSaturationWeight [ARG float saturation_weight=]>

--- Incoming ---
['cv.MergeMertens.getExposureWeight', 'float', ['/C', '/V', '/PV'], [], 'float']
ok: FUNC <float cv.MergeMertens.getExposureWeight []>

--- Incoming ---
[   'cv.MergeMertens.setExposureWeight',
    'void',
    ['/V', '/PV'],
    [['float', 'exposure_weight', '', []]],
    'void']
ok: FUNC <void cv.MergeMertens.setExposureWeight [ARG float exposure_weight=]>

--- Incoming ---
[   'cv.createMergeMertens',
    'Ptr_MergeMertens',
    [],
    [   ['float', 'contrast_weight', '1.0f', []],
        ['float', 'saturation_weight', '1.0f', []],
        ['float', 'exposure_weight', '0.0f', []]],
    'Ptr<MergeMertens>']
ok: FUNC <Ptr_MergeMertens cv..createMergeMertens [ARG float contrast_weight=1.0f, ARG float saturation_weight=1.0f, ARG float exposure_weight=0.0f]>

--- Incoming ---
['class cv.MergeRobertson', ': cv::MergeExposures', [], [], None]
ok: class CLASS cv::.MergeRobertson : MergeExposures, name: MergeRobertson, base: MergeExposures

--- Incoming ---
[   'cv.MergeRobertson.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'times', '', []],
        ['Mat', 'response', '', []]],
    'void']
ok: FUNC <void cv.MergeRobertson.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=, ARG Mat response=]>

--- Incoming ---
[   'cv.MergeRobertson.process',
    'void',
    ['/V', '/PV'],
    [   ['vector_Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'times', '', []]],
    'void']
ok: FUNC <void cv.MergeRobertson.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=]>

--- Incoming ---
['cv.createMergeRobertson', 'Ptr_MergeRobertson', [], [], 'Ptr<MergeRobertson>']
ok: FUNC <Ptr_MergeRobertson cv..createMergeRobertson []>

--- Incoming ---
[   'cv.decolor',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'grayscale', '', ['/O']],
        ['Mat', 'color_boost', '', ['/O']]],
    'void']
ok: FUNC <void cv..decolor [ARG Mat src=, ARG Mat grayscale=, ARG Mat color_boost=]>

--- Incoming ---
[   'cv.seamlessClone',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', []],
        ['Mat', 'mask', '', []],
        ['Point', 'p', '', []],
        ['Mat', 'blend', '', ['/O']],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv..seamlessClone [ARG Mat src=, ARG Mat dst=, ARG Mat mask=, ARG Point p=, ARG Mat blend=, ARG int flags=]>

--- Incoming ---
[   'cv.colorChange',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'mask', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['float', 'red_mul', '1.0f', []],
        ['float', 'green_mul', '1.0f', []],
        ['float', 'blue_mul', '1.0f', []]],
    'void']
ok: FUNC <void cv..colorChange [ARG Mat src=, ARG Mat mask=, ARG Mat dst=, ARG float red_mul=1.0f, ARG float green_mul=1.0f, ARG float blue_mul=1.0f]>

--- Incoming ---
[   'cv.illuminationChange',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'mask', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['float', 'alpha', '0.2f', []],
        ['float', 'beta', '0.4f', []]],
    'void']
ok: FUNC <void cv..illuminationChange [ARG Mat src=, ARG Mat mask=, ARG Mat dst=, ARG float alpha=0.2f, ARG float beta=0.4f]>

--- Incoming ---
[   'cv.textureFlattening',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'mask', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['float', 'low_threshold', '30', []],
        ['float', 'high_threshold', '45', []],
        ['int', 'kernel_size', '3', []]],
    'void']
ok: FUNC <void cv..textureFlattening [ARG Mat src=, ARG Mat mask=, ARG Mat dst=, ARG float low_threshold=30, ARG float high_threshold=45, ARG int kernel_size=3]>

--- Incoming ---
[   'cv.edgePreservingFilter',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['int', 'flags', '1', []],
        ['float', 'sigma_s', '60', []],
        ['float', 'sigma_r', '0.4f', []]],
    'void']
ok: FUNC <void cv..edgePreservingFilter [ARG Mat src=, ARG Mat dst=, ARG int flags=1, ARG float sigma_s=60, ARG float sigma_r=0.4f]>

--- Incoming ---
[   'cv.detailEnhance',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['float', 'sigma_s', '10', []],
        ['float', 'sigma_r', '0.15f', []]],
    'void']
ok: FUNC <void cv..detailEnhance [ARG Mat src=, ARG Mat dst=, ARG float sigma_s=10, ARG float sigma_r=0.15f]>

--- Incoming ---
[   'cv.pencilSketch',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst1', '', ['/O']],
        ['Mat', 'dst2', '', ['/O']],
        ['float', 'sigma_s', '60', []],
        ['float', 'sigma_r', '0.07f', []],
        ['float', 'shade_factor', '0.02f', []]],
    'void']
ok: FUNC <void cv..pencilSketch [ARG Mat src=, ARG Mat dst1=, ARG Mat dst2=, ARG float sigma_s=60, ARG float sigma_r=0.07f, ARG float shade_factor=0.02f]>

--- Incoming ---
[   'cv.stylization',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['float', 'sigma_s', '60', []],
        ['float', 'sigma_r', '0.45f', []]],
    'void']
ok: FUNC <void cv..stylization [ARG Mat src=, ARG Mat dst=, ARG float sigma_s=60, ARG float sigma_r=0.45f]>


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/photo\include\opencv2\photo\cuda.hpp =====
Namespaces: {'', 'cv', 'cv.cuda'}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/photo\include\opencv2\photo\cuda.hpp


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/photo\include\opencv2\photo\photo.hpp =====
Namespaces: {'', 'cv', 'cv.cuda'}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/photo\include\opencv2\photo\photo.hpp


===== Generating... =====
CLASS ::.Photo : 
[CONST CV_INPAINT_NS=0, CONST CV_INPAINT_TELEA=1]
[CONST INPAINT_NS=0, CONST INPAINT_TELEA=1, CONST NORMAL_CLONE=1, CONST MIXED_CLONE=2, CONST MONOCHROME_TRANSFER=3, CONST RECURS_FILTER=1, CONST NORMCONV_FILTER=2, CONST LDR_SIZE=256]
FUNC <Ptr_AlignMTB cv..createAlignMTB [ARG int max_bits=6, ARG int exclude_range=4, ARG bool cut=true]>
java: AlignMTB createAlignMTB(int max_bits, int exclude_range, boolean cut)
java: AlignMTB createAlignMTB(int max_bits, int exclude_range)
java: AlignMTB createAlignMTB(int max_bits)
java: AlignMTB createAlignMTB()
FUNC <Ptr_CalibrateDebevec cv..createCalibrateDebevec [ARG int samples=70, ARG float lambda=10.0f, ARG bool random=false]>
java: CalibrateDebevec createCalibrateDebevec(int samples, float lambda, boolean random)
java: CalibrateDebevec createCalibrateDebevec(int samples, float lambda)
java: CalibrateDebevec createCalibrateDebevec(int samples)
java: CalibrateDebevec createCalibrateDebevec()
FUNC <Ptr_CalibrateRobertson cv..createCalibrateRobertson [ARG int max_iter=30, ARG float threshold=0.01f]>
java: CalibrateRobertson createCalibrateRobertson(int max_iter, float threshold)
java: CalibrateRobertson createCalibrateRobertson(int max_iter)
java: CalibrateRobertson createCalibrateRobertson()
FUNC <Ptr_MergeDebevec cv..createMergeDebevec []>
java: MergeDebevec createMergeDebevec()
FUNC <Ptr_MergeMertens cv..createMergeMertens [ARG float contrast_weight=1.0f, ARG float saturation_weight=1.0f, ARG float exposure_weight=0.0f]>
java: MergeMertens createMergeMertens(float contrast_weight, float saturation_weight, float exposure_weight)
java: MergeMertens createMergeMertens(float contrast_weight, float saturation_weight)
java: MergeMertens createMergeMertens(float contrast_weight)
java: MergeMertens createMergeMertens()
FUNC <Ptr_MergeRobertson cv..createMergeRobertson []>
java: MergeRobertson createMergeRobertson()
FUNC <Ptr_Tonemap cv..createTonemap [ARG float gamma=1.0f]>
java: Tonemap createTonemap(float gamma)
java: Tonemap createTonemap()
FUNC <Ptr_TonemapDrago cv..createTonemapDrago [ARG float gamma=1.0f, ARG float saturation=1.0f, ARG float bias=0.85f]>
java: TonemapDrago createTonemapDrago(float gamma, float saturation, float bias)
java: TonemapDrago createTonemapDrago(float gamma, float saturation)
java: TonemapDrago createTonemapDrago(float gamma)
java: TonemapDrago createTonemapDrago()
FUNC <Ptr_TonemapDurand cv..createTonemapDurand [ARG float gamma=1.0f, ARG float contrast=4.0f, ARG float saturation=1.0f, ARG float sigma_space=2.0f, ARG float sigma_color=2.0f]>
java: TonemapDurand createTonemapDurand(float gamma, float contrast, float saturation, float sigma_space, float sigma_color)
java: TonemapDurand createTonemapDurand(float gamma, float contrast, float saturation, float sigma_space)
java: TonemapDurand createTonemapDurand(float gamma, float contrast, float saturation)
java: TonemapDurand createTonemapDurand(float gamma, float contrast)
java: TonemapDurand createTonemapDurand(float gamma)
java: TonemapDurand createTonemapDurand()
FUNC <Ptr_TonemapMantiuk cv..createTonemapMantiuk [ARG float gamma=1.0f, ARG float scale=0.7f, ARG float saturation=1.0f]>
java: TonemapMantiuk createTonemapMantiuk(float gamma, float scale, float saturation)
java: TonemapMantiuk createTonemapMantiuk(float gamma, float scale)
java: TonemapMantiuk createTonemapMantiuk(float gamma)
java: TonemapMantiuk createTonemapMantiuk()
FUNC <Ptr_TonemapReinhard cv..createTonemapReinhard [ARG float gamma=1.0f, ARG float intensity=0.0f, ARG float light_adapt=1.0f, ARG float color_adapt=0.0f]>
java: TonemapReinhard createTonemapReinhard(float gamma, float intensity, float light_adapt, float color_adapt)
java: TonemapReinhard createTonemapReinhard(float gamma, float intensity, float light_adapt)
java: TonemapReinhard createTonemapReinhard(float gamma, float intensity)
java: TonemapReinhard createTonemapReinhard(float gamma)
java: TonemapReinhard createTonemapReinhard()
FUNC <void cv..colorChange [ARG Mat src=, ARG Mat mask=, ARG Mat dst=, ARG float red_mul=1.0f, ARG float green_mul=1.0f, ARG float blue_mul=1.0f]>
java: void colorChange(Mat src, Mat mask, Mat dst, float red_mul, float green_mul, float blue_mul)
java: void colorChange(Mat src, Mat mask, Mat dst, float red_mul, float green_mul)
java: void colorChange(Mat src, Mat mask, Mat dst, float red_mul)
java: void colorChange(Mat src, Mat mask, Mat dst)
FUNC <void cv..decolor [ARG Mat src=, ARG Mat grayscale=, ARG Mat color_boost=]>
java: void decolor(Mat src, Mat grayscale, Mat color_boost)
FUNC <void cv..denoise_TVL1 [ARG vector_Mat observations=, ARG Mat result=, ARG double lambda=1.0, ARG int niters=30]>
java: void denoise_TVL1(List<Mat> observations, Mat result, double lambda, int niters)
java: void denoise_TVL1(List<Mat> observations, Mat result, double lambda)
java: void denoise_TVL1(List<Mat> observations, Mat result)
FUNC <void cv..detailEnhance [ARG Mat src=, ARG Mat dst=, ARG float sigma_s=10, ARG float sigma_r=0.15f]>
java: void detailEnhance(Mat src, Mat dst, float sigma_s, float sigma_r)
java: void detailEnhance(Mat src, Mat dst, float sigma_s)
java: void detailEnhance(Mat src, Mat dst)
FUNC <void cv..edgePreservingFilter [ARG Mat src=, ARG Mat dst=, ARG int flags=1, ARG float sigma_s=60, ARG float sigma_r=0.4f]>
java: void edgePreservingFilter(Mat src, Mat dst, int flags, float sigma_s, float sigma_r)
java: void edgePreservingFilter(Mat src, Mat dst, int flags, float sigma_s)
java: void edgePreservingFilter(Mat src, Mat dst, int flags)
java: void edgePreservingFilter(Mat src, Mat dst)
FUNC <void cv..fastNlMeansDenoising [ARG Mat src=, ARG Mat dst=, ARG float h=3, ARG int templateWindowSize=7, ARG int searchWindowSize=21]>
java: void fastNlMeansDenoising(Mat src, Mat dst, float h, int templateWindowSize, int searchWindowSize)
java: void fastNlMeansDenoising(Mat src, Mat dst, float h, int templateWindowSize)
java: void fastNlMeansDenoising(Mat src, Mat dst, float h)
java: void fastNlMeansDenoising(Mat src, Mat dst)
FUNC <void cv..fastNlMeansDenoising [ARG Mat src=, ARG Mat dst=, ARG vector_float h=, ARG int templateWindowSize=7, ARG int searchWindowSize=21, ARG int normType=NORM_L2]>
java: void fastNlMeansDenoising(Mat src, Mat dst, MatOfFloat h, int templateWindowSize, int searchWindowSize, int normType)
java: void fastNlMeansDenoising(Mat src, Mat dst, MatOfFloat h, int templateWindowSize, int searchWindowSize)
java: void fastNlMeansDenoising(Mat src, Mat dst, MatOfFloat h, int templateWindowSize)
java: void fastNlMeansDenoising(Mat src, Mat dst, MatOfFloat h)
FUNC <void cv..fastNlMeansDenoisingColored [ARG Mat src=, ARG Mat dst=, ARG float h=3, ARG float hColor=3, ARG int templateWindowSize=7, ARG int searchWindowSize=21]>
java: void fastNlMeansDenoisingColored(Mat src, Mat dst, float h, float hColor, int templateWindowSize, int searchWindowSize)
java: void fastNlMeansDenoisingColored(Mat src, Mat dst, float h, float hColor, int templateWindowSize)
java: void fastNlMeansDenoisingColored(Mat src, Mat dst, float h, float hColor)
java: void fastNlMeansDenoisingColored(Mat src, Mat dst, float h)
java: void fastNlMeansDenoisingColored(Mat src, Mat dst)
FUNC <void cv..fastNlMeansDenoisingColoredMulti [ARG vector_Mat srcImgs=, ARG Mat dst=, ARG int imgToDenoiseIndex=, ARG int temporalWindowSize=, ARG float h=3, ARG float hColor=3, ARG int templateWindowSize=7, ARG int searchWindowSize=21]>
java: void fastNlMeansDenoisingColoredMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, float h, float hColor, int templateWindowSize, int searchWindowSize)
java: void fastNlMeansDenoisingColoredMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, float h, float hColor, int templateWindowSize)
java: void fastNlMeansDenoisingColoredMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, float h, float hColor)
java: void fastNlMeansDenoisingColoredMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, float h)
java: void fastNlMeansDenoisingColoredMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize)
FUNC <void cv..fastNlMeansDenoisingMulti [ARG vector_Mat srcImgs=, ARG Mat dst=, ARG int imgToDenoiseIndex=, ARG int temporalWindowSize=, ARG float h=3, ARG int templateWindowSize=7, ARG int searchWindowSize=21]>
java: void fastNlMeansDenoisingMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, float h, int templateWindowSize, int searchWindowSize)
java: void fastNlMeansDenoisingMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, float h, int templateWindowSize)
java: void fastNlMeansDenoisingMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, float h)
java: void fastNlMeansDenoisingMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize)
FUNC <void cv..fastNlMeansDenoisingMulti [ARG vector_Mat srcImgs=, ARG Mat dst=, ARG int imgToDenoiseIndex=, ARG int temporalWindowSize=, ARG vector_float h=, ARG int templateWindowSize=7, ARG int searchWindowSize=21, ARG int normType=NORM_L2]>
java: void fastNlMeansDenoisingMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, MatOfFloat h, int templateWindowSize, int searchWindowSize, int normType)
java: void fastNlMeansDenoisingMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, MatOfFloat h, int templateWindowSize, int searchWindowSize)
java: void fastNlMeansDenoisingMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, MatOfFloat h, int templateWindowSize)
java: void fastNlMeansDenoisingMulti(List<Mat> srcImgs, Mat dst, int imgToDenoiseIndex, int temporalWindowSize, MatOfFloat h)
FUNC <void cv..illuminationChange [ARG Mat src=, ARG Mat mask=, ARG Mat dst=, ARG float alpha=0.2f, ARG float beta=0.4f]>
java: void illuminationChange(Mat src, Mat mask, Mat dst, float alpha, float beta)
java: void illuminationChange(Mat src, Mat mask, Mat dst, float alpha)
java: void illuminationChange(Mat src, Mat mask, Mat dst)
FUNC <void cv..inpaint [ARG Mat src=, ARG Mat inpaintMask=, ARG Mat dst=, ARG double inpaintRadius=, ARG int flags=]>
java: void inpaint(Mat src, Mat inpaintMask, Mat dst, double inpaintRadius, int flags)
FUNC <void cv..pencilSketch [ARG Mat src=, ARG Mat dst1=, ARG Mat dst2=, ARG float sigma_s=60, ARG float sigma_r=0.07f, ARG float shade_factor=0.02f]>
java: void pencilSketch(Mat src, Mat dst1, Mat dst2, float sigma_s, float sigma_r, float shade_factor)
java: void pencilSketch(Mat src, Mat dst1, Mat dst2, float sigma_s, float sigma_r)
java: void pencilSketch(Mat src, Mat dst1, Mat dst2, float sigma_s)
java: void pencilSketch(Mat src, Mat dst1, Mat dst2)
FUNC <void cv..seamlessClone [ARG Mat src=, ARG Mat dst=, ARG Mat mask=, ARG Point p=, ARG Mat blend=, ARG int flags=]>
java: void seamlessClone(Mat src, Mat dst, Mat mask, Point p, Mat blend, int flags)
FUNC <void cv..stylization [ARG Mat src=, ARG Mat dst=, ARG float sigma_s=60, ARG float sigma_r=0.45f]>
java: void stylization(Mat src, Mat dst, float sigma_s, float sigma_r)
java: void stylization(Mat src, Mat dst, float sigma_s)
java: void stylization(Mat src, Mat dst)
FUNC <void cv..textureFlattening [ARG Mat src=, ARG Mat mask=, ARG Mat dst=, ARG float low_threshold=30, ARG float high_threshold=45, ARG int kernel_size=3]>
java: void textureFlattening(Mat src, Mat mask, Mat dst, float low_threshold, float high_threshold, int kernel_size)
java: void textureFlattening(Mat src, Mat mask, Mat dst, float low_threshold, float high_threshold)
java: void textureFlattening(Mat src, Mat mask, Mat dst, float low_threshold)
java: void textureFlattening(Mat src, Mat mask, Mat dst)
CLASS cv::.Tonemap : Algorithm
FUNC <float cv.Tonemap.getGamma []>
java: float getGamma()
FUNC <void cv.Tonemap.process [ARG Mat src=, ARG Mat dst=]>
java: void process(Mat src, Mat dst)
FUNC <void cv.Tonemap.setGamma [ARG float gamma=]>
java: void setGamma(float gamma)
CLASS cv::.TonemapDrago : Tonemap
FUNC <float cv.TonemapDrago.getBias []>
java: float getBias()
FUNC <float cv.TonemapDrago.getSaturation []>
java: float getSaturation()
FUNC <void cv.TonemapDrago.setBias [ARG float bias=]>
java: void setBias(float bias)
FUNC <void cv.TonemapDrago.setSaturation [ARG float saturation=]>
java: void setSaturation(float saturation)
CLASS cv::.TonemapDurand : Tonemap
FUNC <float cv.TonemapDurand.getContrast []>
java: float getContrast()
FUNC <float cv.TonemapDurand.getSaturation []>
java: float getSaturation()
FUNC <float cv.TonemapDurand.getSigmaColor []>
java: float getSigmaColor()
FUNC <float cv.TonemapDurand.getSigmaSpace []>
java: float getSigmaSpace()
FUNC <void cv.TonemapDurand.setContrast [ARG float contrast=]>
java: void setContrast(float contrast)
FUNC <void cv.TonemapDurand.setSaturation [ARG float saturation=]>
java: void setSaturation(float saturation)
FUNC <void cv.TonemapDurand.setSigmaColor [ARG float sigma_color=]>
java: void setSigmaColor(float sigma_color)
FUNC <void cv.TonemapDurand.setSigmaSpace [ARG float sigma_space=]>
java: void setSigmaSpace(float sigma_space)
CLASS cv::.TonemapReinhard : Tonemap
FUNC <float cv.TonemapReinhard.getColorAdaptation []>
java: float getColorAdaptation()
FUNC <float cv.TonemapReinhard.getIntensity []>
java: float getIntensity()
FUNC <float cv.TonemapReinhard.getLightAdaptation []>
java: float getLightAdaptation()
FUNC <void cv.TonemapReinhard.setColorAdaptation [ARG float color_adapt=]>
java: void setColorAdaptation(float color_adapt)
FUNC <void cv.TonemapReinhard.setIntensity [ARG float intensity=]>
java: void setIntensity(float intensity)
FUNC <void cv.TonemapReinhard.setLightAdaptation [ARG float light_adapt=]>
java: void setLightAdaptation(float light_adapt)
CLASS cv::.TonemapMantiuk : Tonemap
FUNC <float cv.TonemapMantiuk.getSaturation []>
java: float getSaturation()
FUNC <float cv.TonemapMantiuk.getScale []>
java: float getScale()
FUNC <void cv.TonemapMantiuk.setSaturation [ARG float saturation=]>
java: void setSaturation(float saturation)
FUNC <void cv.TonemapMantiuk.setScale [ARG float scale=]>
java: void setScale(float scale)
CLASS cv::.AlignExposures : Algorithm
FUNC <void cv.AlignExposures.process [ARG vector_Mat src=, ARG vector_Mat dst=, ARG Mat times=, ARG Mat response=]>
java: void process(List<Mat> src, List<Mat> dst, Mat times, Mat response)
CLASS cv::.AlignMTB : AlignExposures
FUNC <Point cv.AlignMTB.calculateShift [ARG Mat img0=, ARG Mat img1=]>
java: Point calculateShift(Mat img0, Mat img1)
FUNC <bool cv.AlignMTB.getCut []>
java: boolean getCut()
FUNC <int cv.AlignMTB.getExcludeRange []>
java: int getExcludeRange()
FUNC <int cv.AlignMTB.getMaxBits []>
java: int getMaxBits()
FUNC <void cv.AlignMTB.computeBitmaps [ARG Mat img=, ARG Mat tb=, ARG Mat eb=]>
java: void computeBitmaps(Mat img, Mat tb, Mat eb)
FUNC <void cv.AlignMTB.process [ARG vector_Mat src=, ARG vector_Mat dst=, ARG Mat times=, ARG Mat response=]>
java: void process(List<Mat> src, List<Mat> dst, Mat times, Mat response)
FUNC <void cv.AlignMTB.process [ARG vector_Mat src=, ARG vector_Mat dst=]>
java: void process(List<Mat> src, List<Mat> dst)
FUNC <void cv.AlignMTB.setCut [ARG bool value=]>
java: void setCut(boolean value)
FUNC <void cv.AlignMTB.setExcludeRange [ARG int exclude_range=]>
java: void setExcludeRange(int exclude_range)
FUNC <void cv.AlignMTB.setMaxBits [ARG int max_bits=]>
java: void setMaxBits(int max_bits)
FUNC <void cv.AlignMTB.shiftMat [ARG Mat src=, ARG Mat dst=, ARG Point shift=]>
java: void shiftMat(Mat src, Mat dst, Point shift)
CLASS cv::.CalibrateCRF : Algorithm
FUNC <void cv.CalibrateCRF.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=]>
java: void process(List<Mat> src, Mat dst, Mat times)
CLASS cv::.CalibrateDebevec : CalibrateCRF
FUNC <bool cv.CalibrateDebevec.getRandom []>
java: boolean getRandom()
FUNC <float cv.CalibrateDebevec.getLambda []>
java: float getLambda()
FUNC <int cv.CalibrateDebevec.getSamples []>
java: int getSamples()
FUNC <void cv.CalibrateDebevec.setLambda [ARG float lambda=]>
java: void setLambda(float lambda)
FUNC <void cv.CalibrateDebevec.setRandom [ARG bool random=]>
java: void setRandom(boolean random)
FUNC <void cv.CalibrateDebevec.setSamples [ARG int samples=]>
java: void setSamples(int samples)
CLASS cv::.CalibrateRobertson : CalibrateCRF
FUNC <Mat cv.CalibrateRobertson.getRadiance []>
java: Mat getRadiance()
FUNC <float cv.CalibrateRobertson.getThreshold []>
java: float getThreshold()
FUNC <int cv.CalibrateRobertson.getMaxIter []>
java: int getMaxIter()
FUNC <void cv.CalibrateRobertson.setMaxIter [ARG int max_iter=]>
java: void setMaxIter(int max_iter)
FUNC <void cv.CalibrateRobertson.setThreshold [ARG float threshold=]>
java: void setThreshold(float threshold)
CLASS cv::.MergeExposures : Algorithm
FUNC <void cv.MergeExposures.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=, ARG Mat response=]>
java: void process(List<Mat> src, Mat dst, Mat times, Mat response)
CLASS cv::.MergeDebevec : MergeExposures
FUNC <void cv.MergeDebevec.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=, ARG Mat response=]>
java: void process(List<Mat> src, Mat dst, Mat times, Mat response)
FUNC <void cv.MergeDebevec.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=]>
java: void process(List<Mat> src, Mat dst, Mat times)
CLASS cv::.MergeMertens : MergeExposures
FUNC <float cv.MergeMertens.getContrastWeight []>
java: float getContrastWeight()
FUNC <float cv.MergeMertens.getExposureWeight []>
java: float getExposureWeight()
FUNC <float cv.MergeMertens.getSaturationWeight []>
java: float getSaturationWeight()
FUNC <void cv.MergeMertens.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=, ARG Mat response=]>
java: void process(List<Mat> src, Mat dst, Mat times, Mat response)
FUNC <void cv.MergeMertens.process [ARG vector_Mat src=, ARG Mat dst=]>
java: void process(List<Mat> src, Mat dst)
FUNC <void cv.MergeMertens.setContrastWeight [ARG float contrast_weiht=]>
java: void setContrastWeight(float contrast_weiht)
FUNC <void cv.MergeMertens.setExposureWeight [ARG float exposure_weight=]>
java: void setExposureWeight(float exposure_weight)
FUNC <void cv.MergeMertens.setSaturationWeight [ARG float saturation_weight=]>
java: void setSaturationWeight(float saturation_weight)
CLASS cv::.MergeRobertson : MergeExposures
FUNC <void cv.MergeRobertson.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=, ARG Mat response=]>
java: void process(List<Mat> src, Mat dst, Mat times, Mat response)
FUNC <void cv.MergeRobertson.process [ARG vector_Mat src=, ARG Mat dst=, ARG Mat times=]>
java: void process(List<Mat> src, Mat dst, Mat times)

=== MODULE: video (C:/Users/d_dan/Desktop/opencv-master\modules/video) ===


Files (5):
['C:/Users/d_dan/Desktop/opencv-master\\modules/video\\include\\opencv2\\video\\tracking_c.h',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/video\\include\\opencv2\\video.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/video\\include\\opencv2\\video\\background_segm.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/video\\include\\opencv2\\video\\tracking.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/video\\include\\opencv2\\video\\video.hpp']

Common headers (0):
[]
ok: class CLASS ::.Video : , name: Video, base: 


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/video\include\opencv2\video\tracking_c.h =====
Namespaces: {''}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/video\include\opencv2\video\tracking_c.h


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/video\include\opencv2\video.hpp =====
Namespaces: {''}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/video\include\opencv2\video.hpp


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/video\include\opencv2\video\background_segm.hpp =====
Namespaces: {'', 'cv'}

--- Incoming ---
['class cv.BackgroundSubtractor', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.BackgroundSubtractor : Algorithm, name: BackgroundSubtractor, base: Algorithm

--- Incoming ---
[   'cv.BackgroundSubtractor.apply',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'image', '', []],
        ['Mat', 'fgmask', '', ['/O']],
        ['double', 'learningRate', '-1', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractor.apply [ARG Mat image=, ARG Mat fgmask=, ARG double learningRate=-1]>

--- Incoming ---
[   'cv.BackgroundSubtractor.getBackgroundImage',
    'void',
    ['/C', '/V', '/PV'],
    [['Mat', 'backgroundImage', '', ['/O']]],
    'void']
ok: FUNC <void cv.BackgroundSubtractor.getBackgroundImage [ARG Mat backgroundImage=]>

--- Incoming ---
[   'class cv.BackgroundSubtractorMOG2',
    ': cv::BackgroundSubtractor',
    [],
    [],
    None]
ok: class CLASS cv::.BackgroundSubtractorMOG2 : BackgroundSubtractor, name: BackgroundSubtractorMOG2, base: BackgroundSubtractor

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getHistory',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.BackgroundSubtractorMOG2.getHistory []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setHistory',
    'void',
    ['/V', '/PV'],
    [['int', 'history', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setHistory [ARG int history=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getNMixtures',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.BackgroundSubtractorMOG2.getNMixtures []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setNMixtures',
    'void',
    ['/V', '/PV'],
    [['int', 'nmixtures', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setNMixtures [ARG int nmixtures=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getBackgroundRatio',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorMOG2.getBackgroundRatio []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setBackgroundRatio',
    'void',
    ['/V', '/PV'],
    [['double', 'ratio', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setBackgroundRatio [ARG double ratio=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getVarThreshold',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorMOG2.getVarThreshold []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setVarThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'varThreshold', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setVarThreshold [ARG double varThreshold=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getVarThresholdGen',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorMOG2.getVarThresholdGen []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setVarThresholdGen',
    'void',
    ['/V', '/PV'],
    [['double', 'varThresholdGen', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setVarThresholdGen [ARG double varThresholdGen=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getVarInit',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorMOG2.getVarInit []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setVarInit',
    'void',
    ['/V', '/PV'],
    [['double', 'varInit', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setVarInit [ARG double varInit=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getVarMin',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorMOG2.getVarMin []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setVarMin',
    'void',
    ['/V', '/PV'],
    [['double', 'varMin', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setVarMin [ARG double varMin=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getVarMax',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorMOG2.getVarMax []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setVarMax',
    'void',
    ['/V', '/PV'],
    [['double', 'varMax', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setVarMax [ARG double varMax=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getComplexityReductionThreshold',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorMOG2.getComplexityReductionThreshold []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setComplexityReductionThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'ct', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setComplexityReductionThreshold [ARG double ct=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getDetectShadows',
    'bool',
    ['/C', '/V', '/PV'],
    [],
    'bool']
ok: FUNC <bool cv.BackgroundSubtractorMOG2.getDetectShadows []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setDetectShadows',
    'void',
    ['/V', '/PV'],
    [['bool', 'detectShadows', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setDetectShadows [ARG bool detectShadows=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getShadowValue',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.BackgroundSubtractorMOG2.getShadowValue []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setShadowValue',
    'void',
    ['/V', '/PV'],
    [['int', 'value', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setShadowValue [ARG int value=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.getShadowThreshold',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorMOG2.getShadowThreshold []>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.setShadowThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'threshold', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.setShadowThreshold [ARG double threshold=]>

--- Incoming ---
[   'cv.BackgroundSubtractorMOG2.apply',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'image', '', []],
        ['Mat', 'fgmask', '', ['/O']],
        ['double', 'learningRate', '-1', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorMOG2.apply [ARG Mat image=, ARG Mat fgmask=, ARG double learningRate=-1]>

--- Incoming ---
[   'cv.createBackgroundSubtractorMOG2',
    'Ptr_BackgroundSubtractorMOG2',
    [],
    [   ['int', 'history', '500', []],
        ['double', 'varThreshold', '16', []],
        ['bool', 'detectShadows', 'true', []]],
    'Ptr<BackgroundSubtractorMOG2>']
ok: FUNC <Ptr_BackgroundSubtractorMOG2 cv..createBackgroundSubtractorMOG2 [ARG int history=500, ARG double varThreshold=16, ARG bool detectShadows=true]>

--- Incoming ---
['class cv.BackgroundSubtractorKNN', ': cv::BackgroundSubtractor', [], [], None]
ok: class CLASS cv::.BackgroundSubtractorKNN : BackgroundSubtractor, name: BackgroundSubtractorKNN, base: BackgroundSubtractor

--- Incoming ---
['cv.BackgroundSubtractorKNN.getHistory', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.BackgroundSubtractorKNN.getHistory []>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.setHistory',
    'void',
    ['/V', '/PV'],
    [['int', 'history', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorKNN.setHistory [ARG int history=]>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.getNSamples',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.BackgroundSubtractorKNN.getNSamples []>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.setNSamples',
    'void',
    ['/V', '/PV'],
    [['int', '_nN', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorKNN.setNSamples [ARG int _nN=]>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.getDist2Threshold',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorKNN.getDist2Threshold []>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.setDist2Threshold',
    'void',
    ['/V', '/PV'],
    [['double', '_dist2Threshold', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorKNN.setDist2Threshold [ARG double _dist2Threshold=]>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.getkNNSamples',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.BackgroundSubtractorKNN.getkNNSamples []>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.setkNNSamples',
    'void',
    ['/V', '/PV'],
    [['int', '_nkNN', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorKNN.setkNNSamples [ARG int _nkNN=]>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.getDetectShadows',
    'bool',
    ['/C', '/V', '/PV'],
    [],
    'bool']
ok: FUNC <bool cv.BackgroundSubtractorKNN.getDetectShadows []>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.setDetectShadows',
    'void',
    ['/V', '/PV'],
    [['bool', 'detectShadows', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorKNN.setDetectShadows [ARG bool detectShadows=]>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.getShadowValue',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.BackgroundSubtractorKNN.getShadowValue []>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.setShadowValue',
    'void',
    ['/V', '/PV'],
    [['int', 'value', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorKNN.setShadowValue [ARG int value=]>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.getShadowThreshold',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.BackgroundSubtractorKNN.getShadowThreshold []>

--- Incoming ---
[   'cv.BackgroundSubtractorKNN.setShadowThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'threshold', '', []]],
    'void']
ok: FUNC <void cv.BackgroundSubtractorKNN.setShadowThreshold [ARG double threshold=]>

--- Incoming ---
[   'cv.createBackgroundSubtractorKNN',
    'Ptr_BackgroundSubtractorKNN',
    [],
    [   ['int', 'history', '500', []],
        ['double', 'dist2Threshold', '400.0', []],
        ['bool', 'detectShadows', 'true', []]],
    'Ptr<BackgroundSubtractorKNN>']
ok: FUNC <Ptr_BackgroundSubtractorKNN cv..createBackgroundSubtractorKNN [ARG int history=500, ARG double dist2Threshold=400.0, ARG bool detectShadows=true]>


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/video\include\opencv2\video\tracking.hpp =====
Namespaces: {'', 'cv'}

--- Incoming ---
['const cv.OPTFLOW_USE_INITIAL_FLOW', '4', [], [], None]
ok: CONST OPTFLOW_USE_INITIAL_FLOW=4

--- Incoming ---
['const cv.OPTFLOW_LK_GET_MIN_EIGENVALS', '8', [], [], None]
ok: CONST OPTFLOW_LK_GET_MIN_EIGENVALS=8

--- Incoming ---
['const cv.OPTFLOW_FARNEBACK_GAUSSIAN', '256', [], [], None]
ok: CONST OPTFLOW_FARNEBACK_GAUSSIAN=256

--- Incoming ---
[   'cv.CamShift',
    'RotatedRect',
    [],
    [   ['Mat', 'probImage', '', []],
        ['Rect', 'window', '', ['/IO', '/Ref']],
        ['TermCriteria', 'criteria', '', []]],
    'RotatedRect']
ok: FUNC <RotatedRect cv..CamShift [ARG Mat probImage=, ARG Rect window=, ARG TermCriteria criteria=]>

--- Incoming ---
[   'cv.meanShift',
    'int',
    [],
    [   ['Mat', 'probImage', '', []],
        ['Rect', 'window', '', ['/IO', '/Ref']],
        ['TermCriteria', 'criteria', '', []]],
    'int']
ok: FUNC <int cv..meanShift [ARG Mat probImage=, ARG Rect window=, ARG TermCriteria criteria=]>

--- Incoming ---
[   'cv.buildOpticalFlowPyramid',
    'int',
    [],
    [   ['Mat', 'img', '', []],
        ['vector_Mat', 'pyramid', '', ['/O']],
        ['Size', 'winSize', '', []],
        ['int', 'maxLevel', '', []],
        ['bool', 'withDerivatives', 'true', []],
        ['int', 'pyrBorder', 'BORDER_REFLECT_101', []],
        ['int', 'derivBorder', 'BORDER_CONSTANT', []],
        ['bool', 'tryReuseInputImage', 'true', []]],
    'int']
ok: FUNC <int cv..buildOpticalFlowPyramid [ARG Mat img=, ARG vector_Mat pyramid=, ARG Size winSize=, ARG int maxLevel=, ARG bool withDerivatives=true, ARG int pyrBorder=BORDER_REFLECT_101, ARG int derivBorder=BORDER_CONSTANT, ARG bool tryReuseInputImage=true]>

--- Incoming ---
[   'cv.calcOpticalFlowPyrLK',
    'void',
    [],
    [   ['Mat', 'prevImg', '', []],
        ['Mat', 'nextImg', '', []],
        ['Mat', 'prevPts', '', []],
        ['Mat', 'nextPts', '', ['/IO']],
        ['Mat', 'status', '', ['/O']],
        ['Mat', 'err', '', ['/O']],
        ['Size', 'winSize', 'Size(21,21)', []],
        ['int', 'maxLevel', '3', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01)',
            []],
        ['int', 'flags', '0', []],
        ['double', 'minEigThreshold', '1e-4', []]],
    'void']
ok: FUNC <void cv..calcOpticalFlowPyrLK [ARG Mat prevImg=, ARG Mat nextImg=, ARG vector_Point2f prevPts=, ARG vector_Point2f nextPts=, ARG vector_uchar status=, ARG vector_float err=, ARG Size winSize=Size(21,21), ARG int maxLevel=3, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01), ARG int flags=0, ARG double minEigThreshold=1e-4]>

--- Incoming ---
[   'cv.calcOpticalFlowFarneback',
    'void',
    [],
    [   ['Mat', 'prev', '', []],
        ['Mat', 'next', '', []],
        ['Mat', 'flow', '', ['/IO']],
        ['double', 'pyr_scale', '', []],
        ['int', 'levels', '', []],
        ['int', 'winsize', '', []],
        ['int', 'iterations', '', []],
        ['int', 'poly_n', '', []],
        ['double', 'poly_sigma', '', []],
        ['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv..calcOpticalFlowFarneback [ARG Mat prev=, ARG Mat next=, ARG Mat flow=, ARG double pyr_scale=, ARG int levels=, ARG int winsize=, ARG int iterations=, ARG int poly_n=, ARG double poly_sigma=, ARG int flags=]>

--- Incoming ---
[   'cv.estimateRigidTransform',
    'Mat',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', []],
        ['bool', 'fullAffine', '', []]],
    'Mat']
ok: FUNC <Mat cv..estimateRigidTransform [ARG Mat src=, ARG Mat dst=, ARG bool fullAffine=]>

--- Incoming ---
[   'cv.estimateRigidTransform',
    'Mat',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', []],
        ['bool', 'fullAffine', '', []],
        ['int', 'ransacMaxIters', '', []],
        ['double', 'ransacGoodRatio', '', []],
        ['int', 'ransacSize0', '', []]],
    'Mat']
ok: FUNC <Mat cv..estimateRigidTransform [ARG Mat src=, ARG Mat dst=, ARG bool fullAffine=, ARG int ransacMaxIters=, ARG double ransacGoodRatio=, ARG int ransacSize0=]>

--- Incoming ---
['const cv.MOTION_TRANSLATION', '0', [], [], None]
ok: CONST MOTION_TRANSLATION=0

--- Incoming ---
['const cv.MOTION_EUCLIDEAN', '1', [], [], None]
ok: CONST MOTION_EUCLIDEAN=1

--- Incoming ---
['const cv.MOTION_AFFINE', '2', [], [], None]
ok: CONST MOTION_AFFINE=2

--- Incoming ---
['const cv.MOTION_HOMOGRAPHY', '3', [], [], None]
ok: CONST MOTION_HOMOGRAPHY=3

--- Incoming ---
[   'cv.findTransformECC',
    'double',
    [],
    [   ['Mat', 'templateImage', '', []],
        ['Mat', 'inputImage', '', []],
        ['Mat', 'warpMatrix', '', ['/IO']],
        ['int', 'motionType', 'MOTION_AFFINE', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 50, 0.001)',
            []],
        ['Mat', 'inputMask', 'Mat()', []]],
    'double']
ok: FUNC <double cv..findTransformECC [ARG Mat templateImage=, ARG Mat inputImage=, ARG Mat warpMatrix=, ARG int motionType=MOTION_AFFINE, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 50, 0.001), ARG Mat inputMask=Mat()]>

--- Incoming ---
[   'class cv.KalmanFilter',
    '',
    [],
    [   ['Mat', 'statePre', '', ['/RW']],
        ['Mat', 'statePost', '', ['/RW']],
        ['Mat', 'transitionMatrix', '', ['/RW']],
        ['Mat', 'controlMatrix', '', ['/RW']],
        ['Mat', 'measurementMatrix', '', ['/RW']],
        ['Mat', 'processNoiseCov', '', ['/RW']],
        ['Mat', 'measurementNoiseCov', '', ['/RW']],
        ['Mat', 'errorCovPre', '', ['/RW']],
        ['Mat', 'gain', '', ['/RW']],
        ['Mat', 'errorCovPost', '', ['/RW']]],
    None]
ok: class CLASS cv::.KalmanFilter : , name: KalmanFilter, base: 

--- Incoming ---
['cv.KalmanFilter.KalmanFilter', '', [], [], None]
ok: FUNC < cv.KalmanFilter.KalmanFilter []>

--- Incoming ---
[   'cv.KalmanFilter.KalmanFilter',
    '',
    [],
    [   ['int', 'dynamParams', '', []],
        ['int', 'measureParams', '', []],
        ['int', 'controlParams', '0', []],
        ['int', 'type', 'CV_32F', []]],
    None]
ok: FUNC < cv.KalmanFilter.KalmanFilter [ARG int dynamParams=, ARG int measureParams=, ARG int controlParams=0, ARG int type=CV_32F]>

--- Incoming ---
[   'cv.KalmanFilter.predict',
    'Mat',
    [],
    [['Mat', 'control', 'Mat()', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv.KalmanFilter.predict [ARG Mat control=Mat()]>

--- Incoming ---
[   'cv.KalmanFilter.correct',
    'Mat',
    [],
    [['Mat', 'measurement', '', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv.KalmanFilter.correct [ARG Mat measurement=]>

--- Incoming ---
['class cv.DenseOpticalFlow', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.DenseOpticalFlow : Algorithm, name: DenseOpticalFlow, base: Algorithm

--- Incoming ---
[   'cv.DenseOpticalFlow.calc',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'I0', '', []],
        ['Mat', 'I1', '', []],
        ['Mat', 'flow', '', ['/IO']]],
    'void']
ok: FUNC <void cv.DenseOpticalFlow.calc [ARG Mat I0=, ARG Mat I1=, ARG Mat flow=]>

--- Incoming ---
['cv.DenseOpticalFlow.collectGarbage', 'void', ['/V', '/PV'], [], 'void']
ok: FUNC <void cv.DenseOpticalFlow.collectGarbage []>

--- Incoming ---
['class cv.SparseOpticalFlow', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.SparseOpticalFlow : Algorithm, name: SparseOpticalFlow, base: Algorithm

--- Incoming ---
[   'cv.SparseOpticalFlow.calc',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'prevImg', '', []],
        ['Mat', 'nextImg', '', []],
        ['Mat', 'prevPts', '', []],
        ['Mat', 'nextPts', '', ['/IO']],
        ['Mat', 'status', '', ['/O']],
        ['Mat', 'err', 'cv::Mat()', ['/O']]],
    'void']
ok: FUNC <void cv.SparseOpticalFlow.calc [ARG Mat prevImg=, ARG Mat nextImg=, ARG Mat prevPts=, ARG Mat nextPts=, ARG Mat status=, ARG Mat err=cv::Mat()]>

--- Incoming ---
['class cv.DualTVL1OpticalFlow', ': cv::DenseOpticalFlow', [], [], None]
ok: class CLASS cv::.DualTVL1OpticalFlow : DenseOpticalFlow, name: DualTVL1OpticalFlow, base: DenseOpticalFlow

--- Incoming ---
['cv.DualTVL1OpticalFlow.getTau', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.DualTVL1OpticalFlow.getTau []>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.setTau',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.DualTVL1OpticalFlow.setTau [ARG double val=]>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.getLambda',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.DualTVL1OpticalFlow.getLambda []>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.setLambda',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.DualTVL1OpticalFlow.setLambda [ARG double val=]>

--- Incoming ---
['cv.DualTVL1OpticalFlow.getTheta', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.DualTVL1OpticalFlow.getTheta []>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.setTheta',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.DualTVL1OpticalFlow.setTheta [ARG double val=]>

--- Incoming ---
['cv.DualTVL1OpticalFlow.getGamma', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.DualTVL1OpticalFlow.getGamma []>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.setGamma',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.DualTVL1OpticalFlow.setGamma [ARG double val=]>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.getScalesNumber',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.DualTVL1OpticalFlow.getScalesNumber []>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.setScalesNumber',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.DualTVL1OpticalFlow.setScalesNumber [ARG int val=]>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.getWarpingsNumber',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.DualTVL1OpticalFlow.getWarpingsNumber []>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.setWarpingsNumber',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.DualTVL1OpticalFlow.setWarpingsNumber [ARG int val=]>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.getEpsilon',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.DualTVL1OpticalFlow.getEpsilon []>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.setEpsilon',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.DualTVL1OpticalFlow.setEpsilon [ARG double val=]>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.getInnerIterations',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.DualTVL1OpticalFlow.getInnerIterations []>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.setInnerIterations',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.DualTVL1OpticalFlow.setInnerIterations [ARG int val=]>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.getOuterIterations',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.DualTVL1OpticalFlow.getOuterIterations []>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.setOuterIterations',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.DualTVL1OpticalFlow.setOuterIterations [ARG int val=]>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.getUseInitialFlow',
    'bool',
    ['/C', '/V', '/PV'],
    [],
    'bool']
ok: FUNC <bool cv.DualTVL1OpticalFlow.getUseInitialFlow []>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.setUseInitialFlow',
    'void',
    ['/V', '/PV'],
    [['bool', 'val', '', []]],
    'void']
ok: FUNC <void cv.DualTVL1OpticalFlow.setUseInitialFlow [ARG bool val=]>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.getScaleStep',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.DualTVL1OpticalFlow.getScaleStep []>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.setScaleStep',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.DualTVL1OpticalFlow.setScaleStep [ARG double val=]>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.getMedianFiltering',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.DualTVL1OpticalFlow.getMedianFiltering []>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.setMedianFiltering',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.DualTVL1OpticalFlow.setMedianFiltering [ARG int val=]>

--- Incoming ---
[   'cv.DualTVL1OpticalFlow.create',
    'Ptr_DualTVL1OpticalFlow',
    ['/S'],
    [   ['double', 'tau', '0.25', []],
        ['double', 'lambda', '0.15', []],
        ['double', 'theta', '0.3', []],
        ['int', 'nscales', '5', []],
        ['int', 'warps', '5', []],
        ['double', 'epsilon', '0.01', []],
        ['int', 'innnerIterations', '30', []],
        ['int', 'outerIterations', '10', []],
        ['double', 'scaleStep', '0.8', []],
        ['double', 'gamma', '0.0', []],
        ['int', 'medianFiltering', '5', []],
        ['bool', 'useInitialFlow', 'false', []]],
    'Ptr<DualTVL1OpticalFlow>']
ok: FUNC <Ptr_DualTVL1OpticalFlow cv.DualTVL1OpticalFlow.create [ARG double tau=0.25, ARG double lambda=0.15, ARG double theta=0.3, ARG int nscales=5, ARG int warps=5, ARG double epsilon=0.01, ARG int innnerIterations=30, ARG int outerIterations=10, ARG double scaleStep=0.8, ARG double gamma=0.0, ARG int medianFiltering=5, ARG bool useInitialFlow=false]>

--- Incoming ---
[   'cv.createOptFlow_DualTVL1',
    'Ptr_DualTVL1OpticalFlow',
    [],
    [],
    'Ptr<DualTVL1OpticalFlow>']
ok: FUNC <Ptr_DualTVL1OpticalFlow cv..createOptFlow_DualTVL1 []>

--- Incoming ---
['class cv.FarnebackOpticalFlow', ': cv::DenseOpticalFlow', [], [], None]
ok: class CLASS cv::.FarnebackOpticalFlow : DenseOpticalFlow, name: FarnebackOpticalFlow, base: DenseOpticalFlow

--- Incoming ---
['cv.FarnebackOpticalFlow.getNumLevels', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.FarnebackOpticalFlow.getNumLevels []>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.setNumLevels',
    'void',
    ['/V', '/PV'],
    [['int', 'numLevels', '', []]],
    'void']
ok: FUNC <void cv.FarnebackOpticalFlow.setNumLevels [ARG int numLevels=]>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.getPyrScale',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.FarnebackOpticalFlow.getPyrScale []>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.setPyrScale',
    'void',
    ['/V', '/PV'],
    [['double', 'pyrScale', '', []]],
    'void']
ok: FUNC <void cv.FarnebackOpticalFlow.setPyrScale [ARG double pyrScale=]>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.getFastPyramids',
    'bool',
    ['/C', '/V', '/PV'],
    [],
    'bool']
ok: FUNC <bool cv.FarnebackOpticalFlow.getFastPyramids []>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.setFastPyramids',
    'void',
    ['/V', '/PV'],
    [['bool', 'fastPyramids', '', []]],
    'void']
ok: FUNC <void cv.FarnebackOpticalFlow.setFastPyramids [ARG bool fastPyramids=]>

--- Incoming ---
['cv.FarnebackOpticalFlow.getWinSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.FarnebackOpticalFlow.getWinSize []>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.setWinSize',
    'void',
    ['/V', '/PV'],
    [['int', 'winSize', '', []]],
    'void']
ok: FUNC <void cv.FarnebackOpticalFlow.setWinSize [ARG int winSize=]>

--- Incoming ---
['cv.FarnebackOpticalFlow.getNumIters', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.FarnebackOpticalFlow.getNumIters []>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.setNumIters',
    'void',
    ['/V', '/PV'],
    [['int', 'numIters', '', []]],
    'void']
ok: FUNC <void cv.FarnebackOpticalFlow.setNumIters [ARG int numIters=]>

--- Incoming ---
['cv.FarnebackOpticalFlow.getPolyN', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.FarnebackOpticalFlow.getPolyN []>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.setPolyN',
    'void',
    ['/V', '/PV'],
    [['int', 'polyN', '', []]],
    'void']
ok: FUNC <void cv.FarnebackOpticalFlow.setPolyN [ARG int polyN=]>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.getPolySigma',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.FarnebackOpticalFlow.getPolySigma []>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.setPolySigma',
    'void',
    ['/V', '/PV'],
    [['double', 'polySigma', '', []]],
    'void']
ok: FUNC <void cv.FarnebackOpticalFlow.setPolySigma [ARG double polySigma=]>

--- Incoming ---
['cv.FarnebackOpticalFlow.getFlags', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.FarnebackOpticalFlow.getFlags []>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.setFlags',
    'void',
    ['/V', '/PV'],
    [['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv.FarnebackOpticalFlow.setFlags [ARG int flags=]>

--- Incoming ---
[   'cv.FarnebackOpticalFlow.create',
    'Ptr_FarnebackOpticalFlow',
    ['/S'],
    [   ['int', 'numLevels', '5', []],
        ['double', 'pyrScale', '0.5', []],
        ['bool', 'fastPyramids', 'false', []],
        ['int', 'winSize', '13', []],
        ['int', 'numIters', '10', []],
        ['int', 'polyN', '5', []],
        ['double', 'polySigma', '1.1', []],
        ['int', 'flags', '0', []]],
    'Ptr<FarnebackOpticalFlow>']
ok: FUNC <Ptr_FarnebackOpticalFlow cv.FarnebackOpticalFlow.create [ARG int numLevels=5, ARG double pyrScale=0.5, ARG bool fastPyramids=false, ARG int winSize=13, ARG int numIters=10, ARG int polyN=5, ARG double polySigma=1.1, ARG int flags=0]>

--- Incoming ---
['class cv.SparsePyrLKOpticalFlow', ': cv::SparseOpticalFlow', [], [], None]
ok: class CLASS cv::.SparsePyrLKOpticalFlow : SparseOpticalFlow, name: SparsePyrLKOpticalFlow, base: SparseOpticalFlow

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.getWinSize',
    'Size',
    ['/C', '/V', '/PV'],
    [],
    'Size']
ok: FUNC <Size cv.SparsePyrLKOpticalFlow.getWinSize []>

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.setWinSize',
    'void',
    ['/V', '/PV'],
    [['Size', 'winSize', '', []]],
    'void']
ok: FUNC <void cv.SparsePyrLKOpticalFlow.setWinSize [ARG Size winSize=]>

--- Incoming ---
['cv.SparsePyrLKOpticalFlow.getMaxLevel', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.SparsePyrLKOpticalFlow.getMaxLevel []>

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.setMaxLevel',
    'void',
    ['/V', '/PV'],
    [['int', 'maxLevel', '', []]],
    'void']
ok: FUNC <void cv.SparsePyrLKOpticalFlow.setMaxLevel [ARG int maxLevel=]>

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.getTermCriteria',
    'TermCriteria',
    ['/C', '/V', '/PV'],
    [],
    'TermCriteria']
ok: FUNC <TermCriteria cv.SparsePyrLKOpticalFlow.getTermCriteria []>

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.setTermCriteria',
    'void',
    ['/V', '/PV'],
    [['TermCriteria', 'crit', '', ['/Ref']]],
    'void']
ok: FUNC <void cv.SparsePyrLKOpticalFlow.setTermCriteria [ARG TermCriteria crit=]>

--- Incoming ---
['cv.SparsePyrLKOpticalFlow.getFlags', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.SparsePyrLKOpticalFlow.getFlags []>

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.setFlags',
    'void',
    ['/V', '/PV'],
    [['int', 'flags', '', []]],
    'void']
ok: FUNC <void cv.SparsePyrLKOpticalFlow.setFlags [ARG int flags=]>

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.getMinEigThreshold',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.SparsePyrLKOpticalFlow.getMinEigThreshold []>

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.setMinEigThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'minEigThreshold', '', []]],
    'void']
ok: FUNC <void cv.SparsePyrLKOpticalFlow.setMinEigThreshold [ARG double minEigThreshold=]>

--- Incoming ---
[   'cv.SparsePyrLKOpticalFlow.create',
    'Ptr_SparsePyrLKOpticalFlow',
    ['/S'],
    [   ['Size', 'winSize', 'Size(21, 21)', []],
        ['int', 'maxLevel', '3', []],
        [   'TermCriteria',
            'crit',
            'TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01)',
            []],
        ['int', 'flags', '0', []],
        ['double', 'minEigThreshold', '1e-4', []]],
    'Ptr<SparsePyrLKOpticalFlow>']
ok: FUNC <Ptr_SparsePyrLKOpticalFlow cv.SparsePyrLKOpticalFlow.create [ARG Size winSize=Size(21, 21), ARG int maxLevel=3, ARG TermCriteria crit=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01), ARG int flags=0, ARG double minEigThreshold=1e-4]>


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/video\include\opencv2\video\video.hpp =====
Namespaces: {'', 'cv'}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/video\include\opencv2\video\video.hpp


===== Generating... =====
CLASS ::.Video : 
[CONST CV_LKFLOW_INITIAL_GUESSES=4(manual), CONST CV_LKFLOW_GET_MIN_EIGENVALS=8(manual)]
[CONST OPTFLOW_USE_INITIAL_FLOW=4, CONST OPTFLOW_LK_GET_MIN_EIGENVALS=8, CONST OPTFLOW_FARNEBACK_GAUSSIAN=256, CONST MOTION_TRANSLATION=0, CONST MOTION_EUCLIDEAN=1, CONST MOTION_AFFINE=2, CONST MOTION_HOMOGRAPHY=3]
FUNC <Mat cv..estimateRigidTransform [ARG Mat src=, ARG Mat dst=, ARG bool fullAffine=, ARG int ransacMaxIters=, ARG double ransacGoodRatio=, ARG int ransacSize0=]>
java: Mat estimateRigidTransform(Mat src, Mat dst, boolean fullAffine, int ransacMaxIters, double ransacGoodRatio, int ransacSize0)
FUNC <Mat cv..estimateRigidTransform [ARG Mat src=, ARG Mat dst=, ARG bool fullAffine=]>
java: Mat estimateRigidTransform(Mat src, Mat dst, boolean fullAffine)
FUNC <Ptr_BackgroundSubtractorKNN cv..createBackgroundSubtractorKNN [ARG int history=500, ARG double dist2Threshold=400.0, ARG bool detectShadows=true]>
java: BackgroundSubtractorKNN createBackgroundSubtractorKNN(int history, double dist2Threshold, boolean detectShadows)
java: BackgroundSubtractorKNN createBackgroundSubtractorKNN(int history, double dist2Threshold)
java: BackgroundSubtractorKNN createBackgroundSubtractorKNN(int history)
java: BackgroundSubtractorKNN createBackgroundSubtractorKNN()
FUNC <Ptr_BackgroundSubtractorMOG2 cv..createBackgroundSubtractorMOG2 [ARG int history=500, ARG double varThreshold=16, ARG bool detectShadows=true]>
java: BackgroundSubtractorMOG2 createBackgroundSubtractorMOG2(int history, double varThreshold, boolean detectShadows)
java: BackgroundSubtractorMOG2 createBackgroundSubtractorMOG2(int history, double varThreshold)
java: BackgroundSubtractorMOG2 createBackgroundSubtractorMOG2(int history)
java: BackgroundSubtractorMOG2 createBackgroundSubtractorMOG2()
FUNC <Ptr_DualTVL1OpticalFlow cv..createOptFlow_DualTVL1 []>
java: DualTVL1OpticalFlow createOptFlow_DualTVL1()
FUNC <RotatedRect cv..CamShift [ARG Mat probImage=, ARG Rect window=, ARG TermCriteria criteria=]>
java: RotatedRect CamShift(Mat probImage, Rect window, TermCriteria criteria)
FUNC <double cv..findTransformECC [ARG Mat templateImage=, ARG Mat inputImage=, ARG Mat warpMatrix=, ARG int motionType=MOTION_AFFINE, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 50, 0.001), ARG Mat inputMask=Mat()]>
java: double findTransformECC(Mat templateImage, Mat inputImage, Mat warpMatrix, int motionType, TermCriteria criteria, Mat inputMask)
java: double findTransformECC(Mat templateImage, Mat inputImage, Mat warpMatrix, int motionType, TermCriteria criteria)
java: double findTransformECC(Mat templateImage, Mat inputImage, Mat warpMatrix, int motionType)
java: double findTransformECC(Mat templateImage, Mat inputImage, Mat warpMatrix)
FUNC <int cv..buildOpticalFlowPyramid [ARG Mat img=, ARG vector_Mat pyramid=, ARG Size winSize=, ARG int maxLevel=, ARG bool withDerivatives=true, ARG int pyrBorder=BORDER_REFLECT_101, ARG int derivBorder=BORDER_CONSTANT, ARG bool tryReuseInputImage=true]>
java: int buildOpticalFlowPyramid(Mat img, List<Mat> pyramid, Size winSize, int maxLevel, boolean withDerivatives, int pyrBorder, int derivBorder, boolean tryReuseInputImage)
java: int buildOpticalFlowPyramid(Mat img, List<Mat> pyramid, Size winSize, int maxLevel, boolean withDerivatives, int pyrBorder, int derivBorder)
java: int buildOpticalFlowPyramid(Mat img, List<Mat> pyramid, Size winSize, int maxLevel, boolean withDerivatives, int pyrBorder)
java: int buildOpticalFlowPyramid(Mat img, List<Mat> pyramid, Size winSize, int maxLevel, boolean withDerivatives)
java: int buildOpticalFlowPyramid(Mat img, List<Mat> pyramid, Size winSize, int maxLevel)
FUNC <int cv..meanShift [ARG Mat probImage=, ARG Rect window=, ARG TermCriteria criteria=]>
java: int meanShift(Mat probImage, Rect window, TermCriteria criteria)
FUNC <void cv..calcOpticalFlowFarneback [ARG Mat prev=, ARG Mat next=, ARG Mat flow=, ARG double pyr_scale=, ARG int levels=, ARG int winsize=, ARG int iterations=, ARG int poly_n=, ARG double poly_sigma=, ARG int flags=]>
java: void calcOpticalFlowFarneback(Mat prev, Mat next, Mat flow, double pyr_scale, int levels, int winsize, int iterations, int poly_n, double poly_sigma, int flags)
FUNC <void cv..calcOpticalFlowPyrLK [ARG Mat prevImg=, ARG Mat nextImg=, ARG vector_Point2f prevPts=, ARG vector_Point2f nextPts=, ARG vector_uchar status=, ARG vector_float err=, ARG Size winSize=Size(21,21), ARG int maxLevel=3, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01), ARG int flags=0, ARG double minEigThreshold=1e-4]>
java: void calcOpticalFlowPyrLK(Mat prevImg, Mat nextImg, MatOfPoint2f prevPts, MatOfPoint2f nextPts, MatOfByte status, MatOfFloat err, Size winSize, int maxLevel, TermCriteria criteria, int flags, double minEigThreshold)
java: void calcOpticalFlowPyrLK(Mat prevImg, Mat nextImg, MatOfPoint2f prevPts, MatOfPoint2f nextPts, MatOfByte status, MatOfFloat err, Size winSize, int maxLevel, TermCriteria criteria, int flags)
java: void calcOpticalFlowPyrLK(Mat prevImg, Mat nextImg, MatOfPoint2f prevPts, MatOfPoint2f nextPts, MatOfByte status, MatOfFloat err, Size winSize, int maxLevel, TermCriteria criteria)
java: void calcOpticalFlowPyrLK(Mat prevImg, Mat nextImg, MatOfPoint2f prevPts, MatOfPoint2f nextPts, MatOfByte status, MatOfFloat err, Size winSize, int maxLevel)
java: void calcOpticalFlowPyrLK(Mat prevImg, Mat nextImg, MatOfPoint2f prevPts, MatOfPoint2f nextPts, MatOfByte status, MatOfFloat err, Size winSize)
java: void calcOpticalFlowPyrLK(Mat prevImg, Mat nextImg, MatOfPoint2f prevPts, MatOfPoint2f nextPts, MatOfByte status, MatOfFloat err)
CLASS cv::.BackgroundSubtractor : Algorithm
FUNC <void cv.BackgroundSubtractor.apply [ARG Mat image=, ARG Mat fgmask=, ARG double learningRate=-1]>
java: void apply(Mat image, Mat fgmask, double learningRate)
java: void apply(Mat image, Mat fgmask)
FUNC <void cv.BackgroundSubtractor.getBackgroundImage [ARG Mat backgroundImage=]>
java: void getBackgroundImage(Mat backgroundImage)
CLASS cv::.BackgroundSubtractorMOG2 : BackgroundSubtractor
FUNC <bool cv.BackgroundSubtractorMOG2.getDetectShadows []>
java: boolean getDetectShadows()
FUNC <double cv.BackgroundSubtractorMOG2.getBackgroundRatio []>
java: double getBackgroundRatio()
FUNC <double cv.BackgroundSubtractorMOG2.getComplexityReductionThreshold []>
java: double getComplexityReductionThreshold()
FUNC <double cv.BackgroundSubtractorMOG2.getShadowThreshold []>
java: double getShadowThreshold()
FUNC <double cv.BackgroundSubtractorMOG2.getVarInit []>
java: double getVarInit()
FUNC <double cv.BackgroundSubtractorMOG2.getVarMax []>
java: double getVarMax()
FUNC <double cv.BackgroundSubtractorMOG2.getVarMin []>
java: double getVarMin()
FUNC <double cv.BackgroundSubtractorMOG2.getVarThreshold []>
java: double getVarThreshold()
FUNC <double cv.BackgroundSubtractorMOG2.getVarThresholdGen []>
java: double getVarThresholdGen()
FUNC <int cv.BackgroundSubtractorMOG2.getHistory []>
java: int getHistory()
FUNC <int cv.BackgroundSubtractorMOG2.getNMixtures []>
java: int getNMixtures()
FUNC <int cv.BackgroundSubtractorMOG2.getShadowValue []>
java: int getShadowValue()
FUNC <void cv.BackgroundSubtractorMOG2.apply [ARG Mat image=, ARG Mat fgmask=, ARG double learningRate=-1]>
java: void apply(Mat image, Mat fgmask, double learningRate)
java: void apply(Mat image, Mat fgmask)
FUNC <void cv.BackgroundSubtractorMOG2.setBackgroundRatio [ARG double ratio=]>
java: void setBackgroundRatio(double ratio)
FUNC <void cv.BackgroundSubtractorMOG2.setComplexityReductionThreshold [ARG double ct=]>
java: void setComplexityReductionThreshold(double ct)
FUNC <void cv.BackgroundSubtractorMOG2.setDetectShadows [ARG bool detectShadows=]>
java: void setDetectShadows(boolean detectShadows)
FUNC <void cv.BackgroundSubtractorMOG2.setHistory [ARG int history=]>
java: void setHistory(int history)
FUNC <void cv.BackgroundSubtractorMOG2.setNMixtures [ARG int nmixtures=]>
java: void setNMixtures(int nmixtures)
FUNC <void cv.BackgroundSubtractorMOG2.setShadowThreshold [ARG double threshold=]>
java: void setShadowThreshold(double threshold)
FUNC <void cv.BackgroundSubtractorMOG2.setShadowValue [ARG int value=]>
java: void setShadowValue(int value)
FUNC <void cv.BackgroundSubtractorMOG2.setVarInit [ARG double varInit=]>
java: void setVarInit(double varInit)
FUNC <void cv.BackgroundSubtractorMOG2.setVarMax [ARG double varMax=]>
java: void setVarMax(double varMax)
FUNC <void cv.BackgroundSubtractorMOG2.setVarMin [ARG double varMin=]>
java: void setVarMin(double varMin)
FUNC <void cv.BackgroundSubtractorMOG2.setVarThreshold [ARG double varThreshold=]>
java: void setVarThreshold(double varThreshold)
FUNC <void cv.BackgroundSubtractorMOG2.setVarThresholdGen [ARG double varThresholdGen=]>
java: void setVarThresholdGen(double varThresholdGen)
CLASS cv::.BackgroundSubtractorKNN : BackgroundSubtractor
FUNC <bool cv.BackgroundSubtractorKNN.getDetectShadows []>
java: boolean getDetectShadows()
FUNC <double cv.BackgroundSubtractorKNN.getDist2Threshold []>
java: double getDist2Threshold()
FUNC <double cv.BackgroundSubtractorKNN.getShadowThreshold []>
java: double getShadowThreshold()
FUNC <int cv.BackgroundSubtractorKNN.getHistory []>
java: int getHistory()
FUNC <int cv.BackgroundSubtractorKNN.getNSamples []>
java: int getNSamples()
FUNC <int cv.BackgroundSubtractorKNN.getShadowValue []>
java: int getShadowValue()
FUNC <int cv.BackgroundSubtractorKNN.getkNNSamples []>
java: int getkNNSamples()
FUNC <void cv.BackgroundSubtractorKNN.setDetectShadows [ARG bool detectShadows=]>
java: void setDetectShadows(boolean detectShadows)
FUNC <void cv.BackgroundSubtractorKNN.setDist2Threshold [ARG double _dist2Threshold=]>
java: void setDist2Threshold(double _dist2Threshold)
FUNC <void cv.BackgroundSubtractorKNN.setHistory [ARG int history=]>
java: void setHistory(int history)
FUNC <void cv.BackgroundSubtractorKNN.setNSamples [ARG int _nN=]>
java: void setNSamples(int _nN)
FUNC <void cv.BackgroundSubtractorKNN.setShadowThreshold [ARG double threshold=]>
java: void setShadowThreshold(double threshold)
FUNC <void cv.BackgroundSubtractorKNN.setShadowValue [ARG int value=]>
java: void setShadowValue(int value)
FUNC <void cv.BackgroundSubtractorKNN.setkNNSamples [ARG int _nkNN=]>
java: void setkNNSamples(int _nkNN)
CLASS cv::.KalmanFilter : 
FUNC < cv.KalmanFilter.KalmanFilter [ARG int dynamParams=, ARG int measureParams=, ARG int controlParams=0, ARG int type=CV_32F]>
java:  KalmanFilter(int dynamParams, int measureParams, int controlParams, int type)
java:  KalmanFilter(int dynamParams, int measureParams, int controlParams)
java:  KalmanFilter(int dynamParams, int measureParams)
FUNC < cv.KalmanFilter.KalmanFilter []>
java:  KalmanFilter()
FUNC <Mat cv.KalmanFilter.correct [ARG Mat measurement=]>
java: Mat correct(Mat measurement)
FUNC <Mat cv.KalmanFilter.predict [ARG Mat control=Mat()]>
java: Mat predict(Mat control)
java: Mat predict()
FUNC <Mat cv.KalmanFilter.get_statePre []>
java: Mat get_statePre()
FUNC <void cv.KalmanFilter.set_statePre [ARG Mat statePre=]>
java: void set_statePre(Mat statePre)
FUNC <Mat cv.KalmanFilter.get_statePost []>
java: Mat get_statePost()
FUNC <void cv.KalmanFilter.set_statePost [ARG Mat statePost=]>
java: void set_statePost(Mat statePost)
FUNC <Mat cv.KalmanFilter.get_transitionMatrix []>
java: Mat get_transitionMatrix()
FUNC <void cv.KalmanFilter.set_transitionMatrix [ARG Mat transitionMatrix=]>
java: void set_transitionMatrix(Mat transitionMatrix)
FUNC <Mat cv.KalmanFilter.get_controlMatrix []>
java: Mat get_controlMatrix()
FUNC <void cv.KalmanFilter.set_controlMatrix [ARG Mat controlMatrix=]>
java: void set_controlMatrix(Mat controlMatrix)
FUNC <Mat cv.KalmanFilter.get_measurementMatrix []>
java: Mat get_measurementMatrix()
FUNC <void cv.KalmanFilter.set_measurementMatrix [ARG Mat measurementMatrix=]>
java: void set_measurementMatrix(Mat measurementMatrix)
FUNC <Mat cv.KalmanFilter.get_processNoiseCov []>
java: Mat get_processNoiseCov()
FUNC <void cv.KalmanFilter.set_processNoiseCov [ARG Mat processNoiseCov=]>
java: void set_processNoiseCov(Mat processNoiseCov)
FUNC <Mat cv.KalmanFilter.get_measurementNoiseCov []>
java: Mat get_measurementNoiseCov()
FUNC <void cv.KalmanFilter.set_measurementNoiseCov [ARG Mat measurementNoiseCov=]>
java: void set_measurementNoiseCov(Mat measurementNoiseCov)
FUNC <Mat cv.KalmanFilter.get_errorCovPre []>
java: Mat get_errorCovPre()
FUNC <void cv.KalmanFilter.set_errorCovPre [ARG Mat errorCovPre=]>
java: void set_errorCovPre(Mat errorCovPre)
FUNC <Mat cv.KalmanFilter.get_gain []>
java: Mat get_gain()
FUNC <void cv.KalmanFilter.set_gain [ARG Mat gain=]>
java: void set_gain(Mat gain)
FUNC <Mat cv.KalmanFilter.get_errorCovPost []>
java: Mat get_errorCovPost()
FUNC <void cv.KalmanFilter.set_errorCovPost [ARG Mat errorCovPost=]>
java: void set_errorCovPost(Mat errorCovPost)
CLASS cv::.DenseOpticalFlow : Algorithm
FUNC <void cv.DenseOpticalFlow.calc [ARG Mat I0=, ARG Mat I1=, ARG Mat flow=]>
java: void calc(Mat I0, Mat I1, Mat flow)
FUNC <void cv.DenseOpticalFlow.collectGarbage []>
java: void collectGarbage()
CLASS cv::.SparseOpticalFlow : Algorithm
FUNC <void cv.SparseOpticalFlow.calc [ARG Mat prevImg=, ARG Mat nextImg=, ARG Mat prevPts=, ARG Mat nextPts=, ARG Mat status=, ARG Mat err=cv::Mat()]>
java: void calc(Mat prevImg, Mat nextImg, Mat prevPts, Mat nextPts, Mat status, Mat err)
java: void calc(Mat prevImg, Mat nextImg, Mat prevPts, Mat nextPts, Mat status)
CLASS cv::.DualTVL1OpticalFlow : DenseOpticalFlow
FUNC <Ptr_DualTVL1OpticalFlow cv.DualTVL1OpticalFlow.create [ARG double tau=0.25, ARG double lambda=0.15, ARG double theta=0.3, ARG int nscales=5, ARG int warps=5, ARG double epsilon=0.01, ARG int innnerIterations=30, ARG int outerIterations=10, ARG double scaleStep=0.8, ARG double gamma=0.0, ARG int medianFiltering=5, ARG bool useInitialFlow=false]>
java: DualTVL1OpticalFlow create(double tau, double lambda, double theta, int nscales, int warps, double epsilon, int innnerIterations, int outerIterations, double scaleStep, double gamma, int medianFiltering, boolean useInitialFlow)
java: DualTVL1OpticalFlow create(double tau, double lambda, double theta, int nscales, int warps, double epsilon, int innnerIterations, int outerIterations, double scaleStep, double gamma, int medianFiltering)
java: DualTVL1OpticalFlow create(double tau, double lambda, double theta, int nscales, int warps, double epsilon, int innnerIterations, int outerIterations, double scaleStep, double gamma)
java: DualTVL1OpticalFlow create(double tau, double lambda, double theta, int nscales, int warps, double epsilon, int innnerIterations, int outerIterations, double scaleStep)
java: DualTVL1OpticalFlow create(double tau, double lambda, double theta, int nscales, int warps, double epsilon, int innnerIterations, int outerIterations)
java: DualTVL1OpticalFlow create(double tau, double lambda, double theta, int nscales, int warps, double epsilon, int innnerIterations)
java: DualTVL1OpticalFlow create(double tau, double lambda, double theta, int nscales, int warps, double epsilon)
java: DualTVL1OpticalFlow create(double tau, double lambda, double theta, int nscales, int warps)
java: DualTVL1OpticalFlow create(double tau, double lambda, double theta, int nscales)
java: DualTVL1OpticalFlow create(double tau, double lambda, double theta)
java: DualTVL1OpticalFlow create(double tau, double lambda)
java: DualTVL1OpticalFlow create(double tau)
java: DualTVL1OpticalFlow create()
FUNC <bool cv.DualTVL1OpticalFlow.getUseInitialFlow []>
java: boolean getUseInitialFlow()
FUNC <double cv.DualTVL1OpticalFlow.getEpsilon []>
java: double getEpsilon()
FUNC <double cv.DualTVL1OpticalFlow.getGamma []>
java: double getGamma()
FUNC <double cv.DualTVL1OpticalFlow.getLambda []>
java: double getLambda()
FUNC <double cv.DualTVL1OpticalFlow.getScaleStep []>
java: double getScaleStep()
FUNC <double cv.DualTVL1OpticalFlow.getTau []>
java: double getTau()
FUNC <double cv.DualTVL1OpticalFlow.getTheta []>
java: double getTheta()
FUNC <int cv.DualTVL1OpticalFlow.getInnerIterations []>
java: int getInnerIterations()
FUNC <int cv.DualTVL1OpticalFlow.getMedianFiltering []>
java: int getMedianFiltering()
FUNC <int cv.DualTVL1OpticalFlow.getOuterIterations []>
java: int getOuterIterations()
FUNC <int cv.DualTVL1OpticalFlow.getScalesNumber []>
java: int getScalesNumber()
FUNC <int cv.DualTVL1OpticalFlow.getWarpingsNumber []>
java: int getWarpingsNumber()
FUNC <void cv.DualTVL1OpticalFlow.setEpsilon [ARG double val=]>
java: void setEpsilon(double val)
FUNC <void cv.DualTVL1OpticalFlow.setGamma [ARG double val=]>
java: void setGamma(double val)
FUNC <void cv.DualTVL1OpticalFlow.setInnerIterations [ARG int val=]>
java: void setInnerIterations(int val)
FUNC <void cv.DualTVL1OpticalFlow.setLambda [ARG double val=]>
java: void setLambda(double val)
FUNC <void cv.DualTVL1OpticalFlow.setMedianFiltering [ARG int val=]>
java: void setMedianFiltering(int val)
FUNC <void cv.DualTVL1OpticalFlow.setOuterIterations [ARG int val=]>
java: void setOuterIterations(int val)
FUNC <void cv.DualTVL1OpticalFlow.setScaleStep [ARG double val=]>
java: void setScaleStep(double val)
FUNC <void cv.DualTVL1OpticalFlow.setScalesNumber [ARG int val=]>
java: void setScalesNumber(int val)
FUNC <void cv.DualTVL1OpticalFlow.setTau [ARG double val=]>
java: void setTau(double val)
FUNC <void cv.DualTVL1OpticalFlow.setTheta [ARG double val=]>
java: void setTheta(double val)
FUNC <void cv.DualTVL1OpticalFlow.setUseInitialFlow [ARG bool val=]>
java: void setUseInitialFlow(boolean val)
FUNC <void cv.DualTVL1OpticalFlow.setWarpingsNumber [ARG int val=]>
java: void setWarpingsNumber(int val)
CLASS cv::.FarnebackOpticalFlow : DenseOpticalFlow
FUNC <Ptr_FarnebackOpticalFlow cv.FarnebackOpticalFlow.create [ARG int numLevels=5, ARG double pyrScale=0.5, ARG bool fastPyramids=false, ARG int winSize=13, ARG int numIters=10, ARG int polyN=5, ARG double polySigma=1.1, ARG int flags=0]>
java: FarnebackOpticalFlow create(int numLevels, double pyrScale, boolean fastPyramids, int winSize, int numIters, int polyN, double polySigma, int flags)
java: FarnebackOpticalFlow create(int numLevels, double pyrScale, boolean fastPyramids, int winSize, int numIters, int polyN, double polySigma)
java: FarnebackOpticalFlow create(int numLevels, double pyrScale, boolean fastPyramids, int winSize, int numIters, int polyN)
java: FarnebackOpticalFlow create(int numLevels, double pyrScale, boolean fastPyramids, int winSize, int numIters)
java: FarnebackOpticalFlow create(int numLevels, double pyrScale, boolean fastPyramids, int winSize)
java: FarnebackOpticalFlow create(int numLevels, double pyrScale, boolean fastPyramids)
java: FarnebackOpticalFlow create(int numLevels, double pyrScale)
java: FarnebackOpticalFlow create(int numLevels)
java: FarnebackOpticalFlow create()
FUNC <bool cv.FarnebackOpticalFlow.getFastPyramids []>
java: boolean getFastPyramids()
FUNC <double cv.FarnebackOpticalFlow.getPolySigma []>
java: double getPolySigma()
FUNC <double cv.FarnebackOpticalFlow.getPyrScale []>
java: double getPyrScale()
FUNC <int cv.FarnebackOpticalFlow.getFlags []>
java: int getFlags()
FUNC <int cv.FarnebackOpticalFlow.getNumIters []>
java: int getNumIters()
FUNC <int cv.FarnebackOpticalFlow.getNumLevels []>
java: int getNumLevels()
FUNC <int cv.FarnebackOpticalFlow.getPolyN []>
java: int getPolyN()
FUNC <int cv.FarnebackOpticalFlow.getWinSize []>
java: int getWinSize()
FUNC <void cv.FarnebackOpticalFlow.setFastPyramids [ARG bool fastPyramids=]>
java: void setFastPyramids(boolean fastPyramids)
FUNC <void cv.FarnebackOpticalFlow.setFlags [ARG int flags=]>
java: void setFlags(int flags)
FUNC <void cv.FarnebackOpticalFlow.setNumIters [ARG int numIters=]>
java: void setNumIters(int numIters)
FUNC <void cv.FarnebackOpticalFlow.setNumLevels [ARG int numLevels=]>
java: void setNumLevels(int numLevels)
FUNC <void cv.FarnebackOpticalFlow.setPolyN [ARG int polyN=]>
java: void setPolyN(int polyN)
FUNC <void cv.FarnebackOpticalFlow.setPolySigma [ARG double polySigma=]>
java: void setPolySigma(double polySigma)
FUNC <void cv.FarnebackOpticalFlow.setPyrScale [ARG double pyrScale=]>
java: void setPyrScale(double pyrScale)
FUNC <void cv.FarnebackOpticalFlow.setWinSize [ARG int winSize=]>
java: void setWinSize(int winSize)
CLASS cv::.SparsePyrLKOpticalFlow : SparseOpticalFlow
FUNC <Ptr_SparsePyrLKOpticalFlow cv.SparsePyrLKOpticalFlow.create [ARG Size winSize=Size(21, 21), ARG int maxLevel=3, ARG TermCriteria crit=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 0.01), ARG int flags=0, ARG double minEigThreshold=1e-4]>
java: SparsePyrLKOpticalFlow create(Size winSize, int maxLevel, TermCriteria crit, int flags, double minEigThreshold)
java: SparsePyrLKOpticalFlow create(Size winSize, int maxLevel, TermCriteria crit, int flags)
java: SparsePyrLKOpticalFlow create(Size winSize, int maxLevel, TermCriteria crit)
java: SparsePyrLKOpticalFlow create(Size winSize, int maxLevel)
java: SparsePyrLKOpticalFlow create(Size winSize)
java: SparsePyrLKOpticalFlow create()
FUNC <Size cv.SparsePyrLKOpticalFlow.getWinSize []>
java: Size getWinSize()
FUNC <TermCriteria cv.SparsePyrLKOpticalFlow.getTermCriteria []>
java: TermCriteria getTermCriteria()
FUNC <double cv.SparsePyrLKOpticalFlow.getMinEigThreshold []>
java: double getMinEigThreshold()
FUNC <int cv.SparsePyrLKOpticalFlow.getFlags []>
java: int getFlags()
FUNC <int cv.SparsePyrLKOpticalFlow.getMaxLevel []>
java: int getMaxLevel()
FUNC <void cv.SparsePyrLKOpticalFlow.setFlags [ARG int flags=]>
java: void setFlags(int flags)
FUNC <void cv.SparsePyrLKOpticalFlow.setMaxLevel [ARG int maxLevel=]>
java: void setMaxLevel(int maxLevel)
FUNC <void cv.SparsePyrLKOpticalFlow.setMinEigThreshold [ARG double minEigThreshold=]>
java: void setMinEigThreshold(double minEigThreshold)
FUNC <void cv.SparsePyrLKOpticalFlow.setTermCriteria [ARG TermCriteria crit=]>
java: void setTermCriteria(TermCriteria crit)
FUNC <void cv.SparsePyrLKOpticalFlow.setWinSize [ARG Size winSize=]>
java: void setWinSize(Size winSize)

=== MODULE: dnn (C:/Users/d_dan/Desktop/opencv-master\modules/dnn) ===


Files (6):
['C:/Users/d_dan/Desktop/opencv-master\\modules/dnn\\include\\opencv2\\dnn.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/dnn\\include\\opencv2\\dnn\\all_layers.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/dnn\\include\\opencv2\\dnn\\dict.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/dnn\\include\\opencv2\\dnn\\dnn.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/dnn\\include\\opencv2\\dnn\\layer.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/dnn\\include\\opencv2\\dnn\\shape_utils.hpp']

Common headers (1):
['C:/Users/d_dan/Desktop/opencv-master\\modules/dnn\\misc/java/src/cpp/dnn_converters.hpp']
ok: class CLASS ::.Dnn : , name: Dnn, base: 

===== Common header : C:/Users/d_dan/Desktop/opencv-master\modules/dnn\misc/java/src/cpp/dnn_converters.hpp =====


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/dnn\include\opencv2\dnn.hpp =====
Namespaces: set()
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/dnn\include\opencv2\dnn.hpp


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/dnn\include\opencv2\dnn\all_layers.hpp =====
Namespaces: {'cv.dnn', 'cv'}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/dnn\include\opencv2\dnn\all_layers.hpp


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/dnn\include\opencv2\dnn\dict.hpp =====
Namespaces: {'cv.dnn', 'cv'}

--- Incoming ---
['struct cv.dnn.DictValue', '', [], [], None]
ok: class CLASS cv.dnn::.DictValue : , name: DictValue, base: 

--- Incoming ---
['cv.dnn.DictValue.DictValue', '', [], [['int', 'i', '', []]], None]
ok: FUNC < cv.dnn.DictValue.DictValue [ARG int i=]>

--- Incoming ---
['cv.dnn.DictValue.DictValue', '', [], [['double', 'p', '', []]], None]
ok: FUNC < cv.dnn.DictValue.DictValue [ARG double p=]>

--- Incoming ---
[   'cv.dnn.DictValue.DictValue',
    '',
    [],
    [['String', 's', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.dnn.DictValue.DictValue [ARG String s=]>

--- Incoming ---
['cv.dnn.DictValue.isInt', 'bool', ['/C'], [], 'bool']
ok: FUNC <bool cv.dnn.DictValue.isInt []>

--- Incoming ---
['cv.dnn.DictValue.isString', 'bool', ['/C'], [], 'bool']
ok: FUNC <bool cv.dnn.DictValue.isString []>

--- Incoming ---
['cv.dnn.DictValue.isReal', 'bool', ['/C'], [], 'bool']
ok: FUNC <bool cv.dnn.DictValue.isReal []>

--- Incoming ---
[   'cv.dnn.DictValue.getIntValue',
    'int',
    ['/C'],
    [['int', 'idx', '-1', []]],
    'int']
ok: FUNC <int cv.dnn.DictValue.getIntValue [ARG int idx=-1]>

--- Incoming ---
[   'cv.dnn.DictValue.getRealValue',
    'double',
    ['/C'],
    [['int', 'idx', '-1', []]],
    'double']
ok: FUNC <double cv.dnn.DictValue.getRealValue [ARG int idx=-1]>

--- Incoming ---
[   'cv.dnn.DictValue.getStringValue',
    'String',
    ['/C'],
    [['int', 'idx', '-1', []]],
    'String']
ok: FUNC <String cv.dnn.DictValue.getStringValue [ARG int idx=-1]>


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/dnn\include\opencv2\dnn\dnn.hpp =====
Namespaces: {'cv.dnn.experimental_dnn_v5', 'cv.dnn', 'cv'}

--- Incoming ---
['const cv.dnn.DNN_BACKEND_DEFAULT', '0', [], [], None]
ok: CONST DNN_BACKEND_DEFAULT=0

--- Incoming ---
['const cv.dnn.DNN_BACKEND_HALIDE', '1', [], [], None]
ok: CONST DNN_BACKEND_HALIDE=1

--- Incoming ---
['const cv.dnn.DNN_BACKEND_INFERENCE_ENGINE', '2', [], [], None]
ok: CONST DNN_BACKEND_INFERENCE_ENGINE=2

--- Incoming ---
['const cv.dnn.DNN_BACKEND_OPENCV', '3', [], [], None]
ok: CONST DNN_BACKEND_OPENCV=3

--- Incoming ---
['const cv.dnn.DNN_TARGET_CPU', '0', [], [], None]
ok: CONST DNN_TARGET_CPU=0

--- Incoming ---
['const cv.dnn.DNN_TARGET_OPENCL', '1', [], [], None]
ok: CONST DNN_TARGET_OPENCL=1

--- Incoming ---
['const cv.dnn.DNN_TARGET_OPENCL_FP16', '2', [], [], None]
ok: CONST DNN_TARGET_OPENCL_FP16=2

--- Incoming ---
['const cv.dnn.DNN_TARGET_MYRIAD', '3', [], [], None]
ok: CONST DNN_TARGET_MYRIAD=3

--- Incoming ---
[   'class cv.dnn.Layer',
    ': cv::Algorithm',
    [],
    [   ['vector_Mat', 'blobs', '', ['/RW']],
        ['String', 'name', '', []],
        ['String', 'type', '', []],
        ['int', 'preferableTarget', '', []]],
    None]
ok: class CLASS cv.dnn::.Layer : Algorithm, name: Layer, base: Algorithm

--- Incoming ---
[   'cv.dnn.Layer.finalize',
    'void',
    [],
    [   ['vector_Mat', 'inputs', '', ['/C', '/Ref']],
        ['vector_Mat', 'outputs', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Layer.finalize [ARG vector_Mat inputs=, ARG vector_Mat outputs=]>

--- Incoming ---
[   'cv.dnn.Layer.finalize',
    'vector_Mat',
    [],
    [['vector_Mat', 'inputs', '', ['/C', '/Ref']]],
    'std::vector<Mat>']
ok: FUNC <vector_Mat cv.dnn.Layer.finalize [ARG vector_Mat inputs=]>

--- Incoming ---
[   'cv.dnn.Layer.run',
    'void',
    [],
    [   ['vector_Mat', 'inputs', '', ['/C', '/Ref']],
        ['vector_Mat', 'outputs', '', ['/O', '/Ref']],
        ['vector_Mat', 'internals', '', ['/IO', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Layer.run [ARG vector_Mat inputs=, ARG vector_Mat outputs=, ARG vector_Mat internals=]>

--- Incoming ---
[   'cv.dnn.Layer.outputNameToIndex',
    'int',
    ['/V'],
    [['String', 'outputName', '', ['/C', '/Ref']]],
    'int']
ok: FUNC <int cv.dnn.Layer.outputNameToIndex [ARG String outputName=]>

--- Incoming ---
['class cv.dnn.Net', '', ['/Simple'], [], None]
ok: class CLASS cv.dnn::.Net : , name: Net, base: 

--- Incoming ---
['cv.dnn.Net.Net', '', [], [], None]
ok: FUNC < cv.dnn.Net.Net []>

--- Incoming ---
[   'cv.dnn.Net.readFromModelOptimizer',
    'Net',
    ['/S'],
    [   ['String', 'xml', '', ['/C', '/Ref']],
        ['String', 'bin', '', ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn.Net.readFromModelOptimizer [ARG String xml=, ARG String bin=]>

--- Incoming ---
['cv.dnn.Net.empty', 'bool', ['/C'], [], 'bool']
ok: FUNC <bool cv.dnn.Net.empty []>

--- Incoming ---
[   'cv.dnn.Net.getLayerId',
    'int',
    [],
    [['String', 'layer', '', ['/C', '/Ref']]],
    'int']
ok: FUNC <int cv.dnn.Net.getLayerId [ARG String layer=]>

--- Incoming ---
['cv.dnn.Net.getLayerNames', 'vector_String', ['/C'], [], 'std::vector<String>']
ok: FUNC <vector_String cv.dnn.Net.getLayerNames []>

--- Incoming ---
[   'cv.dnn.Net.getLayer',
    'Ptr_Layer',
    [],
    [['LayerId', 'layerId', '', []]],
    'Ptr<Layer>']
ok: FUNC <Ptr_Layer cv.dnn.Net.getLayer [ARG LayerId layerId=]>

--- Incoming ---
['cv.dnn.Net.deleteLayer', 'void', [], [['LayerId', 'layer', '', []]], 'void']
ok: FUNC <void cv.dnn.Net.deleteLayer [ARG LayerId layer=]>

--- Incoming ---
[   'cv.dnn.Net.connect',
    'void',
    [],
    [['String', 'outPin', '', []], ['String', 'inpPin', '', []]],
    'void']
ok: FUNC <void cv.dnn.Net.connect [ARG String outPin=, ARG String inpPin=]>

--- Incoming ---
[   'cv.dnn.Net.setInputsNames',
    'void',
    [],
    [['vector_String', 'inputBlobNames', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.setInputsNames [ARG vector_String inputBlobNames=]>

--- Incoming ---
[   'cv.dnn.Net.forward',
    'Mat',
    [],
    [['String', 'outputName', 'String()', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv.dnn.Net.forward [ARG String outputName=String()]>

--- Incoming ---
[   'cv.dnn.Net.forward',
    'void',
    [],
    [   ['vector_Mat', 'outputBlobs', '', ['/O']],
        ['String', 'outputName', 'String()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.forward [ARG vector_Mat outputBlobs=, ARG String outputName=String()]>

--- Incoming ---
[   'cv.dnn.Net.forward',
    'void',
    [],
    [   ['vector_Mat', 'outputBlobs', '', ['/O']],
        ['vector_String', 'outBlobNames', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.forward [ARG vector_Mat outputBlobs=, ARG vector_String outBlobNames=]>

--- Incoming ---
[   'cv.dnn.Net.forward',
    'void',
    ['=forwardAndRetrieve'],
    [   ['vector_vector_Mat', 'outputBlobs', '', ['/O', '/Ref']],
        ['vector_String', 'outBlobNames', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.forward [ARG vector_vector_Mat outputBlobs=, ARG vector_String outBlobNames=]>

--- Incoming ---
[   'cv.dnn.Net.setHalideScheduler',
    'void',
    [],
    [['String', 'scheduler', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.setHalideScheduler [ARG String scheduler=]>

--- Incoming ---
[   'cv.dnn.Net.setPreferableBackend',
    'void',
    [],
    [['int', 'backendId', '', []]],
    'void']
ok: FUNC <void cv.dnn.Net.setPreferableBackend [ARG int backendId=]>

--- Incoming ---
[   'cv.dnn.Net.setPreferableTarget',
    'void',
    [],
    [['int', 'targetId', '', []]],
    'void']
ok: FUNC <void cv.dnn.Net.setPreferableTarget [ARG int targetId=]>

--- Incoming ---
[   'cv.dnn.Net.setInput',
    'void',
    [],
    [['Mat', 'blob', '', []], ['String', 'name', '""', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.setInput [ARG Mat blob=, ARG String name=""]>

--- Incoming ---
[   'cv.dnn.Net.setParam',
    'void',
    [],
    [   ['LayerId', 'layer', '', []],
        ['int', 'numParam', '', []],
        ['Mat', 'blob', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.setParam [ARG LayerId layer=, ARG int numParam=, ARG Mat blob=]>

--- Incoming ---
[   'cv.dnn.Net.getParam',
    'Mat',
    [],
    [['LayerId', 'layer', '', []], ['int', 'numParam', '0', []]],
    'Mat']
ok: FUNC <Mat cv.dnn.Net.getParam [ARG LayerId layer=, ARG int numParam=0]>

--- Incoming ---
[   'cv.dnn.Net.getUnconnectedOutLayers',
    'vector_int',
    ['/C'],
    [],
    'std::vector<int>']
ok: FUNC <vector_int cv.dnn.Net.getUnconnectedOutLayers []>

--- Incoming ---
[   'cv.dnn.Net.getLayersShapes',
    'void',
    ['/C'],
    [   ['vector_MatShape', 'netInputShapes', '', ['/C', '/Ref']],
        ['vector_int', 'layersIds', '', ['/O', '/Ref']],
        ['vector_vector_MatShape', 'inLayersShapes', '', ['/O', '/Ref']],
        ['vector_vector_MatShape', 'outLayersShapes', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.getLayersShapes [ARG vector_MatShape netInputShapes=, ARG vector_int layersIds=, ARG vector_vector_MatShape inLayersShapes=, ARG vector_vector_MatShape outLayersShapes=]>

--- Incoming ---
[   'cv.dnn.Net.getLayersShapes',
    'void',
    ['/C'],
    [   ['MatShape', 'netInputShape', '', ['/C', '/Ref']],
        ['vector_int', 'layersIds', '', ['/O', '/Ref']],
        ['vector_vector_MatShape', 'inLayersShapes', '', ['/O', '/Ref']],
        ['vector_vector_MatShape', 'outLayersShapes', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.getLayersShapes [ARG MatShape netInputShape=, ARG vector_int layersIds=, ARG vector_vector_MatShape inLayersShapes=, ARG vector_vector_MatShape outLayersShapes=]>

--- Incoming ---
[   'cv.dnn.Net.getFLOPS',
    'int64',
    ['/C'],
    [['vector_MatShape', 'netInputShapes', '', ['/C', '/Ref']]],
    'int64']
ok: FUNC <int64 cv.dnn.Net.getFLOPS [ARG vector_MatShape netInputShapes=]>

--- Incoming ---
[   'cv.dnn.Net.getFLOPS',
    'int64',
    ['/C'],
    [['MatShape', 'netInputShape', '', ['/C', '/Ref']]],
    'int64']
ok: FUNC <int64 cv.dnn.Net.getFLOPS [ARG MatShape netInputShape=]>

--- Incoming ---
[   'cv.dnn.Net.getFLOPS',
    'int64',
    ['/C'],
    [   ['int', 'layerId', '', ['/C']],
        ['vector_MatShape', 'netInputShapes', '', ['/C', '/Ref']]],
    'int64']
ok: FUNC <int64 cv.dnn.Net.getFLOPS [ARG int layerId=, ARG vector_MatShape netInputShapes=]>

--- Incoming ---
[   'cv.dnn.Net.getFLOPS',
    'int64',
    ['/C'],
    [   ['int', 'layerId', '', ['/C']],
        ['MatShape', 'netInputShape', '', ['/C', '/Ref']]],
    'int64']
ok: FUNC <int64 cv.dnn.Net.getFLOPS [ARG int layerId=, ARG MatShape netInputShape=]>

--- Incoming ---
[   'cv.dnn.Net.getLayerTypes',
    'void',
    ['/C'],
    [['vector_String', 'layersTypes', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.getLayerTypes [ARG vector_String layersTypes=]>

--- Incoming ---
[   'cv.dnn.Net.getLayersCount',
    'int',
    ['/C'],
    [['String', 'layerType', '', ['/C', '/Ref']]],
    'int']
ok: FUNC <int cv.dnn.Net.getLayersCount [ARG String layerType=]>

--- Incoming ---
[   'cv.dnn.Net.getMemoryConsumption',
    'void',
    ['/C'],
    [   ['MatShape', 'netInputShape', '', ['/C', '/Ref']],
        ['size_t', 'weights', '', ['/O', '/Ref']],
        ['size_t', 'blobs', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.getMemoryConsumption [ARG MatShape netInputShape=, ARG size_t weights=, ARG size_t blobs=]>

--- Incoming ---
[   'cv.dnn.Net.getMemoryConsumption',
    'void',
    ['/C'],
    [   ['int', 'layerId', '', ['/C']],
        ['vector_MatShape', 'netInputShapes', '', ['/C', '/Ref']],
        ['size_t', 'weights', '', ['/O', '/Ref']],
        ['size_t', 'blobs', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.getMemoryConsumption [ARG int layerId=, ARG vector_MatShape netInputShapes=, ARG size_t weights=, ARG size_t blobs=]>

--- Incoming ---
[   'cv.dnn.Net.getMemoryConsumption',
    'void',
    ['/C'],
    [   ['int', 'layerId', '', ['/C']],
        ['MatShape', 'netInputShape', '', ['/C', '/Ref']],
        ['size_t', 'weights', '', ['/O', '/Ref']],
        ['size_t', 'blobs', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn.Net.getMemoryConsumption [ARG int layerId=, ARG MatShape netInputShape=, ARG size_t weights=, ARG size_t blobs=]>

--- Incoming ---
['cv.dnn.Net.enableFusion', 'void', [], [['bool', 'fusion', '', []]], 'void']
ok: FUNC <void cv.dnn.Net.enableFusion [ARG bool fusion=]>

--- Incoming ---
[   'cv.dnn.Net.getPerfProfile',
    'int64',
    [],
    [['vector_double', 'timings', '', ['/O', '/Ref']]],
    'int64']
ok: FUNC <int64 cv.dnn.Net.getPerfProfile [ARG vector_double timings=]>

--- Incoming ---
[   'cv.dnn.readNetFromDarknet',
    'Net',
    [],
    [   ['String', 'cfgFile', '', ['/C', '/Ref']],
        ['String', 'darknetModel', 'String()', ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromDarknet [ARG String cfgFile=, ARG String darknetModel=String()]>

--- Incoming ---
[   'cv.dnn.readNetFromDarknet',
    'Net',
    [],
    [   ['vector_uchar', 'bufferCfg', '', ['/C', '/Ref']],
        [   'vector_uchar',
            'bufferModel',
            'std::vector<uchar>()',
            ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromDarknet [ARG vector_uchar bufferCfg=, ARG vector_uchar bufferModel=std::vector<uchar>()]>

--- Incoming ---
[   'cv.dnn.readNetFromCaffe',
    'Net',
    [],
    [   ['String', 'prototxt', '', ['/C', '/Ref']],
        ['String', 'caffeModel', 'String()', ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromCaffe [ARG String prototxt=, ARG String caffeModel=String()]>

--- Incoming ---
[   'cv.dnn.readNetFromCaffe',
    'Net',
    [],
    [   ['vector_uchar', 'bufferProto', '', ['/C', '/Ref']],
        [   'vector_uchar',
            'bufferModel',
            'std::vector<uchar>()',
            ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromCaffe [ARG vector_uchar bufferProto=, ARG vector_uchar bufferModel=std::vector<uchar>()]>

--- Incoming ---
[   'cv.dnn.readNetFromTensorflow',
    'Net',
    [],
    [   ['String', 'model', '', ['/C', '/Ref']],
        ['String', 'config', 'String()', ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromTensorflow [ARG String model=, ARG String config=String()]>

--- Incoming ---
[   'cv.dnn.readNetFromTensorflow',
    'Net',
    [],
    [   ['vector_uchar', 'bufferModel', '', ['/C', '/Ref']],
        [   'vector_uchar',
            'bufferConfig',
            'std::vector<uchar>()',
            ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromTensorflow [ARG vector_uchar bufferModel=, ARG vector_uchar bufferConfig=std::vector<uchar>()]>

--- Incoming ---
[   'cv.dnn.readNetFromTorch',
    'Net',
    [],
    [['String', 'model', '', ['/C', '/Ref']], ['bool', 'isBinary', 'true', []]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromTorch [ARG String model=, ARG bool isBinary=true]>

--- Incoming ---
[   'cv.dnn.readNet',
    'Net',
    [],
    [   ['String', 'model', '', ['/C', '/Ref']],
        ['String', 'config', '""', ['/C', '/Ref']],
        ['String', 'framework', '""', ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNet [ARG String model=, ARG String config="", ARG String framework=""]>

--- Incoming ---
[   'cv.dnn.readNet',
    'Net',
    [],
    [   ['String', 'framework', '', ['/C', '/Ref']],
        ['vector_uchar', 'bufferModel', '', ['/C', '/Ref']],
        [   'vector_uchar',
            'bufferConfig',
            'std::vector<uchar>()',
            ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNet [ARG String framework=, ARG vector_uchar bufferModel=, ARG vector_uchar bufferConfig=std::vector<uchar>()]>

--- Incoming ---
[   'cv.dnn.readTorchBlob',
    'Mat',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref']],
        ['bool', 'isBinary', 'true', []]],
    'Mat']
ok: FUNC <Mat cv.dnn..readTorchBlob [ARG String filename=, ARG bool isBinary=true]>

--- Incoming ---
[   'cv.dnn.readNetFromModelOptimizer',
    'Net',
    [],
    [   ['String', 'xml', '', ['/C', '/Ref']],
        ['String', 'bin', '', ['/C', '/Ref']]],
    'Net']
ok: FUNC <Net cv.dnn..readNetFromModelOptimizer [ARG String xml=, ARG String bin=]>

--- Incoming ---
[   'cv.dnn.blobFromImage',
    'Mat',
    [],
    [   ['Mat', 'image', '', []],
        ['double', 'scalefactor', '1.0', []],
        ['Size', 'size', 'Size()', ['/C', '/Ref']],
        ['Scalar', 'mean', 'Scalar()', ['/C', '/Ref']],
        ['bool', 'swapRB', 'true', []],
        ['bool', 'crop', 'true', []]],
    'Mat']
ok: FUNC <Mat cv.dnn..blobFromImage [ARG Mat image=, ARG double scalefactor=1.0, ARG Size size=Size(), ARG Scalar mean=Scalar(), ARG bool swapRB=true, ARG bool crop=true]>

--- Incoming ---
[   'cv.dnn.blobFromImages',
    'Mat',
    [],
    [   ['vector_Mat', 'images', '', []],
        ['double', 'scalefactor', '1.0', []],
        ['Size', 'size', 'Size()', []],
        ['Scalar', 'mean', 'Scalar()', ['/C', '/Ref']],
        ['bool', 'swapRB', 'true', []],
        ['bool', 'crop', 'true', []]],
    'Mat']
ok: FUNC <Mat cv.dnn..blobFromImages [ARG vector_Mat images=, ARG double scalefactor=1.0, ARG Size size=Size(), ARG Scalar mean=Scalar(), ARG bool swapRB=true, ARG bool crop=true]>

--- Incoming ---
[   'cv.dnn.imagesFromBlob',
    'void',
    [],
    [   ['Mat', 'blob_', '', ['/C', '/Ref']],
        ['vector_Mat', 'images_', '', ['/O']]],
    'void']
ok: FUNC <void cv.dnn..imagesFromBlob [ARG Mat blob_=, ARG vector_Mat images_=]>

--- Incoming ---
[   'cv.dnn.shrinkCaffeModel',
    'void',
    [],
    [   ['String', 'src', '', ['/C', '/Ref']],
        ['String', 'dst', '', ['/C', '/Ref']],
        [   'vector_String',
            'layersTypes',
            'std::vector<String>()',
            ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.dnn..shrinkCaffeModel [ARG String src=, ARG String dst=, ARG vector_String layersTypes=std::vector<String>()]>

--- Incoming ---
[   'cv.dnn.NMSBoxes',
    'void',
    [],
    [   ['vector_Rect', 'bboxes', '', ['/C', '/Ref']],
        ['vector_float', 'scores', '', ['/C', '/Ref']],
        ['float', 'score_threshold', '', ['/C']],
        ['float', 'nms_threshold', '', ['/C']],
        ['vector_int', 'indices', '', ['/O', '/Ref']],
        ['float', 'eta', '1.f', ['/C']],
        ['int', 'top_k', '0', ['/C']]],
    'void']
ok: FUNC <void cv.dnn..NMSBoxes [ARG vector_Rect bboxes=, ARG vector_float scores=, ARG float score_threshold=, ARG float nms_threshold=, ARG vector_int indices=, ARG float eta=1.f, ARG int top_k=0]>


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/dnn\include\opencv2\dnn\layer.hpp =====
Namespaces: {'cv.dnn.experimental_dnn_v5', 'cv.dnn', 'cv'}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/dnn\include\opencv2\dnn\layer.hpp


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/dnn\include\opencv2\dnn\shape_utils.hpp =====
Namespaces: {'cv.dnn.experimental_dnn_v5', 'cv.dnn', 'cv.dnn.<unnamed>', 'cv'}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/dnn\include\opencv2\dnn\shape_utils.hpp


===== Generating... =====
CLASS ::.Dnn : 
[CONST DNN_BACKEND_DEFAULT=0, CONST DNN_BACKEND_HALIDE=1, CONST DNN_BACKEND_INFERENCE_ENGINE=2, CONST DNN_BACKEND_OPENCV=3, CONST DNN_TARGET_CPU=0, CONST DNN_TARGET_OPENCL=1, CONST DNN_TARGET_OPENCL_FP16=2, CONST DNN_TARGET_MYRIAD=3]
FUNC <Mat cv.dnn..blobFromImage [ARG Mat image=, ARG double scalefactor=1.0, ARG Size size=Size(), ARG Scalar mean=Scalar(), ARG bool swapRB=true, ARG bool crop=true]>
java: Mat blobFromImage(Mat image, double scalefactor, Size size, Scalar mean, boolean swapRB, boolean crop)
java: Mat blobFromImage(Mat image, double scalefactor, Size size, Scalar mean, boolean swapRB)
java: Mat blobFromImage(Mat image, double scalefactor, Size size, Scalar mean)
java: Mat blobFromImage(Mat image, double scalefactor, Size size)
java: Mat blobFromImage(Mat image, double scalefactor)
java: Mat blobFromImage(Mat image)
FUNC <Mat cv.dnn..blobFromImages [ARG vector_Mat images=, ARG double scalefactor=1.0, ARG Size size=Size(), ARG Scalar mean=Scalar(), ARG bool swapRB=true, ARG bool crop=true]>
java: Mat blobFromImages(List<Mat> images, double scalefactor, Size size, Scalar mean, boolean swapRB, boolean crop)
java: Mat blobFromImages(List<Mat> images, double scalefactor, Size size, Scalar mean, boolean swapRB)
java: Mat blobFromImages(List<Mat> images, double scalefactor, Size size, Scalar mean)
java: Mat blobFromImages(List<Mat> images, double scalefactor, Size size)
java: Mat blobFromImages(List<Mat> images, double scalefactor)
java: Mat blobFromImages(List<Mat> images)
FUNC <Mat cv.dnn..readTorchBlob [ARG String filename=, ARG bool isBinary=true]>
java: Mat readTorchBlob(String filename, boolean isBinary)
java: Mat readTorchBlob(String filename)
FUNC <Net cv.dnn..readNet [ARG String framework=, ARG vector_uchar bufferModel=, ARG vector_uchar bufferConfig=std::vector<uchar>()]>
java: Net readNet(String framework, MatOfByte bufferModel, MatOfByte bufferConfig)
java: Net readNet(String framework, MatOfByte bufferModel)
FUNC <Net cv.dnn..readNet [ARG String model=, ARG String config="", ARG String framework=""]>
java: Net readNet(String model, String config, String framework)
java: Net readNet(String model, String config)
java: Net readNet(String model)
FUNC <Net cv.dnn..readNetFromCaffe [ARG String prototxt=, ARG String caffeModel=String()]>
java: Net readNetFromCaffe(String prototxt, String caffeModel)
java: Net readNetFromCaffe(String prototxt)
FUNC <Net cv.dnn..readNetFromCaffe [ARG vector_uchar bufferProto=, ARG vector_uchar bufferModel=std::vector<uchar>()]>
java: Net readNetFromCaffe(MatOfByte bufferProto, MatOfByte bufferModel)
java: Net readNetFromCaffe(MatOfByte bufferProto)
FUNC <Net cv.dnn..readNetFromDarknet [ARG String cfgFile=, ARG String darknetModel=String()]>
java: Net readNetFromDarknet(String cfgFile, String darknetModel)
java: Net readNetFromDarknet(String cfgFile)
FUNC <Net cv.dnn..readNetFromDarknet [ARG vector_uchar bufferCfg=, ARG vector_uchar bufferModel=std::vector<uchar>()]>
java: Net readNetFromDarknet(MatOfByte bufferCfg, MatOfByte bufferModel)
java: Net readNetFromDarknet(MatOfByte bufferCfg)
FUNC <Net cv.dnn..readNetFromModelOptimizer [ARG String xml=, ARG String bin=]>
java: Net readNetFromModelOptimizer(String xml, String bin)
FUNC <Net cv.dnn..readNetFromTensorflow [ARG String model=, ARG String config=String()]>
java: Net readNetFromTensorflow(String model, String config)
java: Net readNetFromTensorflow(String model)
FUNC <Net cv.dnn..readNetFromTensorflow [ARG vector_uchar bufferModel=, ARG vector_uchar bufferConfig=std::vector<uchar>()]>
java: Net readNetFromTensorflow(MatOfByte bufferModel, MatOfByte bufferConfig)
java: Net readNetFromTensorflow(MatOfByte bufferModel)
FUNC <Net cv.dnn..readNetFromTorch [ARG String model=, ARG bool isBinary=true]>
java: Net readNetFromTorch(String model, boolean isBinary)
java: Net readNetFromTorch(String model)
FUNC <void cv.dnn..NMSBoxes [ARG vector_Rect bboxes=, ARG vector_float scores=, ARG float score_threshold=, ARG float nms_threshold=, ARG vector_int indices=, ARG float eta=1.f, ARG int top_k=0]>
java: void NMSBoxes(MatOfRect bboxes, MatOfFloat scores, float score_threshold, float nms_threshold, MatOfInt indices, float eta, int top_k)
java: void NMSBoxes(MatOfRect bboxes, MatOfFloat scores, float score_threshold, float nms_threshold, MatOfInt indices, float eta)
java: void NMSBoxes(MatOfRect bboxes, MatOfFloat scores, float score_threshold, float nms_threshold, MatOfInt indices)
FUNC <void cv.dnn..imagesFromBlob [ARG Mat blob_=, ARG vector_Mat images_=]>
java: void imagesFromBlob(Mat blob_, List<Mat> images_)
FUNC <void cv.dnn..shrinkCaffeModel [ARG String src=, ARG String dst=, ARG vector_String layersTypes=std::vector<String>()]>
java: void shrinkCaffeModel(String src, String dst, List<String> layersTypes)
java: void shrinkCaffeModel(String src, String dst)
CLASS cv.dnn::.DictValue : 
FUNC < cv.dnn.DictValue.DictValue [ARG String s=]>
java:  DictValue(String s)
FUNC < cv.dnn.DictValue.DictValue [ARG double p=]>
java:  DictValue(double p)
FUNC < cv.dnn.DictValue.DictValue [ARG int i=]>
java:  DictValue(int i)
FUNC <String cv.dnn.DictValue.getStringValue [ARG int idx=-1]>
java: String getStringValue(int idx)
java: String getStringValue()
FUNC <bool cv.dnn.DictValue.isInt []>
java: boolean isInt()
FUNC <bool cv.dnn.DictValue.isReal []>
java: boolean isReal()
FUNC <bool cv.dnn.DictValue.isString []>
java: boolean isString()
FUNC <double cv.dnn.DictValue.getRealValue [ARG int idx=-1]>
java: double getRealValue(int idx)
java: double getRealValue()
FUNC <int cv.dnn.DictValue.getIntValue [ARG int idx=-1]>
java: int getIntValue(int idx)
java: int getIntValue()
CLASS cv.dnn::.Layer : Algorithm
FUNC <int cv.dnn.Layer.outputNameToIndex [ARG String outputName=]>
java: int outputNameToIndex(String outputName)
FUNC <vector_Mat cv.dnn.Layer.finalize [ARG vector_Mat inputs=]>
java: List<Mat> finalize(List<Mat> inputs)
FUNC <void cv.dnn.Layer.finalize [ARG vector_Mat inputs=, ARG vector_Mat outputs=]>
java: void finalize(List<Mat> inputs, List<Mat> outputs)
FUNC <void cv.dnn.Layer.run [ARG vector_Mat inputs=, ARG vector_Mat outputs=, ARG vector_Mat internals=]>
java: void run(List<Mat> inputs, List<Mat> outputs, List<Mat> internals)
FUNC <vector_Mat cv.dnn.Layer.get_blobs []>
java: List<Mat> get_blobs()
FUNC <void cv.dnn.Layer.set_blobs [ARG vector_Mat blobs=]>
java: void set_blobs(List<Mat> blobs)
FUNC <String cv.dnn.Layer.get_name []>
java: String get_name()
FUNC <String cv.dnn.Layer.get_type []>
java: String get_type()
FUNC <int cv.dnn.Layer.get_preferableTarget []>
java: int get_preferableTarget()
CLASS cv.dnn::.Net : 
FUNC < cv.dnn.Net.Net []>
java:  Net()
FUNC <Mat cv.dnn.Net.forward [ARG String outputName=String()]>
java: Mat forward(String outputName)
java: Mat forward()
FUNC <Mat cv.dnn.Net.getParam [ARG LayerId layer=, ARG int numParam=0]>
java: Mat getParam(DictValue layer, int numParam)
java: Mat getParam(DictValue layer)
FUNC <Net cv.dnn.Net.readFromModelOptimizer [ARG String xml=, ARG String bin=]>
java: Net readFromModelOptimizer(String xml, String bin)
FUNC <Ptr_Layer cv.dnn.Net.getLayer [ARG LayerId layerId=]>
java: Layer getLayer(DictValue layerId)
FUNC <bool cv.dnn.Net.empty []>
java: boolean empty()
FUNC <int cv.dnn.Net.getLayerId [ARG String layer=]>
java: int getLayerId(String layer)
FUNC <int cv.dnn.Net.getLayersCount [ARG String layerType=]>
java: int getLayersCount(String layerType)
FUNC <int64 cv.dnn.Net.getFLOPS [ARG MatShape netInputShape=]>
java: long getFLOPS(MatOfInt netInputShape)
FUNC <int64 cv.dnn.Net.getFLOPS [ARG int layerId=, ARG MatShape netInputShape=]>
java: long getFLOPS(int layerId, MatOfInt netInputShape)
FUNC <int64 cv.dnn.Net.getFLOPS [ARG int layerId=, ARG vector_MatShape netInputShapes=]>
java: long getFLOPS(int layerId, List<MatOfInt> netInputShapes)
FUNC <int64 cv.dnn.Net.getFLOPS [ARG vector_MatShape netInputShapes=]>
java: long getFLOPS(List<MatOfInt> netInputShapes)
FUNC <int64 cv.dnn.Net.getPerfProfile [ARG vector_double timings=]>
java: long getPerfProfile(MatOfDouble timings)
FUNC <vector_String cv.dnn.Net.getLayerNames []>
java: List<String> getLayerNames()
FUNC <vector_int cv.dnn.Net.getUnconnectedOutLayers []>
java: MatOfInt getUnconnectedOutLayers()
FUNC <void cv.dnn.Net.connect [ARG String outPin=, ARG String inpPin=]>
java: void connect(String outPin, String inpPin)
FUNC <void cv.dnn.Net.deleteLayer [ARG LayerId layer=]>
java: void deleteLayer(DictValue layer)
FUNC <void cv.dnn.Net.enableFusion [ARG bool fusion=]>
java: void enableFusion(boolean fusion)
FUNC <void cv.dnn.Net.forward [ARG vector_Mat outputBlobs=, ARG String outputName=String()]>
java: void forward(List<Mat> outputBlobs, String outputName)
java: void forward(List<Mat> outputBlobs)
FUNC <void cv.dnn.Net.forward [ARG vector_Mat outputBlobs=, ARG vector_String outBlobNames=]>
java: void forward(List<Mat> outputBlobs, List<String> outBlobNames)
FUNC <void cv.dnn.Net.forward [ARG vector_vector_Mat outputBlobs=, ARG vector_String outBlobNames=]>
SKIP:void cv::dnn::Net::forward(vector_vector_Mat& outputBlobs, vector_String outBlobNames)	 due to ARG typevector_vector_Mat/O
FUNC <void cv.dnn.Net.getLayerTypes [ARG vector_String layersTypes=]>
java: void getLayerTypes(List<String> layersTypes)
FUNC <void cv.dnn.Net.getLayersShapes [ARG MatShape netInputShape=, ARG vector_int layersIds=, ARG vector_vector_MatShape inLayersShapes=, ARG vector_vector_MatShape outLayersShapes=]>
SKIP:void cv::dnn::Net::getLayersShapes(MatShape netInputShape, vector_int& layersIds, vector_vector_MatShape& inLayersShapes, vector_vector_MatShape& outLayersShapes)	 due to ARG typevector_vector_MatShape/O
FUNC <void cv.dnn.Net.getLayersShapes [ARG vector_MatShape netInputShapes=, ARG vector_int layersIds=, ARG vector_vector_MatShape inLayersShapes=, ARG vector_vector_MatShape outLayersShapes=]>
SKIP:void cv::dnn::Net::getLayersShapes(vector_MatShape netInputShapes, vector_int& layersIds, vector_vector_MatShape& inLayersShapes, vector_vector_MatShape& outLayersShapes)	 due to ARG typevector_vector_MatShape/O
FUNC <void cv.dnn.Net.getMemoryConsumption [ARG MatShape netInputShape=, ARG size_t weights=, ARG size_t blobs=]>
java: void getMemoryConsumption(MatOfInt netInputShape, long[] weights, long[] blobs)
FUNC <void cv.dnn.Net.getMemoryConsumption [ARG int layerId=, ARG MatShape netInputShape=, ARG size_t weights=, ARG size_t blobs=]>
java: void getMemoryConsumption(int layerId, MatOfInt netInputShape, long[] weights, long[] blobs)
FUNC <void cv.dnn.Net.getMemoryConsumption [ARG int layerId=, ARG vector_MatShape netInputShapes=, ARG size_t weights=, ARG size_t blobs=]>
java: void getMemoryConsumption(int layerId, List<MatOfInt> netInputShapes, long[] weights, long[] blobs)
FUNC <void cv.dnn.Net.setHalideScheduler [ARG String scheduler=]>
java: void setHalideScheduler(String scheduler)
FUNC <void cv.dnn.Net.setInput [ARG Mat blob=, ARG String name=""]>
java: void setInput(Mat blob, String name)
java: void setInput(Mat blob)
FUNC <void cv.dnn.Net.setInputsNames [ARG vector_String inputBlobNames=]>
java: void setInputsNames(List<String> inputBlobNames)
FUNC <void cv.dnn.Net.setParam [ARG LayerId layer=, ARG int numParam=, ARG Mat blob=]>
java: void setParam(DictValue layer, int numParam, Mat blob)
FUNC <void cv.dnn.Net.setPreferableBackend [ARG int backendId=]>
java: void setPreferableBackend(int backendId)
FUNC <void cv.dnn.Net.setPreferableTarget [ARG int targetId=]>
java: void setPreferableTarget(int targetId)

=== MODULE: face (C:/Users/d_dan/Desktop/opencv-master\../opencv_contrib-master/modules/face) ===


Files (10):
['C:/Users/d_dan/Desktop/opencv-master\\../opencv_contrib-master/modules/face\\include\\opencv2\\face.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\../opencv_contrib-master/modules/face\\include\\opencv2\\face\\bif.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\../opencv_contrib-master/modules/face\\include\\opencv2\\face\\facemark.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\../opencv_contrib-master/modules/face\\include\\opencv2\\face\\facemarkAAM.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\../opencv_contrib-master/modules/face\\include\\opencv2\\face\\facemarkLBF.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\../opencv_contrib-master/modules/face\\include\\opencv2\\face\\facemark_train.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\../opencv_contrib-master/modules/face\\include\\opencv2\\face\\facerec.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\../opencv_contrib-master/modules/face\\include\\opencv2\\face\\face_alignment.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\../opencv_contrib-master/modules/face\\include\\opencv2\\face\\mace.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\../opencv_contrib-master/modules/face\\include\\opencv2\\face\\predict_collector.hpp']

Common headers (0):
[]
ok: class CLASS ::.Face : , name: Face, base: 


===== Header: C:/Users/d_dan/Desktop/opencv-master\../opencv_contrib-master/modules/face\include\opencv2\face.hpp =====
Namespaces: {'cv.face', 'cv'}

--- Incoming ---
['class cv.face.FaceRecognizer', ': cv::Algorithm', [], [], None]
ok: class CLASS cv.face::.FaceRecognizer : Algorithm, name: FaceRecognizer, base: Algorithm

--- Incoming ---
[   'cv.face.FaceRecognizer.train',
    'void',
    ['/V', '/PV'],
    [['vector_Mat', 'src', '', []], ['Mat', 'labels', '', []]],
    'void']
ok: FUNC <void cv.face.FaceRecognizer.train [ARG vector_Mat src=, ARG Mat labels=]>

--- Incoming ---
[   'cv.face.FaceRecognizer.update',
    'void',
    ['/V'],
    [['vector_Mat', 'src', '', []], ['Mat', 'labels', '', []]],
    'void']
ok: FUNC <void cv.face.FaceRecognizer.update [ARG vector_Mat src=, ARG Mat labels=]>

--- Incoming ---
[   'cv.face.FaceRecognizer.predict',
    'int',
    ['=predict_label', '/C'],
    [['Mat', 'src', '', []]],
    'int']
ok: FUNC <int cv.face.FaceRecognizer.predict [ARG Mat src=]>

--- Incoming ---
[   'cv.face.FaceRecognizer.predict',
    'void',
    ['/C'],
    [   ['Mat', 'src', '', []],
        ['int', 'label', '', ['/O', '/Ref']],
        ['double', 'confidence', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.face.FaceRecognizer.predict [ARG Mat src=, ARG int label=, ARG double confidence=]>

--- Incoming ---
[   'cv.face.FaceRecognizer.predict',
    'void',
    ['=predict_collect', '/C', '/V', '/PV'],
    [['Mat', 'src', '', []], ['Ptr_PredictCollector', 'collector', '', []]],
    'void']
ok: FUNC <void cv.face.FaceRecognizer.predict [ARG Mat src=, ARG Ptr_PredictCollector collector=]>

--- Incoming ---
[   'cv.face.FaceRecognizer.write',
    'void',
    ['/C', '/V'],
    [['String', 'filename', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.face.FaceRecognizer.write [ARG String filename=]>

--- Incoming ---
[   'cv.face.FaceRecognizer.read',
    'void',
    ['/V'],
    [['String', 'filename', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.face.FaceRecognizer.read [ARG String filename=]>

--- Incoming ---
[   'cv.face.FaceRecognizer.setLabelInfo',
    'void',
    ['/V'],
    [['int', 'label', '', []], ['String', 'strInfo', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.face.FaceRecognizer.setLabelInfo [ARG int label=, ARG String strInfo=]>

--- Incoming ---
[   'cv.face.FaceRecognizer.getLabelInfo',
    'String',
    ['/C', '/V'],
    [['int', 'label', '', []]],
    'String']
ok: FUNC <String cv.face.FaceRecognizer.getLabelInfo [ARG int label=]>

--- Incoming ---
[   'cv.face.FaceRecognizer.getLabelsByString',
    'vector_int',
    ['/C', '/V'],
    [['String', 'str', '', ['/C', '/Ref']]],
    'std::vector<int>']
ok: FUNC <vector_int cv.face.FaceRecognizer.getLabelsByString [ARG String str=]>


===== Header: C:/Users/d_dan/Desktop/opencv-master\../opencv_contrib-master/modules/face\include\opencv2\face\bif.hpp =====
Namespaces: {'cv.face', 'cv'}

--- Incoming ---
['class cv.face.BIF', ': cv::Algorithm', [], [], None]
ok: class CLASS cv.face::.BIF : Algorithm, name: BIF, base: Algorithm

--- Incoming ---
['cv.face.BIF.getNumBands', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.face.BIF.getNumBands []>

--- Incoming ---
['cv.face.BIF.getNumRotations', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.face.BIF.getNumRotations []>

--- Incoming ---
[   'cv.face.BIF.compute',
    'void',
    ['/C', '/V', '/PV'],
    [['Mat', 'image', '', []], ['Mat', 'features', '', ['/O']]],
    'void']
ok: FUNC <void cv.face.BIF.compute [ARG Mat image=, ARG Mat features=]>

--- Incoming ---
[   'cv.face.BIF.create',
    'Ptr_BIF',
    ['/S'],
    [['int', 'num_bands', '8', []], ['int', 'num_rotations', '12', []]],
    'Ptr<BIF>']
ok: FUNC <Ptr_BIF cv.face.BIF.create [ARG int num_bands=8, ARG int num_rotations=12]>


===== Header: C:/Users/d_dan/Desktop/opencv-master\../opencv_contrib-master/modules/face\include\opencv2\face\facemark.hpp =====
Namespaces: {'cv.face', 'cv'}

--- Incoming ---
['class cv.face.Facemark', ': cv::Algorithm', [], [], None]
ok: class CLASS cv.face::.Facemark : Algorithm, name: Facemark, base: Algorithm

--- Incoming ---
[   'cv.face.Facemark.loadModel',
    'void',
    ['/V', '/PV'],
    [['String', 'model', '', []]],
    'void']
ok: FUNC <void cv.face.Facemark.loadModel [ARG String model=]>

--- Incoming ---
[   'cv.face.Facemark.fit',
    'bool',
    ['/V', '/PV'],
    [   ['Mat', 'image', '', []],
        ['Mat', 'faces', '', []],
        ['vector_Mat', 'landmarks', '', ['/O']]],
    'bool']
ok: FUNC <bool cv.face.Facemark.fit [ARG Mat image=, ARG vector_Rect faces=, ARG vector_vector_Point2f landmarks=]>

--- Incoming ---
['cv.face.createFacemarkAAM', 'Ptr_Facemark', [], [], 'Ptr<Facemark>']
ok: FUNC <Ptr_Facemark cv.face..createFacemarkAAM []>

--- Incoming ---
['cv.face.createFacemarkLBF', 'Ptr_Facemark', [], [], 'Ptr<Facemark>']
ok: FUNC <Ptr_Facemark cv.face..createFacemarkLBF []>

--- Incoming ---
['cv.face.createFacemarkKazemi', 'Ptr_Facemark', [], [], 'Ptr<Facemark>']
ok: FUNC <Ptr_Facemark cv.face..createFacemarkKazemi []>


===== Header: C:/Users/d_dan/Desktop/opencv-master\../opencv_contrib-master/modules/face\include\opencv2\face\facemarkAAM.hpp =====
Namespaces: {'cv.face', 'cv'}

--- Incoming ---
['class cv.face.FacemarkAAM', ': cv::face::FacemarkTrain', [], [], None]
ok: class CLASS cv.face::.FacemarkAAM : FacemarkTrain, name: FacemarkAAM, base: FacemarkTrain


===== Header: C:/Users/d_dan/Desktop/opencv-master\../opencv_contrib-master/modules/face\include\opencv2\face\facemarkLBF.hpp =====
Namespaces: {'cv.face', 'cv'}

--- Incoming ---
['class cv.face.FacemarkLBF', ': cv::face::FacemarkTrain', [], [], None]
ok: class CLASS cv.face::.FacemarkLBF : FacemarkTrain, name: FacemarkLBF, base: FacemarkTrain


===== Header: C:/Users/d_dan/Desktop/opencv-master\../opencv_contrib-master/modules/face\include\opencv2\face\facemark_train.hpp =====
Namespaces: {'cv.face', 'cv'}

--- Incoming ---
[   'cv.face.getFacesHAAR',
    'bool',
    [],
    [   ['Mat', 'image', '', []],
        ['Mat', 'faces', '', ['/O']],
        ['String', 'face_cascade_name', '', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.face..getFacesHAAR [ARG Mat image=, ARG Mat faces=, ARG String face_cascade_name=]>

--- Incoming ---
[   'cv.face.loadDatasetList',
    'bool',
    [],
    [   ['String', 'imageList', '', []],
        ['String', 'annotationList', '', []],
        ['vector_String', 'images', '', ['/Ref']],
        ['vector_String', 'annotations', '', ['/Ref']]],
    'bool']
ok: FUNC <bool cv.face..loadDatasetList [ARG String imageList=, ARG String annotationList=, ARG vector_String images=, ARG vector_String annotations=]>

--- Incoming ---
[   'cv.face.loadTrainingData',
    'bool',
    [],
    [   ['String', 'filename', '', []],
        ['vector_String', 'images', '', ['/Ref']],
        ['Mat', 'facePoints', '', ['/O']],
        ['char', 'delim', "' '", []],
        ['float', 'offset', '0.0f', []]],
    'bool']
ok: FUNC <bool cv.face..loadTrainingData [ARG String filename=, ARG vector_String images=, ARG Mat facePoints=, ARG char delim=' ', ARG float offset=0.0f]>

--- Incoming ---
[   'cv.face.loadTrainingData',
    'bool',
    [],
    [   ['String', 'imageList', '', []],
        ['String', 'groundTruth', '', []],
        ['vector_String', 'images', '', ['/Ref']],
        ['Mat', 'facePoints', '', ['/O']],
        ['float', 'offset', '0.0f', []]],
    'bool']
ok: FUNC <bool cv.face..loadTrainingData [ARG String imageList=, ARG String groundTruth=, ARG vector_String images=, ARG Mat facePoints=, ARG float offset=0.0f]>

--- Incoming ---
[   'cv.face.loadTrainingData',
    'bool',
    [],
    [   ['vector_String', 'filename', '', []],
        ['vector_vector_Point2f', 'trainlandmarks', '', ['/Ref']],
        ['vector_String', 'trainimages', '', ['/Ref']]],
    'bool']
ok: FUNC <bool cv.face..loadTrainingData [ARG vector_String filename=, ARG vector_vector_Point2f trainlandmarks=, ARG vector_String trainimages=]>

--- Incoming ---
[   'cv.face.loadFacePoints',
    'bool',
    [],
    [   ['String', 'filename', '', []],
        ['Mat', 'points', '', ['/O']],
        ['float', 'offset', '0.0f', []]],
    'bool']
ok: FUNC <bool cv.face..loadFacePoints [ARG String filename=, ARG Mat points=, ARG float offset=0.0f]>

--- Incoming ---
[   'cv.face.drawFacemarks',
    'void',
    [],
    [   ['Mat', 'image', '', ['/IO']],
        ['Mat', 'points', '', []],
        ['Scalar', 'color', 'Scalar(255,0,0)', []]],
    'void']
ok: FUNC <void cv.face..drawFacemarks [ARG Mat image=, ARG Mat points=, ARG Scalar color=Scalar(255,0,0)]>

--- Incoming ---
['class cv.face.FacemarkTrain', ': cv::face::Facemark', [], [], None]
ok: class CLASS cv.face::.FacemarkTrain : Facemark, name: FacemarkTrain, base: Facemark


===== Header: C:/Users/d_dan/Desktop/opencv-master\../opencv_contrib-master/modules/face\include\opencv2\face\facerec.hpp =====
Namespaces: {'cv.face', 'cv'}

--- Incoming ---
[   'class cv.face.BasicFaceRecognizer',
    ': cv::face::FaceRecognizer',
    [],
    [],
    None]
ok: class CLASS cv.face::.BasicFaceRecognizer : FaceRecognizer, name: BasicFaceRecognizer, base: FaceRecognizer

--- Incoming ---
['cv.face.BasicFaceRecognizer.getNumComponents', 'int', ['/C'], [], 'int']
ok: FUNC <int cv.face.BasicFaceRecognizer.getNumComponents []>

--- Incoming ---
[   'cv.face.BasicFaceRecognizer.setNumComponents',
    'void',
    [],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.face.BasicFaceRecognizer.setNumComponents [ARG int val=]>

--- Incoming ---
['cv.face.BasicFaceRecognizer.getThreshold', 'double', ['/C'], [], 'double']
ok: FUNC <double cv.face.BasicFaceRecognizer.getThreshold []>

--- Incoming ---
[   'cv.face.BasicFaceRecognizer.setThreshold',
    'void',
    [],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.face.BasicFaceRecognizer.setThreshold [ARG double val=]>

--- Incoming ---
[   'cv.face.BasicFaceRecognizer.getProjections',
    'vector_Mat',
    ['/C'],
    [],
    'std::vector<cv::Mat>']
ok: FUNC <vector_Mat cv.face.BasicFaceRecognizer.getProjections []>

--- Incoming ---
['cv.face.BasicFaceRecognizer.getLabels', 'Mat', ['/C'], [], 'cv::Mat']
ok: FUNC <Mat cv.face.BasicFaceRecognizer.getLabels []>

--- Incoming ---
['cv.face.BasicFaceRecognizer.getEigenValues', 'Mat', ['/C'], [], 'cv::Mat']
ok: FUNC <Mat cv.face.BasicFaceRecognizer.getEigenValues []>

--- Incoming ---
['cv.face.BasicFaceRecognizer.getEigenVectors', 'Mat', ['/C'], [], 'cv::Mat']
ok: FUNC <Mat cv.face.BasicFaceRecognizer.getEigenVectors []>

--- Incoming ---
['cv.face.BasicFaceRecognizer.getMean', 'Mat', ['/C'], [], 'cv::Mat']
ok: FUNC <Mat cv.face.BasicFaceRecognizer.getMean []>

--- Incoming ---
[   'class cv.face.EigenFaceRecognizer',
    ': cv::face::BasicFaceRecognizer',
    [],
    [],
    None]
ok: class CLASS cv.face::.EigenFaceRecognizer : BasicFaceRecognizer, name: EigenFaceRecognizer, base: BasicFaceRecognizer

--- Incoming ---
[   'cv.face.EigenFaceRecognizer.create',
    'Ptr_EigenFaceRecognizer',
    ['/S'],
    [   ['int', 'num_components', '0', []],
        ['double', 'threshold', 'DBL_MAX', []]],
    'Ptr<EigenFaceRecognizer>']
ok: FUNC <Ptr_EigenFaceRecognizer cv.face.EigenFaceRecognizer.create [ARG int num_components=0, ARG double threshold=DBL_MAX]>

--- Incoming ---
[   'class cv.face.FisherFaceRecognizer',
    ': cv::face::BasicFaceRecognizer',
    [],
    [],
    None]
ok: class CLASS cv.face::.FisherFaceRecognizer : BasicFaceRecognizer, name: FisherFaceRecognizer, base: BasicFaceRecognizer

--- Incoming ---
[   'cv.face.FisherFaceRecognizer.create',
    'Ptr_FisherFaceRecognizer',
    ['/S'],
    [   ['int', 'num_components', '0', []],
        ['double', 'threshold', 'DBL_MAX', []]],
    'Ptr<FisherFaceRecognizer>']
ok: FUNC <Ptr_FisherFaceRecognizer cv.face.FisherFaceRecognizer.create [ARG int num_components=0, ARG double threshold=DBL_MAX]>

--- Incoming ---
['class cv.face.LBPHFaceRecognizer', ': cv::face::FaceRecognizer', [], [], None]
ok: class CLASS cv.face::.LBPHFaceRecognizer : FaceRecognizer, name: LBPHFaceRecognizer, base: FaceRecognizer

--- Incoming ---
['cv.face.LBPHFaceRecognizer.getGridX', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.face.LBPHFaceRecognizer.getGridX []>

--- Incoming ---
[   'cv.face.LBPHFaceRecognizer.setGridX',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.face.LBPHFaceRecognizer.setGridX [ARG int val=]>

--- Incoming ---
['cv.face.LBPHFaceRecognizer.getGridY', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.face.LBPHFaceRecognizer.getGridY []>

--- Incoming ---
[   'cv.face.LBPHFaceRecognizer.setGridY',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.face.LBPHFaceRecognizer.setGridY [ARG int val=]>

--- Incoming ---
['cv.face.LBPHFaceRecognizer.getRadius', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.face.LBPHFaceRecognizer.getRadius []>

--- Incoming ---
[   'cv.face.LBPHFaceRecognizer.setRadius',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.face.LBPHFaceRecognizer.setRadius [ARG int val=]>

--- Incoming ---
[   'cv.face.LBPHFaceRecognizer.getNeighbors',
    'int',
    ['/C', '/V', '/PV'],
    [],
    'int']
ok: FUNC <int cv.face.LBPHFaceRecognizer.getNeighbors []>

--- Incoming ---
[   'cv.face.LBPHFaceRecognizer.setNeighbors',
    'void',
    ['/V', '/PV'],
    [['int', 'val', '', []]],
    'void']
ok: FUNC <void cv.face.LBPHFaceRecognizer.setNeighbors [ARG int val=]>

--- Incoming ---
[   'cv.face.LBPHFaceRecognizer.getThreshold',
    'double',
    ['/C', '/V', '/PV'],
    [],
    'double']
ok: FUNC <double cv.face.LBPHFaceRecognizer.getThreshold []>

--- Incoming ---
[   'cv.face.LBPHFaceRecognizer.setThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'val', '', []]],
    'void']
ok: FUNC <void cv.face.LBPHFaceRecognizer.setThreshold [ARG double val=]>

--- Incoming ---
[   'cv.face.LBPHFaceRecognizer.getHistograms',
    'vector_Mat',
    ['/C', '/V', '/PV'],
    [],
    'std::vector<cv::Mat>']
ok: FUNC <vector_Mat cv.face.LBPHFaceRecognizer.getHistograms []>

--- Incoming ---
[   'cv.face.LBPHFaceRecognizer.getLabels',
    'Mat',
    ['/C', '/V', '/PV'],
    [],
    'cv::Mat']
ok: FUNC <Mat cv.face.LBPHFaceRecognizer.getLabels []>

--- Incoming ---
[   'cv.face.LBPHFaceRecognizer.create',
    'Ptr_LBPHFaceRecognizer',
    ['/S'],
    [   ['int', 'radius', '1', []],
        ['int', 'neighbors', '8', []],
        ['int', 'grid_x', '8', []],
        ['int', 'grid_y', '8', []],
        ['double', 'threshold', 'DBL_MAX', []]],
    'Ptr<LBPHFaceRecognizer>']
ok: FUNC <Ptr_LBPHFaceRecognizer cv.face.LBPHFaceRecognizer.create [ARG int radius=1, ARG int neighbors=8, ARG int grid_x=8, ARG int grid_y=8, ARG double threshold=DBL_MAX]>


===== Header: C:/Users/d_dan/Desktop/opencv-master\../opencv_contrib-master/modules/face\include\opencv2\face\face_alignment.hpp =====
Namespaces: {'cv.face', 'cv'}

--- Incoming ---
['class cv.face.FacemarkKazemi', ': cv::face::Facemark', [], [], None]
ok: class CLASS cv.face::.FacemarkKazemi : Facemark, name: FacemarkKazemi, base: Facemark


===== Header: C:/Users/d_dan/Desktop/opencv-master\../opencv_contrib-master/modules/face\include\opencv2\face\mace.hpp =====
Namespaces: {'cv.face', 'cv'}

--- Incoming ---
['class cv.face.MACE', ': cv::Algorithm', [], [], None]
ok: class CLASS cv.face::.MACE : Algorithm, name: MACE, base: Algorithm

--- Incoming ---
[   'cv.face.MACE.salt',
    'void',
    ['/V', '/PV'],
    [['String', 'passphrase', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.face.MACE.salt [ARG String passphrase=]>

--- Incoming ---
[   'cv.face.MACE.train',
    'void',
    ['/V', '/PV'],
    [['vector_Mat', 'images', '', []]],
    'void']
ok: FUNC <void cv.face.MACE.train [ARG vector_Mat images=]>

--- Incoming ---
[   'cv.face.MACE.same',
    'bool',
    ['/C', '/V', '/PV'],
    [['Mat', 'query', '', []]],
    'bool']
ok: FUNC <bool cv.face.MACE.same [ARG Mat query=]>

--- Incoming ---
[   'cv.face.MACE.load',
    'Ptr_MACE',
    ['/S'],
    [   ['String', 'filename', '', ['/C', '/Ref']],
        ['String', 'objname', 'String()', ['/C', '/Ref']]],
    'cv::Ptr<MACE>']
ok: FUNC <Ptr_MACE cv.face.MACE.load [ARG String filename=, ARG String objname=String()]>

--- Incoming ---
[   'cv.face.MACE.create',
    'Ptr_MACE',
    ['/S'],
    [['int', 'IMGSIZE', '64', []]],
    'cv::Ptr<MACE>']
ok: FUNC <Ptr_MACE cv.face.MACE.create [ARG int IMGSIZE=64]>


===== Header: C:/Users/d_dan/Desktop/opencv-master\../opencv_contrib-master/modules/face\include\opencv2\face\predict_collector.hpp =====
Namespaces: {'cv.face', 'cv'}

--- Incoming ---
['class cv.face.PredictCollector', '', [], [], None]
ok: class CLASS cv.face::.PredictCollector : , name: PredictCollector, base: 

--- Incoming ---
[   'class cv.face.StandardCollector',
    ': cv::face::PredictCollector',
    [],
    [],
    None]
ok: class CLASS cv.face::.StandardCollector : PredictCollector, name: StandardCollector, base: PredictCollector

--- Incoming ---
['cv.face.StandardCollector.getMinLabel', 'int', ['/C'], [], 'int']
ok: FUNC <int cv.face.StandardCollector.getMinLabel []>

--- Incoming ---
['cv.face.StandardCollector.getMinDist', 'double', ['/C'], [], 'double']
ok: FUNC <double cv.face.StandardCollector.getMinDist []>

--- Incoming ---
[   'cv.face.StandardCollector.getResults',
    'vector_pair_int_and_double',
    ['/C'],
    [['bool', 'sorted', 'false', []]],
    'std::vector< std::pair<int, double> >']
ok: FUNC <vector_pair_int_and_double cv.face.StandardCollector.getResults [ARG bool sorted=false]>

--- Incoming ---
[   'cv.face.StandardCollector.create',
    'Ptr_StandardCollector',
    ['/S'],
    [['double', 'threshold', 'DBL_MAX', []]],
    'Ptr<StandardCollector>']
ok: FUNC <Ptr_StandardCollector cv.face.StandardCollector.create [ARG double threshold=DBL_MAX]>


===== Generating... =====
CLASS ::.Face : 
FUNC <Ptr_Facemark cv.face..createFacemarkAAM []>
java: Facemark createFacemarkAAM()
FUNC <Ptr_Facemark cv.face..createFacemarkKazemi []>
java: Facemark createFacemarkKazemi()
FUNC <Ptr_Facemark cv.face..createFacemarkLBF []>
java: Facemark createFacemarkLBF()
FUNC <bool cv.face..getFacesHAAR [ARG Mat image=, ARG Mat faces=, ARG String face_cascade_name=]>
java: boolean getFacesHAAR(Mat image, Mat faces, String face_cascade_name)
FUNC <bool cv.face..loadDatasetList [ARG String imageList=, ARG String annotationList=, ARG vector_String images=, ARG vector_String annotations=]>
java: boolean loadDatasetList(String imageList, String annotationList, List<String> images, List<String> annotations)
FUNC <bool cv.face..loadFacePoints [ARG String filename=, ARG Mat points=, ARG float offset=0.0f]>
java: boolean loadFacePoints(String filename, Mat points, float offset)
java: boolean loadFacePoints(String filename, Mat points)
FUNC <bool cv.face..loadTrainingData [ARG String filename=, ARG vector_String images=, ARG Mat facePoints=, ARG char delim=' ', ARG float offset=0.0f]>
java: boolean loadTrainingData(String filename, List<String> images, Mat facePoints, char delim, float offset)
java: boolean loadTrainingData(String filename, List<String> images, Mat facePoints, char delim)
java: boolean loadTrainingData(String filename, List<String> images, Mat facePoints)
FUNC <bool cv.face..loadTrainingData [ARG String imageList=, ARG String groundTruth=, ARG vector_String images=, ARG Mat facePoints=, ARG float offset=0.0f]>
java: boolean loadTrainingData(String imageList, String groundTruth, List<String> images, Mat facePoints, float offset)
java: boolean loadTrainingData(String imageList, String groundTruth, List<String> images, Mat facePoints)
FUNC <bool cv.face..loadTrainingData [ARG vector_String filename=, ARG vector_vector_Point2f trainlandmarks=, ARG vector_String trainimages=]>
java: boolean loadTrainingData(List<String> filename, List<MatOfPoint2f> trainlandmarks, List<String> trainimages)
FUNC <void cv.face..drawFacemarks [ARG Mat image=, ARG Mat points=, ARG Scalar color=Scalar(255,0,0)]>
java: void drawFacemarks(Mat image, Mat points, Scalar color)
java: void drawFacemarks(Mat image, Mat points)
CLASS cv.face::.FaceRecognizer : Algorithm
FUNC <String cv.face.FaceRecognizer.getLabelInfo [ARG int label=]>
java: String getLabelInfo(int label)
FUNC <int cv.face.FaceRecognizer.predict [ARG Mat src=]>
java: int predict_label(Mat src)
FUNC <vector_int cv.face.FaceRecognizer.getLabelsByString [ARG String str=]>
java: MatOfInt getLabelsByString(String str)
FUNC <void cv.face.FaceRecognizer.predict [ARG Mat src=, ARG Ptr_PredictCollector collector=]>
java: void predict_collect(Mat src, PredictCollector collector)
FUNC <void cv.face.FaceRecognizer.predict [ARG Mat src=, ARG int label=, ARG double confidence=]>
java: void predict(Mat src, int[] label, double[] confidence)
FUNC <void cv.face.FaceRecognizer.read [ARG String filename=]>
java: void read(String filename)
FUNC <void cv.face.FaceRecognizer.setLabelInfo [ARG int label=, ARG String strInfo=]>
java: void setLabelInfo(int label, String strInfo)
FUNC <void cv.face.FaceRecognizer.train [ARG vector_Mat src=, ARG Mat labels=]>
java: void train(List<Mat> src, Mat labels)
FUNC <void cv.face.FaceRecognizer.update [ARG vector_Mat src=, ARG Mat labels=]>
java: void update(List<Mat> src, Mat labels)
FUNC <void cv.face.FaceRecognizer.write [ARG String filename=]>
java: void write(String filename)
CLASS cv.face::.BIF : Algorithm
FUNC <Ptr_BIF cv.face.BIF.create [ARG int num_bands=8, ARG int num_rotations=12]>
java: BIF create(int num_bands, int num_rotations)
java: BIF create(int num_bands)
java: BIF create()
FUNC <int cv.face.BIF.getNumBands []>
java: int getNumBands()
FUNC <int cv.face.BIF.getNumRotations []>
java: int getNumRotations()
FUNC <void cv.face.BIF.compute [ARG Mat image=, ARG Mat features=]>
java: void compute(Mat image, Mat features)
CLASS cv.face::.Facemark : Algorithm
FUNC <bool cv.face.Facemark.fit [ARG Mat image=, ARG vector_Rect faces=, ARG vector_vector_Point2f landmarks=]>
java: boolean fit(Mat image, MatOfRect faces, List<MatOfPoint2f> landmarks)
FUNC <void cv.face.Facemark.loadModel [ARG String model=]>
java: void loadModel(String model)
CLASS cv.face::.FacemarkAAM : FacemarkTrain
CLASS cv.face::.FacemarkLBF : FacemarkTrain
CLASS cv.face::.FacemarkTrain : Facemark
CLASS cv.face::.BasicFaceRecognizer : FaceRecognizer
FUNC <Mat cv.face.BasicFaceRecognizer.getEigenValues []>
java: Mat getEigenValues()
FUNC <Mat cv.face.BasicFaceRecognizer.getEigenVectors []>
java: Mat getEigenVectors()
FUNC <Mat cv.face.BasicFaceRecognizer.getLabels []>
java: Mat getLabels()
FUNC <Mat cv.face.BasicFaceRecognizer.getMean []>
java: Mat getMean()
FUNC <double cv.face.BasicFaceRecognizer.getThreshold []>
java: double getThreshold()
FUNC <int cv.face.BasicFaceRecognizer.getNumComponents []>
java: int getNumComponents()
FUNC <vector_Mat cv.face.BasicFaceRecognizer.getProjections []>
java: List<Mat> getProjections()
FUNC <void cv.face.BasicFaceRecognizer.setNumComponents [ARG int val=]>
java: void setNumComponents(int val)
FUNC <void cv.face.BasicFaceRecognizer.setThreshold [ARG double val=]>
java: void setThreshold(double val)
CLASS cv.face::.EigenFaceRecognizer : BasicFaceRecognizer
FUNC <Ptr_EigenFaceRecognizer cv.face.EigenFaceRecognizer.create [ARG int num_components=0, ARG double threshold=DBL_MAX]>
java: EigenFaceRecognizer create(int num_components, double threshold)
java: EigenFaceRecognizer create(int num_components)
java: EigenFaceRecognizer create()
CLASS cv.face::.FisherFaceRecognizer : BasicFaceRecognizer
FUNC <Ptr_FisherFaceRecognizer cv.face.FisherFaceRecognizer.create [ARG int num_components=0, ARG double threshold=DBL_MAX]>
java: FisherFaceRecognizer create(int num_components, double threshold)
java: FisherFaceRecognizer create(int num_components)
java: FisherFaceRecognizer create()
CLASS cv.face::.LBPHFaceRecognizer : FaceRecognizer
FUNC <Mat cv.face.LBPHFaceRecognizer.getLabels []>
java: Mat getLabels()
FUNC <Ptr_LBPHFaceRecognizer cv.face.LBPHFaceRecognizer.create [ARG int radius=1, ARG int neighbors=8, ARG int grid_x=8, ARG int grid_y=8, ARG double threshold=DBL_MAX]>
java: LBPHFaceRecognizer create(int radius, int neighbors, int grid_x, int grid_y, double threshold)
java: LBPHFaceRecognizer create(int radius, int neighbors, int grid_x, int grid_y)
java: LBPHFaceRecognizer create(int radius, int neighbors, int grid_x)
java: LBPHFaceRecognizer create(int radius, int neighbors)
java: LBPHFaceRecognizer create(int radius)
java: LBPHFaceRecognizer create()
FUNC <double cv.face.LBPHFaceRecognizer.getThreshold []>
java: double getThreshold()
FUNC <int cv.face.LBPHFaceRecognizer.getGridX []>
java: int getGridX()
FUNC <int cv.face.LBPHFaceRecognizer.getGridY []>
java: int getGridY()
FUNC <int cv.face.LBPHFaceRecognizer.getNeighbors []>
java: int getNeighbors()
FUNC <int cv.face.LBPHFaceRecognizer.getRadius []>
java: int getRadius()
FUNC <vector_Mat cv.face.LBPHFaceRecognizer.getHistograms []>
java: List<Mat> getHistograms()
FUNC <void cv.face.LBPHFaceRecognizer.setGridX [ARG int val=]>
java: void setGridX(int val)
FUNC <void cv.face.LBPHFaceRecognizer.setGridY [ARG int val=]>
java: void setGridY(int val)
FUNC <void cv.face.LBPHFaceRecognizer.setNeighbors [ARG int val=]>
java: void setNeighbors(int val)
FUNC <void cv.face.LBPHFaceRecognizer.setRadius [ARG int val=]>
java: void setRadius(int val)
FUNC <void cv.face.LBPHFaceRecognizer.setThreshold [ARG double val=]>
java: void setThreshold(double val)
CLASS cv.face::.FacemarkKazemi : Facemark
CLASS cv.face::.MACE : Algorithm
FUNC <Ptr_MACE cv.face.MACE.create [ARG int IMGSIZE=64]>
java: MACE create(int IMGSIZE)
java: MACE create()
FUNC <Ptr_MACE cv.face.MACE.load [ARG String filename=, ARG String objname=String()]>
java: MACE load(String filename, String objname)
java: MACE load(String filename)
FUNC <bool cv.face.MACE.same [ARG Mat query=]>
java: boolean same(Mat query)
FUNC <void cv.face.MACE.salt [ARG String passphrase=]>
java: void salt(String passphrase)
FUNC <void cv.face.MACE.train [ARG vector_Mat images=]>
java: void train(List<Mat> images)
CLASS cv.face::.PredictCollector : 
CLASS cv.face::.StandardCollector : PredictCollector
FUNC <Ptr_StandardCollector cv.face.StandardCollector.create [ARG double threshold=DBL_MAX]>
java: StandardCollector create(double threshold)
java: StandardCollector create()
FUNC <double cv.face.StandardCollector.getMinDist []>
java: double getMinDist()
FUNC <int cv.face.StandardCollector.getMinLabel []>
java: int getMinLabel()
FUNC <vector_pair_int_and_double cv.face.StandardCollector.getResults [ARG bool sorted=false]>
SKIP:vector_pair_int_and_double cv::face::StandardCollector::getResults(bool sorted = false)	 due to RET typevector_pair_int_and_double

=== MODULE: imgcodecs (C:/Users/d_dan/Desktop/opencv-master\modules/imgcodecs) ===


Files (4):
['C:/Users/d_dan/Desktop/opencv-master\\modules/imgcodecs\\include\\opencv2\\imgcodecs\\imgcodecs_c.h',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/imgcodecs\\include\\opencv2\\imgcodecs\\ios.h',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/imgcodecs\\include\\opencv2\\imgcodecs.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/imgcodecs\\include\\opencv2\\imgcodecs\\imgcodecs.hpp']

Common headers (0):
[]
ok: class CLASS ::.Imgcodecs : , name: Imgcodecs, base: 


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/imgcodecs\include\opencv2\imgcodecs\imgcodecs_c.h =====
Namespaces: {''}

--- Incoming ---
['const CV_LOAD_IMAGE_UNCHANGED', '-1', [], [], None]
ok: CONST CV_LOAD_IMAGE_UNCHANGED=-1

--- Incoming ---
['const CV_LOAD_IMAGE_GRAYSCALE', '0', [], [], None]
ok: CONST CV_LOAD_IMAGE_GRAYSCALE=0

--- Incoming ---
['const CV_LOAD_IMAGE_COLOR', '1', [], [], None]
ok: CONST CV_LOAD_IMAGE_COLOR=1

--- Incoming ---
['const CV_LOAD_IMAGE_ANYDEPTH', '2', [], [], None]
ok: CONST CV_LOAD_IMAGE_ANYDEPTH=2

--- Incoming ---
['const CV_LOAD_IMAGE_ANYCOLOR', '4', [], [], None]
ok: CONST CV_LOAD_IMAGE_ANYCOLOR=4

--- Incoming ---
['const CV_LOAD_IMAGE_IGNORE_ORIENTATION', '128', [], [], None]
ok: CONST CV_LOAD_IMAGE_IGNORE_ORIENTATION=128

--- Incoming ---
['const CV_IMWRITE_JPEG_QUALITY', '1', [], [], None]
ok: CONST CV_IMWRITE_JPEG_QUALITY=1

--- Incoming ---
['const CV_IMWRITE_JPEG_PROGRESSIVE', '2', [], [], None]
ok: CONST CV_IMWRITE_JPEG_PROGRESSIVE=2

--- Incoming ---
['const CV_IMWRITE_JPEG_OPTIMIZE', '3', [], [], None]
ok: CONST CV_IMWRITE_JPEG_OPTIMIZE=3

--- Incoming ---
['const CV_IMWRITE_JPEG_RST_INTERVAL', '4', [], [], None]
ok: CONST CV_IMWRITE_JPEG_RST_INTERVAL=4

--- Incoming ---
['const CV_IMWRITE_JPEG_LUMA_QUALITY', '5', [], [], None]
ok: CONST CV_IMWRITE_JPEG_LUMA_QUALITY=5

--- Incoming ---
['const CV_IMWRITE_JPEG_CHROMA_QUALITY', '6', [], [], None]
ok: CONST CV_IMWRITE_JPEG_CHROMA_QUALITY=6

--- Incoming ---
['const CV_IMWRITE_PNG_COMPRESSION', '16', [], [], None]
ok: CONST CV_IMWRITE_PNG_COMPRESSION=16

--- Incoming ---
['const CV_IMWRITE_PNG_STRATEGY', '17', [], [], None]
ok: CONST CV_IMWRITE_PNG_STRATEGY=17

--- Incoming ---
['const CV_IMWRITE_PNG_BILEVEL', '18', [], [], None]
ok: CONST CV_IMWRITE_PNG_BILEVEL=18

--- Incoming ---
['const CV_IMWRITE_PNG_STRATEGY_DEFAULT', '0', [], [], None]
ok: CONST CV_IMWRITE_PNG_STRATEGY_DEFAULT=0

--- Incoming ---
['const CV_IMWRITE_PNG_STRATEGY_FILTERED', '1', [], [], None]
ok: CONST CV_IMWRITE_PNG_STRATEGY_FILTERED=1

--- Incoming ---
['const CV_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY', '2', [], [], None]
ok: CONST CV_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY=2

--- Incoming ---
['const CV_IMWRITE_PNG_STRATEGY_RLE', '3', [], [], None]
ok: CONST CV_IMWRITE_PNG_STRATEGY_RLE=3

--- Incoming ---
['const CV_IMWRITE_PNG_STRATEGY_FIXED', '4', [], [], None]
ok: CONST CV_IMWRITE_PNG_STRATEGY_FIXED=4

--- Incoming ---
['const CV_IMWRITE_PXM_BINARY', '32', [], [], None]
ok: CONST CV_IMWRITE_PXM_BINARY=32

--- Incoming ---
['const CV_IMWRITE_EXR_TYPE', '48', [], [], None]
ok: CONST CV_IMWRITE_EXR_TYPE=48

--- Incoming ---
['const CV_IMWRITE_WEBP_QUALITY', '64', [], [], None]
ok: CONST CV_IMWRITE_WEBP_QUALITY=64

--- Incoming ---
['const CV_IMWRITE_PAM_TUPLETYPE', '128', [], [], None]
ok: CONST CV_IMWRITE_PAM_TUPLETYPE=128

--- Incoming ---
['const CV_IMWRITE_PAM_FORMAT_NULL', '0', [], [], None]
ok: CONST CV_IMWRITE_PAM_FORMAT_NULL=0

--- Incoming ---
['const CV_IMWRITE_PAM_FORMAT_BLACKANDWHITE', '1', [], [], None]
ok: CONST CV_IMWRITE_PAM_FORMAT_BLACKANDWHITE=1

--- Incoming ---
['const CV_IMWRITE_PAM_FORMAT_GRAYSCALE', '2', [], [], None]
ok: CONST CV_IMWRITE_PAM_FORMAT_GRAYSCALE=2

--- Incoming ---
['const CV_IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA', '3', [], [], None]
ok: CONST CV_IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA=3

--- Incoming ---
['const CV_IMWRITE_PAM_FORMAT_RGB', '4', [], [], None]
ok: CONST CV_IMWRITE_PAM_FORMAT_RGB=4

--- Incoming ---
['const CV_IMWRITE_PAM_FORMAT_RGB_ALPHA', '5', [], [], None]
ok: CONST CV_IMWRITE_PAM_FORMAT_RGB_ALPHA=5

--- Incoming ---
['const CV_CVTIMG_FLIP', '1', [], [], None]
ok: CONST CV_CVTIMG_FLIP=1

--- Incoming ---
['const CV_CVTIMG_SWAP_RB', '2', [], [], None]
ok: CONST CV_CVTIMG_SWAP_RB=2


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/imgcodecs\include\opencv2\imgcodecs\ios.h =====
Namespaces: {''}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/imgcodecs\include\opencv2\imgcodecs\ios.h


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/imgcodecs\include\opencv2\imgcodecs.hpp =====
Namespaces: {'', 'cv'}

--- Incoming ---
['const cv.IMREAD_UNCHANGED', '-1', [], [], None]
ok: CONST IMREAD_UNCHANGED=-1

--- Incoming ---
['const cv.IMREAD_GRAYSCALE', '0', [], [], None]
ok: CONST IMREAD_GRAYSCALE=0

--- Incoming ---
['const cv.IMREAD_COLOR', '1', [], [], None]
ok: CONST IMREAD_COLOR=1

--- Incoming ---
['const cv.IMREAD_ANYDEPTH', '2', [], [], None]
ok: CONST IMREAD_ANYDEPTH=2

--- Incoming ---
['const cv.IMREAD_ANYCOLOR', '4', [], [], None]
ok: CONST IMREAD_ANYCOLOR=4

--- Incoming ---
['const cv.IMREAD_LOAD_GDAL', '8', [], [], None]
ok: CONST IMREAD_LOAD_GDAL=8

--- Incoming ---
['const cv.IMREAD_REDUCED_GRAYSCALE_2', '16', [], [], None]
ok: CONST IMREAD_REDUCED_GRAYSCALE_2=16

--- Incoming ---
['const cv.IMREAD_REDUCED_COLOR_2', '17', [], [], None]
ok: CONST IMREAD_REDUCED_COLOR_2=17

--- Incoming ---
['const cv.IMREAD_REDUCED_GRAYSCALE_4', '32', [], [], None]
ok: CONST IMREAD_REDUCED_GRAYSCALE_4=32

--- Incoming ---
['const cv.IMREAD_REDUCED_COLOR_4', '33', [], [], None]
ok: CONST IMREAD_REDUCED_COLOR_4=33

--- Incoming ---
['const cv.IMREAD_REDUCED_GRAYSCALE_8', '64', [], [], None]
ok: CONST IMREAD_REDUCED_GRAYSCALE_8=64

--- Incoming ---
['const cv.IMREAD_REDUCED_COLOR_8', '65', [], [], None]
ok: CONST IMREAD_REDUCED_COLOR_8=65

--- Incoming ---
['const cv.IMREAD_IGNORE_ORIENTATION', '128', [], [], None]
ok: CONST IMREAD_IGNORE_ORIENTATION=128

--- Incoming ---
['const cv.IMWRITE_JPEG_QUALITY', '1', [], [], None]
ok: CONST IMWRITE_JPEG_QUALITY=1

--- Incoming ---
['const cv.IMWRITE_JPEG_PROGRESSIVE', '2', [], [], None]
ok: CONST IMWRITE_JPEG_PROGRESSIVE=2

--- Incoming ---
['const cv.IMWRITE_JPEG_OPTIMIZE', '3', [], [], None]
ok: CONST IMWRITE_JPEG_OPTIMIZE=3

--- Incoming ---
['const cv.IMWRITE_JPEG_RST_INTERVAL', '4', [], [], None]
ok: CONST IMWRITE_JPEG_RST_INTERVAL=4

--- Incoming ---
['const cv.IMWRITE_JPEG_LUMA_QUALITY', '5', [], [], None]
ok: CONST IMWRITE_JPEG_LUMA_QUALITY=5

--- Incoming ---
['const cv.IMWRITE_JPEG_CHROMA_QUALITY', '6', [], [], None]
ok: CONST IMWRITE_JPEG_CHROMA_QUALITY=6

--- Incoming ---
['const cv.IMWRITE_PNG_COMPRESSION', '16', [], [], None]
ok: CONST IMWRITE_PNG_COMPRESSION=16

--- Incoming ---
['const cv.IMWRITE_PNG_STRATEGY', '17', [], [], None]
ok: CONST IMWRITE_PNG_STRATEGY=17

--- Incoming ---
['const cv.IMWRITE_PNG_BILEVEL', '18', [], [], None]
ok: CONST IMWRITE_PNG_BILEVEL=18

--- Incoming ---
['const cv.IMWRITE_PXM_BINARY', '32', [], [], None]
ok: CONST IMWRITE_PXM_BINARY=32

--- Incoming ---
['const cv.IMWRITE_EXR_TYPE', '(3 << 4) + 0', [], [], None]
ok: CONST IMWRITE_EXR_TYPE=(3 << 4) + 0

--- Incoming ---
['const cv.IMWRITE_WEBP_QUALITY', '64', [], [], None]
ok: CONST IMWRITE_WEBP_QUALITY=64

--- Incoming ---
['const cv.IMWRITE_PAM_TUPLETYPE', '128', [], [], None]
ok: CONST IMWRITE_PAM_TUPLETYPE=128

--- Incoming ---
['const cv.IMWRITE_TIFF_RESUNIT', '256', [], [], None]
ok: CONST IMWRITE_TIFF_RESUNIT=256

--- Incoming ---
['const cv.IMWRITE_TIFF_XDPI', '257', [], [], None]
ok: CONST IMWRITE_TIFF_XDPI=257

--- Incoming ---
['const cv.IMWRITE_TIFF_YDPI', '258', [], [], None]
ok: CONST IMWRITE_TIFF_YDPI=258

--- Incoming ---
['const cv.IMWRITE_EXR_TYPE_HALF', '1', [], [], None]
ok: CONST IMWRITE_EXR_TYPE_HALF=1

--- Incoming ---
['const cv.IMWRITE_EXR_TYPE_FLOAT', '2', [], [], None]
ok: CONST IMWRITE_EXR_TYPE_FLOAT=2

--- Incoming ---
['const cv.IMWRITE_PNG_STRATEGY_DEFAULT', '0', [], [], None]
ok: CONST IMWRITE_PNG_STRATEGY_DEFAULT=0

--- Incoming ---
['const cv.IMWRITE_PNG_STRATEGY_FILTERED', '1', [], [], None]
ok: CONST IMWRITE_PNG_STRATEGY_FILTERED=1

--- Incoming ---
['const cv.IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY', '2', [], [], None]
ok: CONST IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY=2

--- Incoming ---
['const cv.IMWRITE_PNG_STRATEGY_RLE', '3', [], [], None]
ok: CONST IMWRITE_PNG_STRATEGY_RLE=3

--- Incoming ---
['const cv.IMWRITE_PNG_STRATEGY_FIXED', '4', [], [], None]
ok: CONST IMWRITE_PNG_STRATEGY_FIXED=4

--- Incoming ---
['const cv.IMWRITE_PAM_FORMAT_NULL', '0', [], [], None]
ok: CONST IMWRITE_PAM_FORMAT_NULL=0

--- Incoming ---
['const cv.IMWRITE_PAM_FORMAT_BLACKANDWHITE', '1', [], [], None]
ok: CONST IMWRITE_PAM_FORMAT_BLACKANDWHITE=1

--- Incoming ---
['const cv.IMWRITE_PAM_FORMAT_GRAYSCALE', '2', [], [], None]
ok: CONST IMWRITE_PAM_FORMAT_GRAYSCALE=2

--- Incoming ---
['const cv.IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA', '3', [], [], None]
ok: CONST IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA=3

--- Incoming ---
['const cv.IMWRITE_PAM_FORMAT_RGB', '4', [], [], None]
ok: CONST IMWRITE_PAM_FORMAT_RGB=4

--- Incoming ---
['const cv.IMWRITE_PAM_FORMAT_RGB_ALPHA', '5', [], [], None]
ok: CONST IMWRITE_PAM_FORMAT_RGB_ALPHA=5

--- Incoming ---
[   'cv.imread',
    'Mat',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref']],
        ['int', 'flags', 'IMREAD_COLOR', []]],
    'Mat']
ok: FUNC <Mat cv..imread [ARG String filename=, ARG int flags=IMREAD_COLOR]>

--- Incoming ---
[   'cv.imreadmulti',
    'bool',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref']],
        ['vector_Mat', 'mats', '', ['/O', '/Ref']],
        ['int', 'flags', 'IMREAD_ANYCOLOR', []]],
    'bool']
ok: FUNC <bool cv..imreadmulti [ARG String filename=, ARG vector_Mat mats=, ARG int flags=IMREAD_ANYCOLOR]>

--- Incoming ---
[   'cv.imwrite',
    'bool',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref']],
        ['Mat', 'img', '', []],
        ['vector_int', 'params', 'std::vector<int>()', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv..imwrite [ARG String filename=, ARG Mat img=, ARG vector_int params=std::vector<int>()]>

--- Incoming ---
[   'cv.imdecode',
    'Mat',
    [],
    [['Mat', 'buf', '', []], ['int', 'flags', '', []]],
    'Mat']
ok: FUNC <Mat cv..imdecode [ARG Mat buf=, ARG int flags=]>

--- Incoming ---
[   'cv.imencode',
    'bool',
    [],
    [   ['String', 'ext', '', ['/C', '/Ref']],
        ['Mat', 'img', '', []],
        ['vector_uchar', 'buf', '', ['/O', '/Ref']],
        ['vector_int', 'params', 'std::vector<int>()', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv..imencode [ARG String ext=, ARG Mat img=, ARG vector_uchar buf=, ARG vector_int params=std::vector<int>()]>


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/imgcodecs\include\opencv2\imgcodecs\imgcodecs.hpp =====
Namespaces: {'', 'cv'}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/imgcodecs\include\opencv2\imgcodecs\imgcodecs.hpp


===== Generating... =====
CLASS ::.Imgcodecs : 
[CONST CV_LOAD_IMAGE_UNCHANGED=-1, CONST CV_LOAD_IMAGE_GRAYSCALE=0, CONST CV_LOAD_IMAGE_COLOR=1, CONST CV_LOAD_IMAGE_ANYDEPTH=2, CONST CV_LOAD_IMAGE_ANYCOLOR=4, CONST CV_LOAD_IMAGE_IGNORE_ORIENTATION=128, CONST CV_IMWRITE_JPEG_QUALITY=1, CONST CV_IMWRITE_JPEG_PROGRESSIVE=2, CONST CV_IMWRITE_JPEG_OPTIMIZE=3, CONST CV_IMWRITE_JPEG_RST_INTERVAL=4, CONST CV_IMWRITE_JPEG_LUMA_QUALITY=5, CONST CV_IMWRITE_JPEG_CHROMA_QUALITY=6, CONST CV_IMWRITE_PNG_COMPRESSION=16, CONST CV_IMWRITE_PNG_STRATEGY=17, CONST CV_IMWRITE_PNG_BILEVEL=18, CONST CV_IMWRITE_PNG_STRATEGY_DEFAULT=0, CONST CV_IMWRITE_PNG_STRATEGY_FILTERED=1, CONST CV_IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY=2, CONST CV_IMWRITE_PNG_STRATEGY_RLE=3, CONST CV_IMWRITE_PNG_STRATEGY_FIXED=4, CONST CV_IMWRITE_PXM_BINARY=32, CONST CV_IMWRITE_EXR_TYPE=48, CONST CV_IMWRITE_WEBP_QUALITY=64, CONST CV_IMWRITE_PAM_TUPLETYPE=128, CONST CV_IMWRITE_PAM_FORMAT_NULL=0, CONST CV_IMWRITE_PAM_FORMAT_BLACKANDWHITE=1, CONST CV_IMWRITE_PAM_FORMAT_GRAYSCALE=2, CONST CV_IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA=3, CONST CV_IMWRITE_PAM_FORMAT_RGB=4, CONST CV_IMWRITE_PAM_FORMAT_RGB_ALPHA=5, CONST CV_CVTIMG_FLIP=1, CONST CV_CVTIMG_SWAP_RB=2, CONST IMREAD_UNCHANGED=-1, CONST IMREAD_GRAYSCALE=0, CONST IMREAD_COLOR=1, CONST IMREAD_ANYDEPTH=2, CONST IMREAD_ANYCOLOR=4, CONST IMREAD_LOAD_GDAL=8, CONST IMREAD_REDUCED_GRAYSCALE_2=16, CONST IMREAD_REDUCED_COLOR_2=17, CONST IMREAD_REDUCED_GRAYSCALE_4=32, CONST IMREAD_REDUCED_COLOR_4=33, CONST IMREAD_REDUCED_GRAYSCALE_8=64, CONST IMREAD_REDUCED_COLOR_8=65, CONST IMREAD_IGNORE_ORIENTATION=128, CONST IMWRITE_JPEG_QUALITY=1, CONST IMWRITE_JPEG_PROGRESSIVE=2, CONST IMWRITE_JPEG_OPTIMIZE=3, CONST IMWRITE_JPEG_RST_INTERVAL=4, CONST IMWRITE_JPEG_LUMA_QUALITY=5, CONST IMWRITE_JPEG_CHROMA_QUALITY=6, CONST IMWRITE_PNG_COMPRESSION=16, CONST IMWRITE_PNG_STRATEGY=17, CONST IMWRITE_PNG_BILEVEL=18, CONST IMWRITE_PXM_BINARY=32, CONST IMWRITE_EXR_TYPE=(3 << 4) + 0, CONST IMWRITE_WEBP_QUALITY=64, CONST IMWRITE_PAM_TUPLETYPE=128, CONST IMWRITE_TIFF_RESUNIT=256, CONST IMWRITE_TIFF_XDPI=257, CONST IMWRITE_TIFF_YDPI=258, CONST IMWRITE_EXR_TYPE_HALF=1, CONST IMWRITE_EXR_TYPE_FLOAT=2, CONST IMWRITE_PNG_STRATEGY_DEFAULT=0, CONST IMWRITE_PNG_STRATEGY_FILTERED=1, CONST IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY=2, CONST IMWRITE_PNG_STRATEGY_RLE=3, CONST IMWRITE_PNG_STRATEGY_FIXED=4, CONST IMWRITE_PAM_FORMAT_NULL=0, CONST IMWRITE_PAM_FORMAT_BLACKANDWHITE=1, CONST IMWRITE_PAM_FORMAT_GRAYSCALE=2, CONST IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA=3, CONST IMWRITE_PAM_FORMAT_RGB=4, CONST IMWRITE_PAM_FORMAT_RGB_ALPHA=5]
FUNC <Mat cv..imdecode [ARG Mat buf=, ARG int flags=]>
java: Mat imdecode(Mat buf, int flags)
FUNC <Mat cv..imread [ARG String filename=, ARG int flags=IMREAD_COLOR]>
java: Mat imread(String filename, int flags)
java: Mat imread(String filename)
FUNC <bool cv..imencode [ARG String ext=, ARG Mat img=, ARG vector_uchar buf=, ARG vector_int params=std::vector<int>()]>
java: boolean imencode(String ext, Mat img, MatOfByte buf, MatOfInt params)
java: boolean imencode(String ext, Mat img, MatOfByte buf)
FUNC <bool cv..imreadmulti [ARG String filename=, ARG vector_Mat mats=, ARG int flags=IMREAD_ANYCOLOR]>
java: boolean imreadmulti(String filename, List<Mat> mats, int flags)
java: boolean imreadmulti(String filename, List<Mat> mats)
FUNC <bool cv..imwrite [ARG String filename=, ARG Mat img=, ARG vector_int params=std::vector<int>()]>
java: boolean imwrite(String filename, Mat img, MatOfInt params)
java: boolean imwrite(String filename, Mat img)

=== MODULE: videoio (C:/Users/d_dan/Desktop/opencv-master\modules/videoio) ===


Files (4):
['C:/Users/d_dan/Desktop/opencv-master\\modules/videoio\\include\\opencv2\\videoio\\cap_ios.h',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/videoio\\include\\opencv2\\videoio\\videoio_c.h',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/videoio\\include\\opencv2\\videoio.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/videoio\\include\\opencv2\\videoio\\videoio.hpp']

Common headers (0):
[]
ok: class CLASS ::.Videoio : , name: Videoio, base: 


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/videoio\include\opencv2\videoio\cap_ios.h =====
Namespaces: set()
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/videoio\include\opencv2\videoio\cap_ios.h


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/videoio\include\opencv2\videoio\videoio_c.h =====
Namespaces: {''}

--- Incoming ---
['const CV_CAP_ANY', '0', [], [], None]
ok: CONST CV_CAP_ANY=0

--- Incoming ---
['const CV_CAP_MIL', '100', [], [], None]
ok: CONST CV_CAP_MIL=100

--- Incoming ---
['const CV_CAP_VFW', '200', [], [], None]
ok: CONST CV_CAP_VFW=200

--- Incoming ---
['const CV_CAP_V4L', '200', [], [], None]
ok: CONST CV_CAP_V4L=200

--- Incoming ---
['const CV_CAP_V4L2', '200', [], [], None]
ok: CONST CV_CAP_V4L2=200

--- Incoming ---
['const CV_CAP_FIREWARE', '300', [], [], None]
ok: CONST CV_CAP_FIREWARE=300

--- Incoming ---
['const CV_CAP_FIREWIRE', '300', [], [], None]
ok: CONST CV_CAP_FIREWIRE=300

--- Incoming ---
['const CV_CAP_IEEE1394', '300', [], [], None]
ok: CONST CV_CAP_IEEE1394=300

--- Incoming ---
['const CV_CAP_DC1394', '300', [], [], None]
ok: CONST CV_CAP_DC1394=300

--- Incoming ---
['const CV_CAP_CMU1394', '300', [], [], None]
ok: CONST CV_CAP_CMU1394=300

--- Incoming ---
['const CV_CAP_STEREO', '400', [], [], None]
ok: CONST CV_CAP_STEREO=400

--- Incoming ---
['const CV_CAP_TYZX', '400', [], [], None]
ok: CONST CV_CAP_TYZX=400

--- Incoming ---
['const CV_TYZX_LEFT', '400', [], [], None]
ok: CONST CV_TYZX_LEFT=400

--- Incoming ---
['const CV_TYZX_RIGHT', '401', [], [], None]
ok: CONST CV_TYZX_RIGHT=401

--- Incoming ---
['const CV_TYZX_COLOR', '402', [], [], None]
ok: CONST CV_TYZX_COLOR=402

--- Incoming ---
['const CV_TYZX_Z', '403', [], [], None]
ok: CONST CV_TYZX_Z=403

--- Incoming ---
['const CV_CAP_QT', '500', [], [], None]
ok: CONST CV_CAP_QT=500

--- Incoming ---
['const CV_CAP_UNICAP', '600', [], [], None]
ok: CONST CV_CAP_UNICAP=600

--- Incoming ---
['const CV_CAP_DSHOW', '700', [], [], None]
ok: CONST CV_CAP_DSHOW=700

--- Incoming ---
['const CV_CAP_MSMF', '1400', [], [], None]
ok: CONST CV_CAP_MSMF=1400

--- Incoming ---
['const CV_CAP_PVAPI', '800', [], [], None]
ok: CONST CV_CAP_PVAPI=800

--- Incoming ---
['const CV_CAP_OPENNI', '900', [], [], None]
ok: CONST CV_CAP_OPENNI=900

--- Incoming ---
['const CV_CAP_OPENNI_ASUS', '910', [], [], None]
ok: CONST CV_CAP_OPENNI_ASUS=910

--- Incoming ---
['const CV_CAP_ANDROID', '1000', [], [], None]
ok: CONST CV_CAP_ANDROID=1000

--- Incoming ---
['const CV_CAP_ANDROID_BACK', 'CV_CAP_ANDROID+99', [], [], None]
ok: CONST CV_CAP_ANDROID_BACK=CV_CAP_ANDROID+99

--- Incoming ---
['const CV_CAP_ANDROID_FRONT', 'CV_CAP_ANDROID+98', [], [], None]
ok: CONST CV_CAP_ANDROID_FRONT=CV_CAP_ANDROID+98

--- Incoming ---
['const CV_CAP_XIAPI', '1100', [], [], None]
ok: CONST CV_CAP_XIAPI=1100

--- Incoming ---
['const CV_CAP_AVFOUNDATION', '1200', [], [], None]
ok: CONST CV_CAP_AVFOUNDATION=1200

--- Incoming ---
['const CV_CAP_GIGANETIX', '1300', [], [], None]
ok: CONST CV_CAP_GIGANETIX=1300

--- Incoming ---
['const CV_CAP_INTELPERC', '1500', [], [], None]
ok: CONST CV_CAP_INTELPERC=1500

--- Incoming ---
['const CV_CAP_OPENNI2', '1600', [], [], None]
ok: CONST CV_CAP_OPENNI2=1600

--- Incoming ---
['const CV_CAP_GPHOTO2', '1700', [], [], None]
ok: CONST CV_CAP_GPHOTO2=1700

--- Incoming ---
['const CV_CAP_GSTREAMER', '1800', [], [], None]
ok: CONST CV_CAP_GSTREAMER=1800

--- Incoming ---
['const CV_CAP_FFMPEG', '1900', [], [], None]
ok: CONST CV_CAP_FFMPEG=1900

--- Incoming ---
['const CV_CAP_IMAGES', '2000', [], [], None]
ok: CONST CV_CAP_IMAGES=2000

--- Incoming ---
['const CV_CAP_ARAVIS', '2100', [], [], None]
ok: CONST CV_CAP_ARAVIS=2100

--- Incoming ---
['const CV_CAP_PROP_DC1394_OFF', '-4', [], [], None]
ok: CONST CV_CAP_PROP_DC1394_OFF=-4

--- Incoming ---
['const CV_CAP_PROP_DC1394_MODE_MANUAL', '-3', [], [], None]
ok: CONST CV_CAP_PROP_DC1394_MODE_MANUAL=-3

--- Incoming ---
['const CV_CAP_PROP_DC1394_MODE_AUTO', '-2', [], [], None]
ok: CONST CV_CAP_PROP_DC1394_MODE_AUTO=-2

--- Incoming ---
['const CV_CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO', '-1', [], [], None]
ok: CONST CV_CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO=-1

--- Incoming ---
['const CV_CAP_PROP_POS_MSEC', '0', [], [], None]
ok: CONST CV_CAP_PROP_POS_MSEC=0

--- Incoming ---
['const CV_CAP_PROP_POS_FRAMES', '1', [], [], None]
ok: CONST CV_CAP_PROP_POS_FRAMES=1

--- Incoming ---
['const CV_CAP_PROP_POS_AVI_RATIO', '2', [], [], None]
ok: CONST CV_CAP_PROP_POS_AVI_RATIO=2

--- Incoming ---
['const CV_CAP_PROP_FRAME_WIDTH', '3', [], [], None]
ok: CONST CV_CAP_PROP_FRAME_WIDTH=3

--- Incoming ---
['const CV_CAP_PROP_FRAME_HEIGHT', '4', [], [], None]
ok: CONST CV_CAP_PROP_FRAME_HEIGHT=4

--- Incoming ---
['const CV_CAP_PROP_FPS', '5', [], [], None]
ok: CONST CV_CAP_PROP_FPS=5

--- Incoming ---
['const CV_CAP_PROP_FOURCC', '6', [], [], None]
ok: CONST CV_CAP_PROP_FOURCC=6

--- Incoming ---
['const CV_CAP_PROP_FRAME_COUNT', '7', [], [], None]
ok: CONST CV_CAP_PROP_FRAME_COUNT=7

--- Incoming ---
['const CV_CAP_PROP_FORMAT', '8', [], [], None]
ok: CONST CV_CAP_PROP_FORMAT=8

--- Incoming ---
['const CV_CAP_PROP_MODE', '9', [], [], None]
ok: CONST CV_CAP_PROP_MODE=9

--- Incoming ---
['const CV_CAP_PROP_BRIGHTNESS', '10', [], [], None]
ok: CONST CV_CAP_PROP_BRIGHTNESS=10

--- Incoming ---
['const CV_CAP_PROP_CONTRAST', '11', [], [], None]
ok: CONST CV_CAP_PROP_CONTRAST=11

--- Incoming ---
['const CV_CAP_PROP_SATURATION', '12', [], [], None]
ok: CONST CV_CAP_PROP_SATURATION=12

--- Incoming ---
['const CV_CAP_PROP_HUE', '13', [], [], None]
ok: CONST CV_CAP_PROP_HUE=13

--- Incoming ---
['const CV_CAP_PROP_GAIN', '14', [], [], None]
ok: CONST CV_CAP_PROP_GAIN=14

--- Incoming ---
['const CV_CAP_PROP_EXPOSURE', '15', [], [], None]
ok: CONST CV_CAP_PROP_EXPOSURE=15

--- Incoming ---
['const CV_CAP_PROP_CONVERT_RGB', '16', [], [], None]
ok: CONST CV_CAP_PROP_CONVERT_RGB=16

--- Incoming ---
['const CV_CAP_PROP_WHITE_BALANCE_BLUE_U', '17', [], [], None]
ok: CONST CV_CAP_PROP_WHITE_BALANCE_BLUE_U=17

--- Incoming ---
['const CV_CAP_PROP_RECTIFICATION', '18', [], [], None]
ok: CONST CV_CAP_PROP_RECTIFICATION=18

--- Incoming ---
['const CV_CAP_PROP_MONOCHROME', '19', [], [], None]
ok: CONST CV_CAP_PROP_MONOCHROME=19

--- Incoming ---
['const CV_CAP_PROP_SHARPNESS', '20', [], [], None]
ok: CONST CV_CAP_PROP_SHARPNESS=20

--- Incoming ---
['const CV_CAP_PROP_AUTO_EXPOSURE', '21', [], [], None]
ok: CONST CV_CAP_PROP_AUTO_EXPOSURE=21

--- Incoming ---
['const CV_CAP_PROP_GAMMA', '22', [], [], None]
ok: CONST CV_CAP_PROP_GAMMA=22

--- Incoming ---
['const CV_CAP_PROP_TEMPERATURE', '23', [], [], None]
ok: CONST CV_CAP_PROP_TEMPERATURE=23

--- Incoming ---
['const CV_CAP_PROP_TRIGGER', '24', [], [], None]
ok: CONST CV_CAP_PROP_TRIGGER=24

--- Incoming ---
['const CV_CAP_PROP_TRIGGER_DELAY', '25', [], [], None]
ok: CONST CV_CAP_PROP_TRIGGER_DELAY=25

--- Incoming ---
['const CV_CAP_PROP_WHITE_BALANCE_RED_V', '26', [], [], None]
ok: CONST CV_CAP_PROP_WHITE_BALANCE_RED_V=26

--- Incoming ---
['const CV_CAP_PROP_ZOOM', '27', [], [], None]
ok: CONST CV_CAP_PROP_ZOOM=27

--- Incoming ---
['const CV_CAP_PROP_FOCUS', '28', [], [], None]
ok: CONST CV_CAP_PROP_FOCUS=28

--- Incoming ---
['const CV_CAP_PROP_GUID', '29', [], [], None]
ok: CONST CV_CAP_PROP_GUID=29

--- Incoming ---
['const CV_CAP_PROP_ISO_SPEED', '30', [], [], None]
ok: CONST CV_CAP_PROP_ISO_SPEED=30

--- Incoming ---
['const CV_CAP_PROP_MAX_DC1394', '31', [], [], None]
ok: CONST CV_CAP_PROP_MAX_DC1394=31

--- Incoming ---
['const CV_CAP_PROP_BACKLIGHT', '32', [], [], None]
ok: CONST CV_CAP_PROP_BACKLIGHT=32

--- Incoming ---
['const CV_CAP_PROP_PAN', '33', [], [], None]
ok: CONST CV_CAP_PROP_PAN=33

--- Incoming ---
['const CV_CAP_PROP_TILT', '34', [], [], None]
ok: CONST CV_CAP_PROP_TILT=34

--- Incoming ---
['const CV_CAP_PROP_ROLL', '35', [], [], None]
ok: CONST CV_CAP_PROP_ROLL=35

--- Incoming ---
['const CV_CAP_PROP_IRIS', '36', [], [], None]
ok: CONST CV_CAP_PROP_IRIS=36

--- Incoming ---
['const CV_CAP_PROP_SETTINGS', '37', [], [], None]
ok: CONST CV_CAP_PROP_SETTINGS=37

--- Incoming ---
['const CV_CAP_PROP_BUFFERSIZE', '38', [], [], None]
ok: CONST CV_CAP_PROP_BUFFERSIZE=38

--- Incoming ---
['const CV_CAP_PROP_AUTOFOCUS', '39', [], [], None]
ok: CONST CV_CAP_PROP_AUTOFOCUS=39

--- Incoming ---
['const CV_CAP_PROP_SAR_NUM', '40', [], [], None]
ok: CONST CV_CAP_PROP_SAR_NUM=40

--- Incoming ---
['const CV_CAP_PROP_SAR_DEN', '41', [], [], None]
ok: CONST CV_CAP_PROP_SAR_DEN=41

--- Incoming ---
['const CV_CAP_PROP_AUTOGRAB', '1024', [], [], None]
ok: CONST CV_CAP_PROP_AUTOGRAB=1024

--- Incoming ---
['const CV_CAP_PROP_SUPPORTED_PREVIEW_SIZES_STRING', '1025', [], [], None]
ok: CONST CV_CAP_PROP_SUPPORTED_PREVIEW_SIZES_STRING=1025

--- Incoming ---
['const CV_CAP_PROP_PREVIEW_FORMAT', '1026', [], [], None]
ok: CONST CV_CAP_PROP_PREVIEW_FORMAT=1026

--- Incoming ---
['const CV_CAP_OPENNI_DEPTH_GENERATOR', '1 << 31', [], [], None]
ok: CONST CV_CAP_OPENNI_DEPTH_GENERATOR=1 << 31

--- Incoming ---
['const CV_CAP_OPENNI_IMAGE_GENERATOR', '1 << 30', [], [], None]
ok: CONST CV_CAP_OPENNI_IMAGE_GENERATOR=1 << 30

--- Incoming ---
['const CV_CAP_OPENNI_IR_GENERATOR', '1 << 29', [], [], None]
ok: CONST CV_CAP_OPENNI_IR_GENERATOR=1 << 29

--- Incoming ---
[   'const CV_CAP_OPENNI_GENERATORS_MASK',
    'CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_OPENNI_IMAGE_GENERATOR + '
    'CV_CAP_OPENNI_IR_GENERATOR',
    [],
    [],
    None]
ok: CONST CV_CAP_OPENNI_GENERATORS_MASK=CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_OPENNI_IMAGE_GENERATOR + CV_CAP_OPENNI_IR_GENERATOR

--- Incoming ---
['const CV_CAP_PROP_OPENNI_OUTPUT_MODE', '100', [], [], None]
ok: CONST CV_CAP_PROP_OPENNI_OUTPUT_MODE=100

--- Incoming ---
['const CV_CAP_PROP_OPENNI_FRAME_MAX_DEPTH', '101', [], [], None]
ok: CONST CV_CAP_PROP_OPENNI_FRAME_MAX_DEPTH=101

--- Incoming ---
['const CV_CAP_PROP_OPENNI_BASELINE', '102', [], [], None]
ok: CONST CV_CAP_PROP_OPENNI_BASELINE=102

--- Incoming ---
['const CV_CAP_PROP_OPENNI_FOCAL_LENGTH', '103', [], [], None]
ok: CONST CV_CAP_PROP_OPENNI_FOCAL_LENGTH=103

--- Incoming ---
['const CV_CAP_PROP_OPENNI_REGISTRATION', '104', [], [], None]
ok: CONST CV_CAP_PROP_OPENNI_REGISTRATION=104

--- Incoming ---
[   'const CV_CAP_PROP_OPENNI_REGISTRATION_ON',
    'CV_CAP_PROP_OPENNI_REGISTRATION',
    [],
    [],
    None]
ok: CONST CV_CAP_PROP_OPENNI_REGISTRATION_ON=CV_CAP_PROP_OPENNI_REGISTRATION

--- Incoming ---
['const CV_CAP_PROP_OPENNI_APPROX_FRAME_SYNC', '105', [], [], None]
ok: CONST CV_CAP_PROP_OPENNI_APPROX_FRAME_SYNC=105

--- Incoming ---
['const CV_CAP_PROP_OPENNI_MAX_BUFFER_SIZE', '106', [], [], None]
ok: CONST CV_CAP_PROP_OPENNI_MAX_BUFFER_SIZE=106

--- Incoming ---
['const CV_CAP_PROP_OPENNI_CIRCLE_BUFFER', '107', [], [], None]
ok: CONST CV_CAP_PROP_OPENNI_CIRCLE_BUFFER=107

--- Incoming ---
['const CV_CAP_PROP_OPENNI_MAX_TIME_DURATION', '108', [], [], None]
ok: CONST CV_CAP_PROP_OPENNI_MAX_TIME_DURATION=108

--- Incoming ---
['const CV_CAP_PROP_OPENNI_GENERATOR_PRESENT', '109', [], [], None]
ok: CONST CV_CAP_PROP_OPENNI_GENERATOR_PRESENT=109

--- Incoming ---
['const CV_CAP_PROP_OPENNI2_SYNC', '110', [], [], None]
ok: CONST CV_CAP_PROP_OPENNI2_SYNC=110

--- Incoming ---
['const CV_CAP_PROP_OPENNI2_MIRROR', '111', [], [], None]
ok: CONST CV_CAP_PROP_OPENNI2_MIRROR=111

--- Incoming ---
[   'const CV_CAP_OPENNI_IMAGE_GENERATOR_PRESENT',
    'CV_CAP_OPENNI_IMAGE_GENERATOR + CV_CAP_PROP_OPENNI_GENERATOR_PRESENT',
    [],
    [],
    None]
ok: CONST CV_CAP_OPENNI_IMAGE_GENERATOR_PRESENT=CV_CAP_OPENNI_IMAGE_GENERATOR + CV_CAP_PROP_OPENNI_GENERATOR_PRESENT

--- Incoming ---
[   'const CV_CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE',
    'CV_CAP_OPENNI_IMAGE_GENERATOR + CV_CAP_PROP_OPENNI_OUTPUT_MODE',
    [],
    [],
    None]
ok: CONST CV_CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE=CV_CAP_OPENNI_IMAGE_GENERATOR + CV_CAP_PROP_OPENNI_OUTPUT_MODE

--- Incoming ---
[   'const CV_CAP_OPENNI_DEPTH_GENERATOR_PRESENT',
    'CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_GENERATOR_PRESENT',
    [],
    [],
    None]
ok: CONST CV_CAP_OPENNI_DEPTH_GENERATOR_PRESENT=CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_GENERATOR_PRESENT

--- Incoming ---
[   'const CV_CAP_OPENNI_DEPTH_GENERATOR_BASELINE',
    'CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_BASELINE',
    [],
    [],
    None]
ok: CONST CV_CAP_OPENNI_DEPTH_GENERATOR_BASELINE=CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_BASELINE

--- Incoming ---
[   'const CV_CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH',
    'CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_FOCAL_LENGTH',
    [],
    [],
    None]
ok: CONST CV_CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH=CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_FOCAL_LENGTH

--- Incoming ---
[   'const CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION',
    'CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_REGISTRATION',
    [],
    [],
    None]
ok: CONST CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION=CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_REGISTRATION

--- Incoming ---
[   'const CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON',
    'CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION',
    [],
    [],
    None]
ok: CONST CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON=CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION

--- Incoming ---
[   'const CV_CAP_OPENNI_IR_GENERATOR_PRESENT',
    'CV_CAP_OPENNI_IR_GENERATOR + CV_CAP_PROP_OPENNI_GENERATOR_PRESENT',
    [],
    [],
    None]
ok: CONST CV_CAP_OPENNI_IR_GENERATOR_PRESENT=CV_CAP_OPENNI_IR_GENERATOR + CV_CAP_PROP_OPENNI_GENERATOR_PRESENT

--- Incoming ---
['const CV_CAP_GSTREAMER_QUEUE_LENGTH', '200', [], [], None]
ok: CONST CV_CAP_GSTREAMER_QUEUE_LENGTH=200

--- Incoming ---
['const CV_CAP_PROP_PVAPI_MULTICASTIP', '300', [], [], None]
ok: CONST CV_CAP_PROP_PVAPI_MULTICASTIP=300

--- Incoming ---
['const CV_CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE', '301', [], [], None]
ok: CONST CV_CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE=301

--- Incoming ---
['const CV_CAP_PROP_PVAPI_DECIMATIONHORIZONTAL', '302', [], [], None]
ok: CONST CV_CAP_PROP_PVAPI_DECIMATIONHORIZONTAL=302

--- Incoming ---
['const CV_CAP_PROP_PVAPI_DECIMATIONVERTICAL', '303', [], [], None]
ok: CONST CV_CAP_PROP_PVAPI_DECIMATIONVERTICAL=303

--- Incoming ---
['const CV_CAP_PROP_PVAPI_BINNINGX', '304', [], [], None]
ok: CONST CV_CAP_PROP_PVAPI_BINNINGX=304

--- Incoming ---
['const CV_CAP_PROP_PVAPI_BINNINGY', '305', [], [], None]
ok: CONST CV_CAP_PROP_PVAPI_BINNINGY=305

--- Incoming ---
['const CV_CAP_PROP_PVAPI_PIXELFORMAT', '306', [], [], None]
ok: CONST CV_CAP_PROP_PVAPI_PIXELFORMAT=306

--- Incoming ---
['const CV_CAP_PROP_XI_DOWNSAMPLING', '400', [], [], None]
ok: CONST CV_CAP_PROP_XI_DOWNSAMPLING=400

--- Incoming ---
['const CV_CAP_PROP_XI_DATA_FORMAT', '401', [], [], None]
ok: CONST CV_CAP_PROP_XI_DATA_FORMAT=401

--- Incoming ---
['const CV_CAP_PROP_XI_OFFSET_X', '402', [], [], None]
ok: CONST CV_CAP_PROP_XI_OFFSET_X=402

--- Incoming ---
['const CV_CAP_PROP_XI_OFFSET_Y', '403', [], [], None]
ok: CONST CV_CAP_PROP_XI_OFFSET_Y=403

--- Incoming ---
['const CV_CAP_PROP_XI_TRG_SOURCE', '404', [], [], None]
ok: CONST CV_CAP_PROP_XI_TRG_SOURCE=404

--- Incoming ---
['const CV_CAP_PROP_XI_TRG_SOFTWARE', '405', [], [], None]
ok: CONST CV_CAP_PROP_XI_TRG_SOFTWARE=405

--- Incoming ---
['const CV_CAP_PROP_XI_GPI_SELECTOR', '406', [], [], None]
ok: CONST CV_CAP_PROP_XI_GPI_SELECTOR=406

--- Incoming ---
['const CV_CAP_PROP_XI_GPI_MODE', '407', [], [], None]
ok: CONST CV_CAP_PROP_XI_GPI_MODE=407

--- Incoming ---
['const CV_CAP_PROP_XI_GPI_LEVEL', '408', [], [], None]
ok: CONST CV_CAP_PROP_XI_GPI_LEVEL=408

--- Incoming ---
['const CV_CAP_PROP_XI_GPO_SELECTOR', '409', [], [], None]
ok: CONST CV_CAP_PROP_XI_GPO_SELECTOR=409

--- Incoming ---
['const CV_CAP_PROP_XI_GPO_MODE', '410', [], [], None]
ok: CONST CV_CAP_PROP_XI_GPO_MODE=410

--- Incoming ---
['const CV_CAP_PROP_XI_LED_SELECTOR', '411', [], [], None]
ok: CONST CV_CAP_PROP_XI_LED_SELECTOR=411

--- Incoming ---
['const CV_CAP_PROP_XI_LED_MODE', '412', [], [], None]
ok: CONST CV_CAP_PROP_XI_LED_MODE=412

--- Incoming ---
['const CV_CAP_PROP_XI_MANUAL_WB', '413', [], [], None]
ok: CONST CV_CAP_PROP_XI_MANUAL_WB=413

--- Incoming ---
['const CV_CAP_PROP_XI_AUTO_WB', '414', [], [], None]
ok: CONST CV_CAP_PROP_XI_AUTO_WB=414

--- Incoming ---
['const CV_CAP_PROP_XI_AEAG', '415', [], [], None]
ok: CONST CV_CAP_PROP_XI_AEAG=415

--- Incoming ---
['const CV_CAP_PROP_XI_EXP_PRIORITY', '416', [], [], None]
ok: CONST CV_CAP_PROP_XI_EXP_PRIORITY=416

--- Incoming ---
['const CV_CAP_PROP_XI_AE_MAX_LIMIT', '417', [], [], None]
ok: CONST CV_CAP_PROP_XI_AE_MAX_LIMIT=417

--- Incoming ---
['const CV_CAP_PROP_XI_AG_MAX_LIMIT', '418', [], [], None]
ok: CONST CV_CAP_PROP_XI_AG_MAX_LIMIT=418

--- Incoming ---
['const CV_CAP_PROP_XI_AEAG_LEVEL', '419', [], [], None]
ok: CONST CV_CAP_PROP_XI_AEAG_LEVEL=419

--- Incoming ---
['const CV_CAP_PROP_XI_TIMEOUT', '420', [], [], None]
ok: CONST CV_CAP_PROP_XI_TIMEOUT=420

--- Incoming ---
['const CV_CAP_PROP_XI_EXPOSURE', '421', [], [], None]
ok: CONST CV_CAP_PROP_XI_EXPOSURE=421

--- Incoming ---
['const CV_CAP_PROP_XI_EXPOSURE_BURST_COUNT', '422', [], [], None]
ok: CONST CV_CAP_PROP_XI_EXPOSURE_BURST_COUNT=422

--- Incoming ---
['const CV_CAP_PROP_XI_GAIN_SELECTOR', '423', [], [], None]
ok: CONST CV_CAP_PROP_XI_GAIN_SELECTOR=423

--- Incoming ---
['const CV_CAP_PROP_XI_GAIN', '424', [], [], None]
ok: CONST CV_CAP_PROP_XI_GAIN=424

--- Incoming ---
['const CV_CAP_PROP_XI_DOWNSAMPLING_TYPE', '426', [], [], None]
ok: CONST CV_CAP_PROP_XI_DOWNSAMPLING_TYPE=426

--- Incoming ---
['const CV_CAP_PROP_XI_BINNING_SELECTOR', '427', [], [], None]
ok: CONST CV_CAP_PROP_XI_BINNING_SELECTOR=427

--- Incoming ---
['const CV_CAP_PROP_XI_BINNING_VERTICAL', '428', [], [], None]
ok: CONST CV_CAP_PROP_XI_BINNING_VERTICAL=428

--- Incoming ---
['const CV_CAP_PROP_XI_BINNING_HORIZONTAL', '429', [], [], None]
ok: CONST CV_CAP_PROP_XI_BINNING_HORIZONTAL=429

--- Incoming ---
['const CV_CAP_PROP_XI_BINNING_PATTERN', '430', [], [], None]
ok: CONST CV_CAP_PROP_XI_BINNING_PATTERN=430

--- Incoming ---
['const CV_CAP_PROP_XI_DECIMATION_SELECTOR', '431', [], [], None]
ok: CONST CV_CAP_PROP_XI_DECIMATION_SELECTOR=431

--- Incoming ---
['const CV_CAP_PROP_XI_DECIMATION_VERTICAL', '432', [], [], None]
ok: CONST CV_CAP_PROP_XI_DECIMATION_VERTICAL=432

--- Incoming ---
['const CV_CAP_PROP_XI_DECIMATION_HORIZONTAL', '433', [], [], None]
ok: CONST CV_CAP_PROP_XI_DECIMATION_HORIZONTAL=433

--- Incoming ---
['const CV_CAP_PROP_XI_DECIMATION_PATTERN', '434', [], [], None]
ok: CONST CV_CAP_PROP_XI_DECIMATION_PATTERN=434

--- Incoming ---
['const CV_CAP_PROP_XI_TEST_PATTERN_GENERATOR_SELECTOR', '587', [], [], None]
ok: CONST CV_CAP_PROP_XI_TEST_PATTERN_GENERATOR_SELECTOR=587

--- Incoming ---
['const CV_CAP_PROP_XI_TEST_PATTERN', '588', [], [], None]
ok: CONST CV_CAP_PROP_XI_TEST_PATTERN=588

--- Incoming ---
['const CV_CAP_PROP_XI_IMAGE_DATA_FORMAT', '435', [], [], None]
ok: CONST CV_CAP_PROP_XI_IMAGE_DATA_FORMAT=435

--- Incoming ---
['const CV_CAP_PROP_XI_SHUTTER_TYPE', '436', [], [], None]
ok: CONST CV_CAP_PROP_XI_SHUTTER_TYPE=436

--- Incoming ---
['const CV_CAP_PROP_XI_SENSOR_TAPS', '437', [], [], None]
ok: CONST CV_CAP_PROP_XI_SENSOR_TAPS=437

--- Incoming ---
['const CV_CAP_PROP_XI_AEAG_ROI_OFFSET_X', '439', [], [], None]
ok: CONST CV_CAP_PROP_XI_AEAG_ROI_OFFSET_X=439

--- Incoming ---
['const CV_CAP_PROP_XI_AEAG_ROI_OFFSET_Y', '440', [], [], None]
ok: CONST CV_CAP_PROP_XI_AEAG_ROI_OFFSET_Y=440

--- Incoming ---
['const CV_CAP_PROP_XI_AEAG_ROI_WIDTH', '441', [], [], None]
ok: CONST CV_CAP_PROP_XI_AEAG_ROI_WIDTH=441

--- Incoming ---
['const CV_CAP_PROP_XI_AEAG_ROI_HEIGHT', '442', [], [], None]
ok: CONST CV_CAP_PROP_XI_AEAG_ROI_HEIGHT=442

--- Incoming ---
['const CV_CAP_PROP_XI_BPC', '445', [], [], None]
ok: CONST CV_CAP_PROP_XI_BPC=445

--- Incoming ---
['const CV_CAP_PROP_XI_WB_KR', '448', [], [], None]
ok: CONST CV_CAP_PROP_XI_WB_KR=448

--- Incoming ---
['const CV_CAP_PROP_XI_WB_KG', '449', [], [], None]
ok: CONST CV_CAP_PROP_XI_WB_KG=449

--- Incoming ---
['const CV_CAP_PROP_XI_WB_KB', '450', [], [], None]
ok: CONST CV_CAP_PROP_XI_WB_KB=450

--- Incoming ---
['const CV_CAP_PROP_XI_WIDTH', '451', [], [], None]
ok: CONST CV_CAP_PROP_XI_WIDTH=451

--- Incoming ---
['const CV_CAP_PROP_XI_HEIGHT', '452', [], [], None]
ok: CONST CV_CAP_PROP_XI_HEIGHT=452

--- Incoming ---
['const CV_CAP_PROP_XI_REGION_SELECTOR', '589', [], [], None]
ok: CONST CV_CAP_PROP_XI_REGION_SELECTOR=589

--- Incoming ---
['const CV_CAP_PROP_XI_REGION_MODE', '595', [], [], None]
ok: CONST CV_CAP_PROP_XI_REGION_MODE=595

--- Incoming ---
['const CV_CAP_PROP_XI_LIMIT_BANDWIDTH', '459', [], [], None]
ok: CONST CV_CAP_PROP_XI_LIMIT_BANDWIDTH=459

--- Incoming ---
['const CV_CAP_PROP_XI_SENSOR_DATA_BIT_DEPTH', '460', [], [], None]
ok: CONST CV_CAP_PROP_XI_SENSOR_DATA_BIT_DEPTH=460

--- Incoming ---
['const CV_CAP_PROP_XI_OUTPUT_DATA_BIT_DEPTH', '461', [], [], None]
ok: CONST CV_CAP_PROP_XI_OUTPUT_DATA_BIT_DEPTH=461

--- Incoming ---
['const CV_CAP_PROP_XI_IMAGE_DATA_BIT_DEPTH', '462', [], [], None]
ok: CONST CV_CAP_PROP_XI_IMAGE_DATA_BIT_DEPTH=462

--- Incoming ---
['const CV_CAP_PROP_XI_OUTPUT_DATA_PACKING', '463', [], [], None]
ok: CONST CV_CAP_PROP_XI_OUTPUT_DATA_PACKING=463

--- Incoming ---
['const CV_CAP_PROP_XI_OUTPUT_DATA_PACKING_TYPE', '464', [], [], None]
ok: CONST CV_CAP_PROP_XI_OUTPUT_DATA_PACKING_TYPE=464

--- Incoming ---
['const CV_CAP_PROP_XI_IS_COOLED', '465', [], [], None]
ok: CONST CV_CAP_PROP_XI_IS_COOLED=465

--- Incoming ---
['const CV_CAP_PROP_XI_COOLING', '466', [], [], None]
ok: CONST CV_CAP_PROP_XI_COOLING=466

--- Incoming ---
['const CV_CAP_PROP_XI_TARGET_TEMP', '467', [], [], None]
ok: CONST CV_CAP_PROP_XI_TARGET_TEMP=467

--- Incoming ---
['const CV_CAP_PROP_XI_CHIP_TEMP', '468', [], [], None]
ok: CONST CV_CAP_PROP_XI_CHIP_TEMP=468

--- Incoming ---
['const CV_CAP_PROP_XI_HOUS_TEMP', '469', [], [], None]
ok: CONST CV_CAP_PROP_XI_HOUS_TEMP=469

--- Incoming ---
['const CV_CAP_PROP_XI_HOUS_BACK_SIDE_TEMP', '590', [], [], None]
ok: CONST CV_CAP_PROP_XI_HOUS_BACK_SIDE_TEMP=590

--- Incoming ---
['const CV_CAP_PROP_XI_SENSOR_BOARD_TEMP', '596', [], [], None]
ok: CONST CV_CAP_PROP_XI_SENSOR_BOARD_TEMP=596

--- Incoming ---
['const CV_CAP_PROP_XI_CMS', '470', [], [], None]
ok: CONST CV_CAP_PROP_XI_CMS=470

--- Incoming ---
['const CV_CAP_PROP_XI_APPLY_CMS', '471', [], [], None]
ok: CONST CV_CAP_PROP_XI_APPLY_CMS=471

--- Incoming ---
['const CV_CAP_PROP_XI_IMAGE_IS_COLOR', '474', [], [], None]
ok: CONST CV_CAP_PROP_XI_IMAGE_IS_COLOR=474

--- Incoming ---
['const CV_CAP_PROP_XI_COLOR_FILTER_ARRAY', '475', [], [], None]
ok: CONST CV_CAP_PROP_XI_COLOR_FILTER_ARRAY=475

--- Incoming ---
['const CV_CAP_PROP_XI_GAMMAY', '476', [], [], None]
ok: CONST CV_CAP_PROP_XI_GAMMAY=476

--- Incoming ---
['const CV_CAP_PROP_XI_GAMMAC', '477', [], [], None]
ok: CONST CV_CAP_PROP_XI_GAMMAC=477

--- Incoming ---
['const CV_CAP_PROP_XI_SHARPNESS', '478', [], [], None]
ok: CONST CV_CAP_PROP_XI_SHARPNESS=478

--- Incoming ---
['const CV_CAP_PROP_XI_CC_MATRIX_00', '479', [], [], None]
ok: CONST CV_CAP_PROP_XI_CC_MATRIX_00=479

--- Incoming ---
['const CV_CAP_PROP_XI_CC_MATRIX_01', '480', [], [], None]
ok: CONST CV_CAP_PROP_XI_CC_MATRIX_01=480

--- Incoming ---
['const CV_CAP_PROP_XI_CC_MATRIX_02', '481', [], [], None]
ok: CONST CV_CAP_PROP_XI_CC_MATRIX_02=481

--- Incoming ---
['const CV_CAP_PROP_XI_CC_MATRIX_03', '482', [], [], None]
ok: CONST CV_CAP_PROP_XI_CC_MATRIX_03=482

--- Incoming ---
['const CV_CAP_PROP_XI_CC_MATRIX_10', '483', [], [], None]
ok: CONST CV_CAP_PROP_XI_CC_MATRIX_10=483

--- Incoming ---
['const CV_CAP_PROP_XI_CC_MATRIX_11', '484', [], [], None]
ok: CONST CV_CAP_PROP_XI_CC_MATRIX_11=484

--- Incoming ---
['const CV_CAP_PROP_XI_CC_MATRIX_12', '485', [], [], None]
ok: CONST CV_CAP_PROP_XI_CC_MATRIX_12=485

--- Incoming ---
['const CV_CAP_PROP_XI_CC_MATRIX_13', '486', [], [], None]
ok: CONST CV_CAP_PROP_XI_CC_MATRIX_13=486

--- Incoming ---
['const CV_CAP_PROP_XI_CC_MATRIX_20', '487', [], [], None]
ok: CONST CV_CAP_PROP_XI_CC_MATRIX_20=487

--- Incoming ---
['const CV_CAP_PROP_XI_CC_MATRIX_21', '488', [], [], None]
ok: CONST CV_CAP_PROP_XI_CC_MATRIX_21=488

--- Incoming ---
['const CV_CAP_PROP_XI_CC_MATRIX_22', '489', [], [], None]
ok: CONST CV_CAP_PROP_XI_CC_MATRIX_22=489

--- Incoming ---
['const CV_CAP_PROP_XI_CC_MATRIX_23', '490', [], [], None]
ok: CONST CV_CAP_PROP_XI_CC_MATRIX_23=490

--- Incoming ---
['const CV_CAP_PROP_XI_CC_MATRIX_30', '491', [], [], None]
ok: CONST CV_CAP_PROP_XI_CC_MATRIX_30=491

--- Incoming ---
['const CV_CAP_PROP_XI_CC_MATRIX_31', '492', [], [], None]
ok: CONST CV_CAP_PROP_XI_CC_MATRIX_31=492

--- Incoming ---
['const CV_CAP_PROP_XI_CC_MATRIX_32', '493', [], [], None]
ok: CONST CV_CAP_PROP_XI_CC_MATRIX_32=493

--- Incoming ---
['const CV_CAP_PROP_XI_CC_MATRIX_33', '494', [], [], None]
ok: CONST CV_CAP_PROP_XI_CC_MATRIX_33=494

--- Incoming ---
['const CV_CAP_PROP_XI_DEFAULT_CC_MATRIX', '495', [], [], None]
ok: CONST CV_CAP_PROP_XI_DEFAULT_CC_MATRIX=495

--- Incoming ---
['const CV_CAP_PROP_XI_TRG_SELECTOR', '498', [], [], None]
ok: CONST CV_CAP_PROP_XI_TRG_SELECTOR=498

--- Incoming ---
['const CV_CAP_PROP_XI_ACQ_FRAME_BURST_COUNT', '499', [], [], None]
ok: CONST CV_CAP_PROP_XI_ACQ_FRAME_BURST_COUNT=499

--- Incoming ---
['const CV_CAP_PROP_XI_DEBOUNCE_EN', '507', [], [], None]
ok: CONST CV_CAP_PROP_XI_DEBOUNCE_EN=507

--- Incoming ---
['const CV_CAP_PROP_XI_DEBOUNCE_T0', '508', [], [], None]
ok: CONST CV_CAP_PROP_XI_DEBOUNCE_T0=508

--- Incoming ---
['const CV_CAP_PROP_XI_DEBOUNCE_T1', '509', [], [], None]
ok: CONST CV_CAP_PROP_XI_DEBOUNCE_T1=509

--- Incoming ---
['const CV_CAP_PROP_XI_DEBOUNCE_POL', '510', [], [], None]
ok: CONST CV_CAP_PROP_XI_DEBOUNCE_POL=510

--- Incoming ---
['const CV_CAP_PROP_XI_LENS_MODE', '511', [], [], None]
ok: CONST CV_CAP_PROP_XI_LENS_MODE=511

--- Incoming ---
['const CV_CAP_PROP_XI_LENS_APERTURE_VALUE', '512', [], [], None]
ok: CONST CV_CAP_PROP_XI_LENS_APERTURE_VALUE=512

--- Incoming ---
['const CV_CAP_PROP_XI_LENS_FOCUS_MOVEMENT_VALUE', '513', [], [], None]
ok: CONST CV_CAP_PROP_XI_LENS_FOCUS_MOVEMENT_VALUE=513

--- Incoming ---
['const CV_CAP_PROP_XI_LENS_FOCUS_MOVE', '514', [], [], None]
ok: CONST CV_CAP_PROP_XI_LENS_FOCUS_MOVE=514

--- Incoming ---
['const CV_CAP_PROP_XI_LENS_FOCUS_DISTANCE', '515', [], [], None]
ok: CONST CV_CAP_PROP_XI_LENS_FOCUS_DISTANCE=515

--- Incoming ---
['const CV_CAP_PROP_XI_LENS_FOCAL_LENGTH', '516', [], [], None]
ok: CONST CV_CAP_PROP_XI_LENS_FOCAL_LENGTH=516

--- Incoming ---
['const CV_CAP_PROP_XI_LENS_FEATURE_SELECTOR', '517', [], [], None]
ok: CONST CV_CAP_PROP_XI_LENS_FEATURE_SELECTOR=517

--- Incoming ---
['const CV_CAP_PROP_XI_LENS_FEATURE', '518', [], [], None]
ok: CONST CV_CAP_PROP_XI_LENS_FEATURE=518

--- Incoming ---
['const CV_CAP_PROP_XI_DEVICE_MODEL_ID', '521', [], [], None]
ok: CONST CV_CAP_PROP_XI_DEVICE_MODEL_ID=521

--- Incoming ---
['const CV_CAP_PROP_XI_DEVICE_SN', '522', [], [], None]
ok: CONST CV_CAP_PROP_XI_DEVICE_SN=522

--- Incoming ---
['const CV_CAP_PROP_XI_IMAGE_DATA_FORMAT_RGB32_ALPHA', '529', [], [], None]
ok: CONST CV_CAP_PROP_XI_IMAGE_DATA_FORMAT_RGB32_ALPHA=529

--- Incoming ---
['const CV_CAP_PROP_XI_IMAGE_PAYLOAD_SIZE', '530', [], [], None]
ok: CONST CV_CAP_PROP_XI_IMAGE_PAYLOAD_SIZE=530

--- Incoming ---
['const CV_CAP_PROP_XI_TRANSPORT_PIXEL_FORMAT', '531', [], [], None]
ok: CONST CV_CAP_PROP_XI_TRANSPORT_PIXEL_FORMAT=531

--- Incoming ---
['const CV_CAP_PROP_XI_SENSOR_CLOCK_FREQ_HZ', '532', [], [], None]
ok: CONST CV_CAP_PROP_XI_SENSOR_CLOCK_FREQ_HZ=532

--- Incoming ---
['const CV_CAP_PROP_XI_SENSOR_CLOCK_FREQ_INDEX', '533', [], [], None]
ok: CONST CV_CAP_PROP_XI_SENSOR_CLOCK_FREQ_INDEX=533

--- Incoming ---
['const CV_CAP_PROP_XI_SENSOR_OUTPUT_CHANNEL_COUNT', '534', [], [], None]
ok: CONST CV_CAP_PROP_XI_SENSOR_OUTPUT_CHANNEL_COUNT=534

--- Incoming ---
['const CV_CAP_PROP_XI_FRAMERATE', '535', [], [], None]
ok: CONST CV_CAP_PROP_XI_FRAMERATE=535

--- Incoming ---
['const CV_CAP_PROP_XI_COUNTER_SELECTOR', '536', [], [], None]
ok: CONST CV_CAP_PROP_XI_COUNTER_SELECTOR=536

--- Incoming ---
['const CV_CAP_PROP_XI_COUNTER_VALUE', '537', [], [], None]
ok: CONST CV_CAP_PROP_XI_COUNTER_VALUE=537

--- Incoming ---
['const CV_CAP_PROP_XI_ACQ_TIMING_MODE', '538', [], [], None]
ok: CONST CV_CAP_PROP_XI_ACQ_TIMING_MODE=538

--- Incoming ---
['const CV_CAP_PROP_XI_AVAILABLE_BANDWIDTH', '539', [], [], None]
ok: CONST CV_CAP_PROP_XI_AVAILABLE_BANDWIDTH=539

--- Incoming ---
['const CV_CAP_PROP_XI_BUFFER_POLICY', '540', [], [], None]
ok: CONST CV_CAP_PROP_XI_BUFFER_POLICY=540

--- Incoming ---
['const CV_CAP_PROP_XI_LUT_EN', '541', [], [], None]
ok: CONST CV_CAP_PROP_XI_LUT_EN=541

--- Incoming ---
['const CV_CAP_PROP_XI_LUT_INDEX', '542', [], [], None]
ok: CONST CV_CAP_PROP_XI_LUT_INDEX=542

--- Incoming ---
['const CV_CAP_PROP_XI_LUT_VALUE', '543', [], [], None]
ok: CONST CV_CAP_PROP_XI_LUT_VALUE=543

--- Incoming ---
['const CV_CAP_PROP_XI_TRG_DELAY', '544', [], [], None]
ok: CONST CV_CAP_PROP_XI_TRG_DELAY=544

--- Incoming ---
['const CV_CAP_PROP_XI_TS_RST_MODE', '545', [], [], None]
ok: CONST CV_CAP_PROP_XI_TS_RST_MODE=545

--- Incoming ---
['const CV_CAP_PROP_XI_TS_RST_SOURCE', '546', [], [], None]
ok: CONST CV_CAP_PROP_XI_TS_RST_SOURCE=546

--- Incoming ---
['const CV_CAP_PROP_XI_IS_DEVICE_EXIST', '547', [], [], None]
ok: CONST CV_CAP_PROP_XI_IS_DEVICE_EXIST=547

--- Incoming ---
['const CV_CAP_PROP_XI_ACQ_BUFFER_SIZE', '548', [], [], None]
ok: CONST CV_CAP_PROP_XI_ACQ_BUFFER_SIZE=548

--- Incoming ---
['const CV_CAP_PROP_XI_ACQ_BUFFER_SIZE_UNIT', '549', [], [], None]
ok: CONST CV_CAP_PROP_XI_ACQ_BUFFER_SIZE_UNIT=549

--- Incoming ---
['const CV_CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_SIZE', '550', [], [], None]
ok: CONST CV_CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_SIZE=550

--- Incoming ---
['const CV_CAP_PROP_XI_BUFFERS_QUEUE_SIZE', '551', [], [], None]
ok: CONST CV_CAP_PROP_XI_BUFFERS_QUEUE_SIZE=551

--- Incoming ---
['const CV_CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_COMMIT', '552', [], [], None]
ok: CONST CV_CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_COMMIT=552

--- Incoming ---
['const CV_CAP_PROP_XI_RECENT_FRAME', '553', [], [], None]
ok: CONST CV_CAP_PROP_XI_RECENT_FRAME=553

--- Incoming ---
['const CV_CAP_PROP_XI_DEVICE_RESET', '554', [], [], None]
ok: CONST CV_CAP_PROP_XI_DEVICE_RESET=554

--- Incoming ---
['const CV_CAP_PROP_XI_COLUMN_FPN_CORRECTION', '555', [], [], None]
ok: CONST CV_CAP_PROP_XI_COLUMN_FPN_CORRECTION=555

--- Incoming ---
['const CV_CAP_PROP_XI_ROW_FPN_CORRECTION', '591', [], [], None]
ok: CONST CV_CAP_PROP_XI_ROW_FPN_CORRECTION=591

--- Incoming ---
['const CV_CAP_PROP_XI_SENSOR_MODE', '558', [], [], None]
ok: CONST CV_CAP_PROP_XI_SENSOR_MODE=558

--- Incoming ---
['const CV_CAP_PROP_XI_HDR', '559', [], [], None]
ok: CONST CV_CAP_PROP_XI_HDR=559

--- Incoming ---
['const CV_CAP_PROP_XI_HDR_KNEEPOINT_COUNT', '560', [], [], None]
ok: CONST CV_CAP_PROP_XI_HDR_KNEEPOINT_COUNT=560

--- Incoming ---
['const CV_CAP_PROP_XI_HDR_T1', '561', [], [], None]
ok: CONST CV_CAP_PROP_XI_HDR_T1=561

--- Incoming ---
['const CV_CAP_PROP_XI_HDR_T2', '562', [], [], None]
ok: CONST CV_CAP_PROP_XI_HDR_T2=562

--- Incoming ---
['const CV_CAP_PROP_XI_KNEEPOINT1', '563', [], [], None]
ok: CONST CV_CAP_PROP_XI_KNEEPOINT1=563

--- Incoming ---
['const CV_CAP_PROP_XI_KNEEPOINT2', '564', [], [], None]
ok: CONST CV_CAP_PROP_XI_KNEEPOINT2=564

--- Incoming ---
['const CV_CAP_PROP_XI_IMAGE_BLACK_LEVEL', '565', [], [], None]
ok: CONST CV_CAP_PROP_XI_IMAGE_BLACK_LEVEL=565

--- Incoming ---
['const CV_CAP_PROP_XI_HW_REVISION', '571', [], [], None]
ok: CONST CV_CAP_PROP_XI_HW_REVISION=571

--- Incoming ---
['const CV_CAP_PROP_XI_DEBUG_LEVEL', '572', [], [], None]
ok: CONST CV_CAP_PROP_XI_DEBUG_LEVEL=572

--- Incoming ---
['const CV_CAP_PROP_XI_AUTO_BANDWIDTH_CALCULATION', '573', [], [], None]
ok: CONST CV_CAP_PROP_XI_AUTO_BANDWIDTH_CALCULATION=573

--- Incoming ---
['const CV_CAP_PROP_XI_FFS_FILE_ID', '594', [], [], None]
ok: CONST CV_CAP_PROP_XI_FFS_FILE_ID=594

--- Incoming ---
['const CV_CAP_PROP_XI_FFS_FILE_SIZE', '580', [], [], None]
ok: CONST CV_CAP_PROP_XI_FFS_FILE_SIZE=580

--- Incoming ---
['const CV_CAP_PROP_XI_FREE_FFS_SIZE', '581', [], [], None]
ok: CONST CV_CAP_PROP_XI_FREE_FFS_SIZE=581

--- Incoming ---
['const CV_CAP_PROP_XI_USED_FFS_SIZE', '582', [], [], None]
ok: CONST CV_CAP_PROP_XI_USED_FFS_SIZE=582

--- Incoming ---
['const CV_CAP_PROP_XI_FFS_ACCESS_KEY', '583', [], [], None]
ok: CONST CV_CAP_PROP_XI_FFS_ACCESS_KEY=583

--- Incoming ---
['const CV_CAP_PROP_XI_SENSOR_FEATURE_SELECTOR', '585', [], [], None]
ok: CONST CV_CAP_PROP_XI_SENSOR_FEATURE_SELECTOR=585

--- Incoming ---
['const CV_CAP_PROP_XI_SENSOR_FEATURE_VALUE', '586', [], [], None]
ok: CONST CV_CAP_PROP_XI_SENSOR_FEATURE_VALUE=586

--- Incoming ---
['const CV_CAP_PROP_ANDROID_FLASH_MODE', '8001', [], [], None]
ok: CONST CV_CAP_PROP_ANDROID_FLASH_MODE=8001

--- Incoming ---
['const CV_CAP_PROP_ANDROID_FOCUS_MODE', '8002', [], [], None]
ok: CONST CV_CAP_PROP_ANDROID_FOCUS_MODE=8002

--- Incoming ---
['const CV_CAP_PROP_ANDROID_WHITE_BALANCE', '8003', [], [], None]
ok: CONST CV_CAP_PROP_ANDROID_WHITE_BALANCE=8003

--- Incoming ---
['const CV_CAP_PROP_ANDROID_ANTIBANDING', '8004', [], [], None]
ok: CONST CV_CAP_PROP_ANDROID_ANTIBANDING=8004

--- Incoming ---
['const CV_CAP_PROP_ANDROID_FOCAL_LENGTH', '8005', [], [], None]
ok: CONST CV_CAP_PROP_ANDROID_FOCAL_LENGTH=8005

--- Incoming ---
['const CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_NEAR', '8006', [], [], None]
ok: CONST CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_NEAR=8006

--- Incoming ---
['const CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_OPTIMAL', '8007', [], [], None]
ok: CONST CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_OPTIMAL=8007

--- Incoming ---
['const CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_FAR', '8008', [], [], None]
ok: CONST CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_FAR=8008

--- Incoming ---
['const CV_CAP_PROP_ANDROID_EXPOSE_LOCK', '8009', [], [], None]
ok: CONST CV_CAP_PROP_ANDROID_EXPOSE_LOCK=8009

--- Incoming ---
['const CV_CAP_PROP_ANDROID_WHITEBALANCE_LOCK', '8010', [], [], None]
ok: CONST CV_CAP_PROP_ANDROID_WHITEBALANCE_LOCK=8010

--- Incoming ---
['const CV_CAP_PROP_IOS_DEVICE_FOCUS', '9001', [], [], None]
ok: CONST CV_CAP_PROP_IOS_DEVICE_FOCUS=9001

--- Incoming ---
['const CV_CAP_PROP_IOS_DEVICE_EXPOSURE', '9002', [], [], None]
ok: CONST CV_CAP_PROP_IOS_DEVICE_EXPOSURE=9002

--- Incoming ---
['const CV_CAP_PROP_IOS_DEVICE_FLASH', '9003', [], [], None]
ok: CONST CV_CAP_PROP_IOS_DEVICE_FLASH=9003

--- Incoming ---
['const CV_CAP_PROP_IOS_DEVICE_WHITEBALANCE', '9004', [], [], None]
ok: CONST CV_CAP_PROP_IOS_DEVICE_WHITEBALANCE=9004

--- Incoming ---
['const CV_CAP_PROP_IOS_DEVICE_TORCH', '9005', [], [], None]
ok: CONST CV_CAP_PROP_IOS_DEVICE_TORCH=9005

--- Incoming ---
['const CV_CAP_PROP_GIGA_FRAME_OFFSET_X', '10001', [], [], None]
ok: CONST CV_CAP_PROP_GIGA_FRAME_OFFSET_X=10001

--- Incoming ---
['const CV_CAP_PROP_GIGA_FRAME_OFFSET_Y', '10002', [], [], None]
ok: CONST CV_CAP_PROP_GIGA_FRAME_OFFSET_Y=10002

--- Incoming ---
['const CV_CAP_PROP_GIGA_FRAME_WIDTH_MAX', '10003', [], [], None]
ok: CONST CV_CAP_PROP_GIGA_FRAME_WIDTH_MAX=10003

--- Incoming ---
['const CV_CAP_PROP_GIGA_FRAME_HEIGH_MAX', '10004', [], [], None]
ok: CONST CV_CAP_PROP_GIGA_FRAME_HEIGH_MAX=10004

--- Incoming ---
['const CV_CAP_PROP_GIGA_FRAME_SENS_WIDTH', '10005', [], [], None]
ok: CONST CV_CAP_PROP_GIGA_FRAME_SENS_WIDTH=10005

--- Incoming ---
['const CV_CAP_PROP_GIGA_FRAME_SENS_HEIGH', '10006', [], [], None]
ok: CONST CV_CAP_PROP_GIGA_FRAME_SENS_HEIGH=10006

--- Incoming ---
['const CV_CAP_PROP_INTELPERC_PROFILE_COUNT', '11001', [], [], None]
ok: CONST CV_CAP_PROP_INTELPERC_PROFILE_COUNT=11001

--- Incoming ---
['const CV_CAP_PROP_INTELPERC_PROFILE_IDX', '11002', [], [], None]
ok: CONST CV_CAP_PROP_INTELPERC_PROFILE_IDX=11002

--- Incoming ---
[   'const CV_CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE',
    '11003',
    [],
    [],
    None]
ok: CONST CV_CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE=11003

--- Incoming ---
['const CV_CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE', '11004', [], [], None]
ok: CONST CV_CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE=11004

--- Incoming ---
[   'const CV_CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD',
    '11005',
    [],
    [],
    None]
ok: CONST CV_CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD=11005

--- Incoming ---
['const CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ', '11006', [], [], None]
ok: CONST CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ=11006

--- Incoming ---
['const CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT', '11007', [], [], None]
ok: CONST CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT=11007

--- Incoming ---
['const CV_CAP_INTELPERC_DEPTH_GENERATOR', '1 << 29', [], [], None]
ok: CONST CV_CAP_INTELPERC_DEPTH_GENERATOR=1 << 29

--- Incoming ---
['const CV_CAP_INTELPERC_IMAGE_GENERATOR', '1 << 28', [], [], None]
ok: CONST CV_CAP_INTELPERC_IMAGE_GENERATOR=1 << 28

--- Incoming ---
[   'const CV_CAP_INTELPERC_GENERATORS_MASK',
    'CV_CAP_INTELPERC_DEPTH_GENERATOR + CV_CAP_INTELPERC_IMAGE_GENERATOR',
    [],
    [],
    None]
ok: CONST CV_CAP_INTELPERC_GENERATORS_MASK=CV_CAP_INTELPERC_DEPTH_GENERATOR + CV_CAP_INTELPERC_IMAGE_GENERATOR

--- Incoming ---
['const CV_CAP_MODE_BGR', '0', [], [], None]
ok: CONST CV_CAP_MODE_BGR=0

--- Incoming ---
['const CV_CAP_MODE_RGB', '1', [], [], None]
ok: CONST CV_CAP_MODE_RGB=1

--- Incoming ---
['const CV_CAP_MODE_GRAY', '2', [], [], None]
ok: CONST CV_CAP_MODE_GRAY=2

--- Incoming ---
['const CV_CAP_MODE_YUYV', '3', [], [], None]
ok: CONST CV_CAP_MODE_YUYV=3

--- Incoming ---
['const CV_CAP_OPENNI_DEPTH_MAP', '0', [], [], None]
ok: CONST CV_CAP_OPENNI_DEPTH_MAP=0

--- Incoming ---
['const CV_CAP_OPENNI_POINT_CLOUD_MAP', '1', [], [], None]
ok: CONST CV_CAP_OPENNI_POINT_CLOUD_MAP=1

--- Incoming ---
['const CV_CAP_OPENNI_DISPARITY_MAP', '2', [], [], None]
ok: CONST CV_CAP_OPENNI_DISPARITY_MAP=2

--- Incoming ---
['const CV_CAP_OPENNI_DISPARITY_MAP_32F', '3', [], [], None]
ok: CONST CV_CAP_OPENNI_DISPARITY_MAP_32F=3

--- Incoming ---
['const CV_CAP_OPENNI_VALID_DEPTH_MASK', '4', [], [], None]
ok: CONST CV_CAP_OPENNI_VALID_DEPTH_MASK=4

--- Incoming ---
['const CV_CAP_OPENNI_BGR_IMAGE', '5', [], [], None]
ok: CONST CV_CAP_OPENNI_BGR_IMAGE=5

--- Incoming ---
['const CV_CAP_OPENNI_GRAY_IMAGE', '6', [], [], None]
ok: CONST CV_CAP_OPENNI_GRAY_IMAGE=6

--- Incoming ---
['const CV_CAP_OPENNI_IR_IMAGE', '7', [], [], None]
ok: CONST CV_CAP_OPENNI_IR_IMAGE=7

--- Incoming ---
['const CV_CAP_OPENNI_VGA_30HZ', '0', [], [], None]
ok: CONST CV_CAP_OPENNI_VGA_30HZ=0

--- Incoming ---
['const CV_CAP_OPENNI_SXGA_15HZ', '1', [], [], None]
ok: CONST CV_CAP_OPENNI_SXGA_15HZ=1

--- Incoming ---
['const CV_CAP_OPENNI_SXGA_30HZ', '2', [], [], None]
ok: CONST CV_CAP_OPENNI_SXGA_30HZ=2

--- Incoming ---
['const CV_CAP_OPENNI_QVGA_30HZ', '3', [], [], None]
ok: CONST CV_CAP_OPENNI_QVGA_30HZ=3

--- Incoming ---
['const CV_CAP_OPENNI_QVGA_60HZ', '4', [], [], None]
ok: CONST CV_CAP_OPENNI_QVGA_60HZ=4

--- Incoming ---
['const CV_CAP_INTELPERC_DEPTH_MAP', '0', [], [], None]
ok: CONST CV_CAP_INTELPERC_DEPTH_MAP=0

--- Incoming ---
['const CV_CAP_INTELPERC_UVDEPTH_MAP', '1', [], [], None]
ok: CONST CV_CAP_INTELPERC_UVDEPTH_MAP=1

--- Incoming ---
['const CV_CAP_INTELPERC_IR_MAP', '2', [], [], None]
ok: CONST CV_CAP_INTELPERC_IR_MAP=2

--- Incoming ---
['const CV_CAP_INTELPERC_IMAGE', '3', [], [], None]
ok: CONST CV_CAP_INTELPERC_IMAGE=3

--- Incoming ---
['const CV_CAP_PROP_GPHOTO2_PREVIEW', '17001', [], [], None]
ok: CONST CV_CAP_PROP_GPHOTO2_PREVIEW=17001

--- Incoming ---
['const CV_CAP_PROP_GPHOTO2_WIDGET_ENUMERATE', '17002', [], [], None]
ok: CONST CV_CAP_PROP_GPHOTO2_WIDGET_ENUMERATE=17002

--- Incoming ---
['const CV_CAP_PROP_GPHOTO2_RELOAD_CONFIG', '17003', [], [], None]
ok: CONST CV_CAP_PROP_GPHOTO2_RELOAD_CONFIG=17003

--- Incoming ---
['const CV_CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE', '17004', [], [], None]
ok: CONST CV_CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE=17004

--- Incoming ---
['const CV_CAP_PROP_GPHOTO2_COLLECT_MSGS', '17005', [], [], None]
ok: CONST CV_CAP_PROP_GPHOTO2_COLLECT_MSGS=17005

--- Incoming ---
['const CV_CAP_PROP_GPHOTO2_FLUSH_MSGS', '17006', [], [], None]
ok: CONST CV_CAP_PROP_GPHOTO2_FLUSH_MSGS=17006

--- Incoming ---
['const CV_CAP_PROP_SPEED', '17007', [], [], None]
ok: CONST CV_CAP_PROP_SPEED=17007

--- Incoming ---
['const CV_CAP_PROP_APERTURE', '17008', [], [], None]
ok: CONST CV_CAP_PROP_APERTURE=17008

--- Incoming ---
['const CV_CAP_PROP_EXPOSUREPROGRAM', '17009', [], [], None]
ok: CONST CV_CAP_PROP_EXPOSUREPROGRAM=17009

--- Incoming ---
['const CV_CAP_PROP_VIEWFINDER', '17010', [], [], None]
ok: CONST CV_CAP_PROP_VIEWFINDER=17010


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/videoio\include\opencv2\videoio.hpp =====
Namespaces: {'', 'cv'}

--- Incoming ---
['const cv.CAP_ANY', '0', [], [], None]
ok: CONST CAP_ANY=0

--- Incoming ---
['const cv.CAP_VFW', '200', [], [], None]
ok: CONST CAP_VFW=200

--- Incoming ---
['const cv.CAP_V4L', '200', [], [], None]
ok: CONST CAP_V4L=200

--- Incoming ---
['const cv.CAP_V4L2', 'CAP_V4L', [], [], None]
ok: CONST CAP_V4L2=CAP_V4L

--- Incoming ---
['const cv.CAP_FIREWIRE', '300', [], [], None]
ok: CONST CAP_FIREWIRE=300

--- Incoming ---
['const cv.CAP_FIREWARE', 'CAP_FIREWIRE', [], [], None]
ok: CONST CAP_FIREWARE=CAP_FIREWIRE

--- Incoming ---
['const cv.CAP_IEEE1394', 'CAP_FIREWIRE', [], [], None]
ok: CONST CAP_IEEE1394=CAP_FIREWIRE

--- Incoming ---
['const cv.CAP_DC1394', 'CAP_FIREWIRE', [], [], None]
ok: CONST CAP_DC1394=CAP_FIREWIRE

--- Incoming ---
['const cv.CAP_CMU1394', 'CAP_FIREWIRE', [], [], None]
ok: CONST CAP_CMU1394=CAP_FIREWIRE

--- Incoming ---
['const cv.CAP_QT', '500', [], [], None]
ok: CONST CAP_QT=500

--- Incoming ---
['const cv.CAP_UNICAP', '600', [], [], None]
ok: CONST CAP_UNICAP=600

--- Incoming ---
['const cv.CAP_DSHOW', '700', [], [], None]
ok: CONST CAP_DSHOW=700

--- Incoming ---
['const cv.CAP_PVAPI', '800', [], [], None]
ok: CONST CAP_PVAPI=800

--- Incoming ---
['const cv.CAP_OPENNI', '900', [], [], None]
ok: CONST CAP_OPENNI=900

--- Incoming ---
['const cv.CAP_OPENNI_ASUS', '910', [], [], None]
ok: CONST CAP_OPENNI_ASUS=910

--- Incoming ---
['const cv.CAP_ANDROID', '1000', [], [], None]
ok: CONST CAP_ANDROID=1000

--- Incoming ---
['const cv.CAP_XIAPI', '1100', [], [], None]
ok: CONST CAP_XIAPI=1100

--- Incoming ---
['const cv.CAP_AVFOUNDATION', '1200', [], [], None]
ok: CONST CAP_AVFOUNDATION=1200

--- Incoming ---
['const cv.CAP_GIGANETIX', '1300', [], [], None]
ok: CONST CAP_GIGANETIX=1300

--- Incoming ---
['const cv.CAP_MSMF', '1400', [], [], None]
ok: CONST CAP_MSMF=1400

--- Incoming ---
['const cv.CAP_WINRT', '1410', [], [], None]
ok: CONST CAP_WINRT=1410

--- Incoming ---
['const cv.CAP_INTELPERC', '1500', [], [], None]
ok: CONST CAP_INTELPERC=1500

--- Incoming ---
['const cv.CAP_OPENNI2', '1600', [], [], None]
ok: CONST CAP_OPENNI2=1600

--- Incoming ---
['const cv.CAP_OPENNI2_ASUS', '1610', [], [], None]
ok: CONST CAP_OPENNI2_ASUS=1610

--- Incoming ---
['const cv.CAP_GPHOTO2', '1700', [], [], None]
ok: CONST CAP_GPHOTO2=1700

--- Incoming ---
['const cv.CAP_GSTREAMER', '1800', [], [], None]
ok: CONST CAP_GSTREAMER=1800

--- Incoming ---
['const cv.CAP_FFMPEG', '1900', [], [], None]
ok: CONST CAP_FFMPEG=1900

--- Incoming ---
['const cv.CAP_IMAGES', '2000', [], [], None]
ok: CONST CAP_IMAGES=2000

--- Incoming ---
['const cv.CAP_ARAVIS', '2100', [], [], None]
ok: CONST CAP_ARAVIS=2100

--- Incoming ---
['const cv.CAP_OPENCV_MJPEG', '2200', [], [], None]
ok: CONST CAP_OPENCV_MJPEG=2200

--- Incoming ---
['const cv.CAP_INTEL_MFX', '2300', [], [], None]
ok: CONST CAP_INTEL_MFX=2300

--- Incoming ---
['const cv.CAP_XINE', '2400', [], [], None]
ok: CONST CAP_XINE=2400

--- Incoming ---
['const cv.CAP_PROP_POS_MSEC', '0', [], [], None]
ok: CONST CAP_PROP_POS_MSEC=0

--- Incoming ---
['const cv.CAP_PROP_POS_FRAMES', '1', [], [], None]
ok: CONST CAP_PROP_POS_FRAMES=1

--- Incoming ---
['const cv.CAP_PROP_POS_AVI_RATIO', '2', [], [], None]
ok: CONST CAP_PROP_POS_AVI_RATIO=2

--- Incoming ---
['const cv.CAP_PROP_FRAME_WIDTH', '3', [], [], None]
ok: CONST CAP_PROP_FRAME_WIDTH=3

--- Incoming ---
['const cv.CAP_PROP_FRAME_HEIGHT', '4', [], [], None]
ok: CONST CAP_PROP_FRAME_HEIGHT=4

--- Incoming ---
['const cv.CAP_PROP_FPS', '5', [], [], None]
ok: CONST CAP_PROP_FPS=5

--- Incoming ---
['const cv.CAP_PROP_FOURCC', '6', [], [], None]
ok: CONST CAP_PROP_FOURCC=6

--- Incoming ---
['const cv.CAP_PROP_FRAME_COUNT', '7', [], [], None]
ok: CONST CAP_PROP_FRAME_COUNT=7

--- Incoming ---
['const cv.CAP_PROP_FORMAT', '8', [], [], None]
ok: CONST CAP_PROP_FORMAT=8

--- Incoming ---
['const cv.CAP_PROP_MODE', '9', [], [], None]
ok: CONST CAP_PROP_MODE=9

--- Incoming ---
['const cv.CAP_PROP_BRIGHTNESS', '10', [], [], None]
ok: CONST CAP_PROP_BRIGHTNESS=10

--- Incoming ---
['const cv.CAP_PROP_CONTRAST', '11', [], [], None]
ok: CONST CAP_PROP_CONTRAST=11

--- Incoming ---
['const cv.CAP_PROP_SATURATION', '12', [], [], None]
ok: CONST CAP_PROP_SATURATION=12

--- Incoming ---
['const cv.CAP_PROP_HUE', '13', [], [], None]
ok: CONST CAP_PROP_HUE=13

--- Incoming ---
['const cv.CAP_PROP_GAIN', '14', [], [], None]
ok: CONST CAP_PROP_GAIN=14

--- Incoming ---
['const cv.CAP_PROP_EXPOSURE', '15', [], [], None]
ok: CONST CAP_PROP_EXPOSURE=15

--- Incoming ---
['const cv.CAP_PROP_CONVERT_RGB', '16', [], [], None]
ok: CONST CAP_PROP_CONVERT_RGB=16

--- Incoming ---
['const cv.CAP_PROP_WHITE_BALANCE_BLUE_U', '17', [], [], None]
ok: CONST CAP_PROP_WHITE_BALANCE_BLUE_U=17

--- Incoming ---
['const cv.CAP_PROP_RECTIFICATION', '18', [], [], None]
ok: CONST CAP_PROP_RECTIFICATION=18

--- Incoming ---
['const cv.CAP_PROP_MONOCHROME', '19', [], [], None]
ok: CONST CAP_PROP_MONOCHROME=19

--- Incoming ---
['const cv.CAP_PROP_SHARPNESS', '20', [], [], None]
ok: CONST CAP_PROP_SHARPNESS=20

--- Incoming ---
['const cv.CAP_PROP_AUTO_EXPOSURE', '21', [], [], None]
ok: CONST CAP_PROP_AUTO_EXPOSURE=21

--- Incoming ---
['const cv.CAP_PROP_GAMMA', '22', [], [], None]
ok: CONST CAP_PROP_GAMMA=22

--- Incoming ---
['const cv.CAP_PROP_TEMPERATURE', '23', [], [], None]
ok: CONST CAP_PROP_TEMPERATURE=23

--- Incoming ---
['const cv.CAP_PROP_TRIGGER', '24', [], [], None]
ok: CONST CAP_PROP_TRIGGER=24

--- Incoming ---
['const cv.CAP_PROP_TRIGGER_DELAY', '25', [], [], None]
ok: CONST CAP_PROP_TRIGGER_DELAY=25

--- Incoming ---
['const cv.CAP_PROP_WHITE_BALANCE_RED_V', '26', [], [], None]
ok: CONST CAP_PROP_WHITE_BALANCE_RED_V=26

--- Incoming ---
['const cv.CAP_PROP_ZOOM', '27', [], [], None]
ok: CONST CAP_PROP_ZOOM=27

--- Incoming ---
['const cv.CAP_PROP_FOCUS', '28', [], [], None]
ok: CONST CAP_PROP_FOCUS=28

--- Incoming ---
['const cv.CAP_PROP_GUID', '29', [], [], None]
ok: CONST CAP_PROP_GUID=29

--- Incoming ---
['const cv.CAP_PROP_ISO_SPEED', '30', [], [], None]
ok: CONST CAP_PROP_ISO_SPEED=30

--- Incoming ---
['const cv.CAP_PROP_BACKLIGHT', '32', [], [], None]
ok: CONST CAP_PROP_BACKLIGHT=32

--- Incoming ---
['const cv.CAP_PROP_PAN', '33', [], [], None]
ok: CONST CAP_PROP_PAN=33

--- Incoming ---
['const cv.CAP_PROP_TILT', '34', [], [], None]
ok: CONST CAP_PROP_TILT=34

--- Incoming ---
['const cv.CAP_PROP_ROLL', '35', [], [], None]
ok: CONST CAP_PROP_ROLL=35

--- Incoming ---
['const cv.CAP_PROP_IRIS', '36', [], [], None]
ok: CONST CAP_PROP_IRIS=36

--- Incoming ---
['const cv.CAP_PROP_SETTINGS', '37', [], [], None]
ok: CONST CAP_PROP_SETTINGS=37

--- Incoming ---
['const cv.CAP_PROP_BUFFERSIZE', '38', [], [], None]
ok: CONST CAP_PROP_BUFFERSIZE=38

--- Incoming ---
['const cv.CAP_PROP_AUTOFOCUS', '39', [], [], None]
ok: CONST CAP_PROP_AUTOFOCUS=39

--- Incoming ---
['const cv.CAP_PROP_SAR_NUM', '40', [], [], None]
ok: CONST CAP_PROP_SAR_NUM=40

--- Incoming ---
['const cv.CAP_PROP_SAR_DEN', '41', [], [], None]
ok: CONST CAP_PROP_SAR_DEN=41

--- Incoming ---
['const cv.CAP_MODE_BGR', '0', [], [], None]
ok: CONST CAP_MODE_BGR=0

--- Incoming ---
['const cv.CAP_MODE_RGB', '1', [], [], None]
ok: CONST CAP_MODE_RGB=1

--- Incoming ---
['const cv.CAP_MODE_GRAY', '2', [], [], None]
ok: CONST CAP_MODE_GRAY=2

--- Incoming ---
['const cv.CAP_MODE_YUYV', '3', [], [], None]
ok: CONST CAP_MODE_YUYV=3

--- Incoming ---
['const cv.VIDEOWRITER_PROP_QUALITY', '1', [], [], None]
ok: CONST VIDEOWRITER_PROP_QUALITY=1

--- Incoming ---
['const cv.VIDEOWRITER_PROP_FRAMEBYTES', '2', [], [], None]
ok: CONST VIDEOWRITER_PROP_FRAMEBYTES=2

--- Incoming ---
['const cv.VIDEOWRITER_PROP_NSTRIPES', '3', [], [], None]
ok: CONST VIDEOWRITER_PROP_NSTRIPES=3

--- Incoming ---
['const cv.CAP_PROP_DC1394_OFF', '-4', [], [], None]
ok: CONST CAP_PROP_DC1394_OFF=-4

--- Incoming ---
['const cv.CAP_PROP_DC1394_MODE_MANUAL', '-3', [], [], None]
ok: CONST CAP_PROP_DC1394_MODE_MANUAL=-3

--- Incoming ---
['const cv.CAP_PROP_DC1394_MODE_AUTO', '-2', [], [], None]
ok: CONST CAP_PROP_DC1394_MODE_AUTO=-2

--- Incoming ---
['const cv.CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO', '-1', [], [], None]
ok: CONST CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO=-1

--- Incoming ---
['const cv.CAP_PROP_DC1394_MAX', '31', [], [], None]
ok: CONST CAP_PROP_DC1394_MAX=31

--- Incoming ---
['const cv.CAP_OPENNI_DEPTH_GENERATOR', '1 << 31', [], [], None]
ok: CONST CAP_OPENNI_DEPTH_GENERATOR=1 << 31

--- Incoming ---
['const cv.CAP_OPENNI_IMAGE_GENERATOR', '1 << 30', [], [], None]
ok: CONST CAP_OPENNI_IMAGE_GENERATOR=1 << 30

--- Incoming ---
['const cv.CAP_OPENNI_IR_GENERATOR', '1 << 29', [], [], None]
ok: CONST CAP_OPENNI_IR_GENERATOR=1 << 29

--- Incoming ---
[   'const cv.CAP_OPENNI_GENERATORS_MASK',
    'CAP_OPENNI_DEPTH_GENERATOR + CAP_OPENNI_IMAGE_GENERATOR + '
    'CAP_OPENNI_IR_GENERATOR',
    [],
    [],
    None]
ok: CONST CAP_OPENNI_GENERATORS_MASK=CAP_OPENNI_DEPTH_GENERATOR + CAP_OPENNI_IMAGE_GENERATOR + CAP_OPENNI_IR_GENERATOR

--- Incoming ---
['const cv.CAP_PROP_OPENNI_OUTPUT_MODE', '100', [], [], None]
ok: CONST CAP_PROP_OPENNI_OUTPUT_MODE=100

--- Incoming ---
['const cv.CAP_PROP_OPENNI_FRAME_MAX_DEPTH', '101', [], [], None]
ok: CONST CAP_PROP_OPENNI_FRAME_MAX_DEPTH=101

--- Incoming ---
['const cv.CAP_PROP_OPENNI_BASELINE', '102', [], [], None]
ok: CONST CAP_PROP_OPENNI_BASELINE=102

--- Incoming ---
['const cv.CAP_PROP_OPENNI_FOCAL_LENGTH', '103', [], [], None]
ok: CONST CAP_PROP_OPENNI_FOCAL_LENGTH=103

--- Incoming ---
['const cv.CAP_PROP_OPENNI_REGISTRATION', '104', [], [], None]
ok: CONST CAP_PROP_OPENNI_REGISTRATION=104

--- Incoming ---
[   'const cv.CAP_PROP_OPENNI_REGISTRATION_ON',
    'CAP_PROP_OPENNI_REGISTRATION',
    [],
    [],
    None]
ok: CONST CAP_PROP_OPENNI_REGISTRATION_ON=CAP_PROP_OPENNI_REGISTRATION

--- Incoming ---
['const cv.CAP_PROP_OPENNI_APPROX_FRAME_SYNC', '105', [], [], None]
ok: CONST CAP_PROP_OPENNI_APPROX_FRAME_SYNC=105

--- Incoming ---
['const cv.CAP_PROP_OPENNI_MAX_BUFFER_SIZE', '106', [], [], None]
ok: CONST CAP_PROP_OPENNI_MAX_BUFFER_SIZE=106

--- Incoming ---
['const cv.CAP_PROP_OPENNI_CIRCLE_BUFFER', '107', [], [], None]
ok: CONST CAP_PROP_OPENNI_CIRCLE_BUFFER=107

--- Incoming ---
['const cv.CAP_PROP_OPENNI_MAX_TIME_DURATION', '108', [], [], None]
ok: CONST CAP_PROP_OPENNI_MAX_TIME_DURATION=108

--- Incoming ---
['const cv.CAP_PROP_OPENNI_GENERATOR_PRESENT', '109', [], [], None]
ok: CONST CAP_PROP_OPENNI_GENERATOR_PRESENT=109

--- Incoming ---
['const cv.CAP_PROP_OPENNI2_SYNC', '110', [], [], None]
ok: CONST CAP_PROP_OPENNI2_SYNC=110

--- Incoming ---
['const cv.CAP_PROP_OPENNI2_MIRROR', '111', [], [], None]
ok: CONST CAP_PROP_OPENNI2_MIRROR=111

--- Incoming ---
[   'const cv.CAP_OPENNI_IMAGE_GENERATOR_PRESENT',
    'CAP_OPENNI_IMAGE_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT',
    [],
    [],
    None]
ok: CONST CAP_OPENNI_IMAGE_GENERATOR_PRESENT=CAP_OPENNI_IMAGE_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT

--- Incoming ---
[   'const cv.CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE',
    'CAP_OPENNI_IMAGE_GENERATOR + CAP_PROP_OPENNI_OUTPUT_MODE',
    [],
    [],
    None]
ok: CONST CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE=CAP_OPENNI_IMAGE_GENERATOR + CAP_PROP_OPENNI_OUTPUT_MODE

--- Incoming ---
[   'const cv.CAP_OPENNI_DEPTH_GENERATOR_PRESENT',
    'CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT',
    [],
    [],
    None]
ok: CONST CAP_OPENNI_DEPTH_GENERATOR_PRESENT=CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT

--- Incoming ---
[   'const cv.CAP_OPENNI_DEPTH_GENERATOR_BASELINE',
    'CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_BASELINE',
    [],
    [],
    None]
ok: CONST CAP_OPENNI_DEPTH_GENERATOR_BASELINE=CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_BASELINE

--- Incoming ---
[   'const cv.CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH',
    'CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_FOCAL_LENGTH',
    [],
    [],
    None]
ok: CONST CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH=CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_FOCAL_LENGTH

--- Incoming ---
[   'const cv.CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION',
    'CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_REGISTRATION',
    [],
    [],
    None]
ok: CONST CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION=CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_REGISTRATION

--- Incoming ---
[   'const cv.CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON',
    'CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION',
    [],
    [],
    None]
ok: CONST CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON=CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION

--- Incoming ---
[   'const cv.CAP_OPENNI_IR_GENERATOR_PRESENT',
    'CAP_OPENNI_IR_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT',
    [],
    [],
    None]
ok: CONST CAP_OPENNI_IR_GENERATOR_PRESENT=CAP_OPENNI_IR_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT

--- Incoming ---
['const cv.CAP_OPENNI_DEPTH_MAP', '0', [], [], None]
ok: CONST CAP_OPENNI_DEPTH_MAP=0

--- Incoming ---
['const cv.CAP_OPENNI_POINT_CLOUD_MAP', '1', [], [], None]
ok: CONST CAP_OPENNI_POINT_CLOUD_MAP=1

--- Incoming ---
['const cv.CAP_OPENNI_DISPARITY_MAP', '2', [], [], None]
ok: CONST CAP_OPENNI_DISPARITY_MAP=2

--- Incoming ---
['const cv.CAP_OPENNI_DISPARITY_MAP_32F', '3', [], [], None]
ok: CONST CAP_OPENNI_DISPARITY_MAP_32F=3

--- Incoming ---
['const cv.CAP_OPENNI_VALID_DEPTH_MASK', '4', [], [], None]
ok: CONST CAP_OPENNI_VALID_DEPTH_MASK=4

--- Incoming ---
['const cv.CAP_OPENNI_BGR_IMAGE', '5', [], [], None]
ok: CONST CAP_OPENNI_BGR_IMAGE=5

--- Incoming ---
['const cv.CAP_OPENNI_GRAY_IMAGE', '6', [], [], None]
ok: CONST CAP_OPENNI_GRAY_IMAGE=6

--- Incoming ---
['const cv.CAP_OPENNI_IR_IMAGE', '7', [], [], None]
ok: CONST CAP_OPENNI_IR_IMAGE=7

--- Incoming ---
['const cv.CAP_OPENNI_VGA_30HZ', '0', [], [], None]
ok: CONST CAP_OPENNI_VGA_30HZ=0

--- Incoming ---
['const cv.CAP_OPENNI_SXGA_15HZ', '1', [], [], None]
ok: CONST CAP_OPENNI_SXGA_15HZ=1

--- Incoming ---
['const cv.CAP_OPENNI_SXGA_30HZ', '2', [], [], None]
ok: CONST CAP_OPENNI_SXGA_30HZ=2

--- Incoming ---
['const cv.CAP_OPENNI_QVGA_30HZ', '3', [], [], None]
ok: CONST CAP_OPENNI_QVGA_30HZ=3

--- Incoming ---
['const cv.CAP_OPENNI_QVGA_60HZ', '4', [], [], None]
ok: CONST CAP_OPENNI_QVGA_60HZ=4

--- Incoming ---
['const cv.CAP_PROP_GSTREAMER_QUEUE_LENGTH', '200', [], [], None]
ok: CONST CAP_PROP_GSTREAMER_QUEUE_LENGTH=200

--- Incoming ---
['const cv.CAP_PROP_PVAPI_MULTICASTIP', '300', [], [], None]
ok: CONST CAP_PROP_PVAPI_MULTICASTIP=300

--- Incoming ---
['const cv.CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE', '301', [], [], None]
ok: CONST CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE=301

--- Incoming ---
['const cv.CAP_PROP_PVAPI_DECIMATIONHORIZONTAL', '302', [], [], None]
ok: CONST CAP_PROP_PVAPI_DECIMATIONHORIZONTAL=302

--- Incoming ---
['const cv.CAP_PROP_PVAPI_DECIMATIONVERTICAL', '303', [], [], None]
ok: CONST CAP_PROP_PVAPI_DECIMATIONVERTICAL=303

--- Incoming ---
['const cv.CAP_PROP_PVAPI_BINNINGX', '304', [], [], None]
ok: CONST CAP_PROP_PVAPI_BINNINGX=304

--- Incoming ---
['const cv.CAP_PROP_PVAPI_BINNINGY', '305', [], [], None]
ok: CONST CAP_PROP_PVAPI_BINNINGY=305

--- Incoming ---
['const cv.CAP_PROP_PVAPI_PIXELFORMAT', '306', [], [], None]
ok: CONST CAP_PROP_PVAPI_PIXELFORMAT=306

--- Incoming ---
['const cv.CAP_PVAPI_FSTRIGMODE_FREERUN', '0', [], [], None]
ok: CONST CAP_PVAPI_FSTRIGMODE_FREERUN=0

--- Incoming ---
['const cv.CAP_PVAPI_FSTRIGMODE_SYNCIN1', '1', [], [], None]
ok: CONST CAP_PVAPI_FSTRIGMODE_SYNCIN1=1

--- Incoming ---
['const cv.CAP_PVAPI_FSTRIGMODE_SYNCIN2', '2', [], [], None]
ok: CONST CAP_PVAPI_FSTRIGMODE_SYNCIN2=2

--- Incoming ---
['const cv.CAP_PVAPI_FSTRIGMODE_FIXEDRATE', '3', [], [], None]
ok: CONST CAP_PVAPI_FSTRIGMODE_FIXEDRATE=3

--- Incoming ---
['const cv.CAP_PVAPI_FSTRIGMODE_SOFTWARE', '4', [], [], None]
ok: CONST CAP_PVAPI_FSTRIGMODE_SOFTWARE=4

--- Incoming ---
['const cv.CAP_PVAPI_DECIMATION_OFF', '1', [], [], None]
ok: CONST CAP_PVAPI_DECIMATION_OFF=1

--- Incoming ---
['const cv.CAP_PVAPI_DECIMATION_2OUTOF4', '2', [], [], None]
ok: CONST CAP_PVAPI_DECIMATION_2OUTOF4=2

--- Incoming ---
['const cv.CAP_PVAPI_DECIMATION_2OUTOF8', '4', [], [], None]
ok: CONST CAP_PVAPI_DECIMATION_2OUTOF8=4

--- Incoming ---
['const cv.CAP_PVAPI_DECIMATION_2OUTOF16', '8', [], [], None]
ok: CONST CAP_PVAPI_DECIMATION_2OUTOF16=8

--- Incoming ---
['const cv.CAP_PVAPI_PIXELFORMAT_MONO8', '1', [], [], None]
ok: CONST CAP_PVAPI_PIXELFORMAT_MONO8=1

--- Incoming ---
['const cv.CAP_PVAPI_PIXELFORMAT_MONO16', '2', [], [], None]
ok: CONST CAP_PVAPI_PIXELFORMAT_MONO16=2

--- Incoming ---
['const cv.CAP_PVAPI_PIXELFORMAT_BAYER8', '3', [], [], None]
ok: CONST CAP_PVAPI_PIXELFORMAT_BAYER8=3

--- Incoming ---
['const cv.CAP_PVAPI_PIXELFORMAT_BAYER16', '4', [], [], None]
ok: CONST CAP_PVAPI_PIXELFORMAT_BAYER16=4

--- Incoming ---
['const cv.CAP_PVAPI_PIXELFORMAT_RGB24', '5', [], [], None]
ok: CONST CAP_PVAPI_PIXELFORMAT_RGB24=5

--- Incoming ---
['const cv.CAP_PVAPI_PIXELFORMAT_BGR24', '6', [], [], None]
ok: CONST CAP_PVAPI_PIXELFORMAT_BGR24=6

--- Incoming ---
['const cv.CAP_PVAPI_PIXELFORMAT_RGBA32', '7', [], [], None]
ok: CONST CAP_PVAPI_PIXELFORMAT_RGBA32=7

--- Incoming ---
['const cv.CAP_PVAPI_PIXELFORMAT_BGRA32', '8', [], [], None]
ok: CONST CAP_PVAPI_PIXELFORMAT_BGRA32=8

--- Incoming ---
['const cv.CAP_PROP_XI_DOWNSAMPLING', '400', [], [], None]
ok: CONST CAP_PROP_XI_DOWNSAMPLING=400

--- Incoming ---
['const cv.CAP_PROP_XI_DATA_FORMAT', '401', [], [], None]
ok: CONST CAP_PROP_XI_DATA_FORMAT=401

--- Incoming ---
['const cv.CAP_PROP_XI_OFFSET_X', '402', [], [], None]
ok: CONST CAP_PROP_XI_OFFSET_X=402

--- Incoming ---
['const cv.CAP_PROP_XI_OFFSET_Y', '403', [], [], None]
ok: CONST CAP_PROP_XI_OFFSET_Y=403

--- Incoming ---
['const cv.CAP_PROP_XI_TRG_SOURCE', '404', [], [], None]
ok: CONST CAP_PROP_XI_TRG_SOURCE=404

--- Incoming ---
['const cv.CAP_PROP_XI_TRG_SOFTWARE', '405', [], [], None]
ok: CONST CAP_PROP_XI_TRG_SOFTWARE=405

--- Incoming ---
['const cv.CAP_PROP_XI_GPI_SELECTOR', '406', [], [], None]
ok: CONST CAP_PROP_XI_GPI_SELECTOR=406

--- Incoming ---
['const cv.CAP_PROP_XI_GPI_MODE', '407', [], [], None]
ok: CONST CAP_PROP_XI_GPI_MODE=407

--- Incoming ---
['const cv.CAP_PROP_XI_GPI_LEVEL', '408', [], [], None]
ok: CONST CAP_PROP_XI_GPI_LEVEL=408

--- Incoming ---
['const cv.CAP_PROP_XI_GPO_SELECTOR', '409', [], [], None]
ok: CONST CAP_PROP_XI_GPO_SELECTOR=409

--- Incoming ---
['const cv.CAP_PROP_XI_GPO_MODE', '410', [], [], None]
ok: CONST CAP_PROP_XI_GPO_MODE=410

--- Incoming ---
['const cv.CAP_PROP_XI_LED_SELECTOR', '411', [], [], None]
ok: CONST CAP_PROP_XI_LED_SELECTOR=411

--- Incoming ---
['const cv.CAP_PROP_XI_LED_MODE', '412', [], [], None]
ok: CONST CAP_PROP_XI_LED_MODE=412

--- Incoming ---
['const cv.CAP_PROP_XI_MANUAL_WB', '413', [], [], None]
ok: CONST CAP_PROP_XI_MANUAL_WB=413

--- Incoming ---
['const cv.CAP_PROP_XI_AUTO_WB', '414', [], [], None]
ok: CONST CAP_PROP_XI_AUTO_WB=414

--- Incoming ---
['const cv.CAP_PROP_XI_AEAG', '415', [], [], None]
ok: CONST CAP_PROP_XI_AEAG=415

--- Incoming ---
['const cv.CAP_PROP_XI_EXP_PRIORITY', '416', [], [], None]
ok: CONST CAP_PROP_XI_EXP_PRIORITY=416

--- Incoming ---
['const cv.CAP_PROP_XI_AE_MAX_LIMIT', '417', [], [], None]
ok: CONST CAP_PROP_XI_AE_MAX_LIMIT=417

--- Incoming ---
['const cv.CAP_PROP_XI_AG_MAX_LIMIT', '418', [], [], None]
ok: CONST CAP_PROP_XI_AG_MAX_LIMIT=418

--- Incoming ---
['const cv.CAP_PROP_XI_AEAG_LEVEL', '419', [], [], None]
ok: CONST CAP_PROP_XI_AEAG_LEVEL=419

--- Incoming ---
['const cv.CAP_PROP_XI_TIMEOUT', '420', [], [], None]
ok: CONST CAP_PROP_XI_TIMEOUT=420

--- Incoming ---
['const cv.CAP_PROP_XI_EXPOSURE', '421', [], [], None]
ok: CONST CAP_PROP_XI_EXPOSURE=421

--- Incoming ---
['const cv.CAP_PROP_XI_EXPOSURE_BURST_COUNT', '422', [], [], None]
ok: CONST CAP_PROP_XI_EXPOSURE_BURST_COUNT=422

--- Incoming ---
['const cv.CAP_PROP_XI_GAIN_SELECTOR', '423', [], [], None]
ok: CONST CAP_PROP_XI_GAIN_SELECTOR=423

--- Incoming ---
['const cv.CAP_PROP_XI_GAIN', '424', [], [], None]
ok: CONST CAP_PROP_XI_GAIN=424

--- Incoming ---
['const cv.CAP_PROP_XI_DOWNSAMPLING_TYPE', '426', [], [], None]
ok: CONST CAP_PROP_XI_DOWNSAMPLING_TYPE=426

--- Incoming ---
['const cv.CAP_PROP_XI_BINNING_SELECTOR', '427', [], [], None]
ok: CONST CAP_PROP_XI_BINNING_SELECTOR=427

--- Incoming ---
['const cv.CAP_PROP_XI_BINNING_VERTICAL', '428', [], [], None]
ok: CONST CAP_PROP_XI_BINNING_VERTICAL=428

--- Incoming ---
['const cv.CAP_PROP_XI_BINNING_HORIZONTAL', '429', [], [], None]
ok: CONST CAP_PROP_XI_BINNING_HORIZONTAL=429

--- Incoming ---
['const cv.CAP_PROP_XI_BINNING_PATTERN', '430', [], [], None]
ok: CONST CAP_PROP_XI_BINNING_PATTERN=430

--- Incoming ---
['const cv.CAP_PROP_XI_DECIMATION_SELECTOR', '431', [], [], None]
ok: CONST CAP_PROP_XI_DECIMATION_SELECTOR=431

--- Incoming ---
['const cv.CAP_PROP_XI_DECIMATION_VERTICAL', '432', [], [], None]
ok: CONST CAP_PROP_XI_DECIMATION_VERTICAL=432

--- Incoming ---
['const cv.CAP_PROP_XI_DECIMATION_HORIZONTAL', '433', [], [], None]
ok: CONST CAP_PROP_XI_DECIMATION_HORIZONTAL=433

--- Incoming ---
['const cv.CAP_PROP_XI_DECIMATION_PATTERN', '434', [], [], None]
ok: CONST CAP_PROP_XI_DECIMATION_PATTERN=434

--- Incoming ---
['const cv.CAP_PROP_XI_TEST_PATTERN_GENERATOR_SELECTOR', '587', [], [], None]
ok: CONST CAP_PROP_XI_TEST_PATTERN_GENERATOR_SELECTOR=587

--- Incoming ---
['const cv.CAP_PROP_XI_TEST_PATTERN', '588', [], [], None]
ok: CONST CAP_PROP_XI_TEST_PATTERN=588

--- Incoming ---
['const cv.CAP_PROP_XI_IMAGE_DATA_FORMAT', '435', [], [], None]
ok: CONST CAP_PROP_XI_IMAGE_DATA_FORMAT=435

--- Incoming ---
['const cv.CAP_PROP_XI_SHUTTER_TYPE', '436', [], [], None]
ok: CONST CAP_PROP_XI_SHUTTER_TYPE=436

--- Incoming ---
['const cv.CAP_PROP_XI_SENSOR_TAPS', '437', [], [], None]
ok: CONST CAP_PROP_XI_SENSOR_TAPS=437

--- Incoming ---
['const cv.CAP_PROP_XI_AEAG_ROI_OFFSET_X', '439', [], [], None]
ok: CONST CAP_PROP_XI_AEAG_ROI_OFFSET_X=439

--- Incoming ---
['const cv.CAP_PROP_XI_AEAG_ROI_OFFSET_Y', '440', [], [], None]
ok: CONST CAP_PROP_XI_AEAG_ROI_OFFSET_Y=440

--- Incoming ---
['const cv.CAP_PROP_XI_AEAG_ROI_WIDTH', '441', [], [], None]
ok: CONST CAP_PROP_XI_AEAG_ROI_WIDTH=441

--- Incoming ---
['const cv.CAP_PROP_XI_AEAG_ROI_HEIGHT', '442', [], [], None]
ok: CONST CAP_PROP_XI_AEAG_ROI_HEIGHT=442

--- Incoming ---
['const cv.CAP_PROP_XI_BPC', '445', [], [], None]
ok: CONST CAP_PROP_XI_BPC=445

--- Incoming ---
['const cv.CAP_PROP_XI_WB_KR', '448', [], [], None]
ok: CONST CAP_PROP_XI_WB_KR=448

--- Incoming ---
['const cv.CAP_PROP_XI_WB_KG', '449', [], [], None]
ok: CONST CAP_PROP_XI_WB_KG=449

--- Incoming ---
['const cv.CAP_PROP_XI_WB_KB', '450', [], [], None]
ok: CONST CAP_PROP_XI_WB_KB=450

--- Incoming ---
['const cv.CAP_PROP_XI_WIDTH', '451', [], [], None]
ok: CONST CAP_PROP_XI_WIDTH=451

--- Incoming ---
['const cv.CAP_PROP_XI_HEIGHT', '452', [], [], None]
ok: CONST CAP_PROP_XI_HEIGHT=452

--- Incoming ---
['const cv.CAP_PROP_XI_REGION_SELECTOR', '589', [], [], None]
ok: CONST CAP_PROP_XI_REGION_SELECTOR=589

--- Incoming ---
['const cv.CAP_PROP_XI_REGION_MODE', '595', [], [], None]
ok: CONST CAP_PROP_XI_REGION_MODE=595

--- Incoming ---
['const cv.CAP_PROP_XI_LIMIT_BANDWIDTH', '459', [], [], None]
ok: CONST CAP_PROP_XI_LIMIT_BANDWIDTH=459

--- Incoming ---
['const cv.CAP_PROP_XI_SENSOR_DATA_BIT_DEPTH', '460', [], [], None]
ok: CONST CAP_PROP_XI_SENSOR_DATA_BIT_DEPTH=460

--- Incoming ---
['const cv.CAP_PROP_XI_OUTPUT_DATA_BIT_DEPTH', '461', [], [], None]
ok: CONST CAP_PROP_XI_OUTPUT_DATA_BIT_DEPTH=461

--- Incoming ---
['const cv.CAP_PROP_XI_IMAGE_DATA_BIT_DEPTH', '462', [], [], None]
ok: CONST CAP_PROP_XI_IMAGE_DATA_BIT_DEPTH=462

--- Incoming ---
['const cv.CAP_PROP_XI_OUTPUT_DATA_PACKING', '463', [], [], None]
ok: CONST CAP_PROP_XI_OUTPUT_DATA_PACKING=463

--- Incoming ---
['const cv.CAP_PROP_XI_OUTPUT_DATA_PACKING_TYPE', '464', [], [], None]
ok: CONST CAP_PROP_XI_OUTPUT_DATA_PACKING_TYPE=464

--- Incoming ---
['const cv.CAP_PROP_XI_IS_COOLED', '465', [], [], None]
ok: CONST CAP_PROP_XI_IS_COOLED=465

--- Incoming ---
['const cv.CAP_PROP_XI_COOLING', '466', [], [], None]
ok: CONST CAP_PROP_XI_COOLING=466

--- Incoming ---
['const cv.CAP_PROP_XI_TARGET_TEMP', '467', [], [], None]
ok: CONST CAP_PROP_XI_TARGET_TEMP=467

--- Incoming ---
['const cv.CAP_PROP_XI_CHIP_TEMP', '468', [], [], None]
ok: CONST CAP_PROP_XI_CHIP_TEMP=468

--- Incoming ---
['const cv.CAP_PROP_XI_HOUS_TEMP', '469', [], [], None]
ok: CONST CAP_PROP_XI_HOUS_TEMP=469

--- Incoming ---
['const cv.CAP_PROP_XI_HOUS_BACK_SIDE_TEMP', '590', [], [], None]
ok: CONST CAP_PROP_XI_HOUS_BACK_SIDE_TEMP=590

--- Incoming ---
['const cv.CAP_PROP_XI_SENSOR_BOARD_TEMP', '596', [], [], None]
ok: CONST CAP_PROP_XI_SENSOR_BOARD_TEMP=596

--- Incoming ---
['const cv.CAP_PROP_XI_CMS', '470', [], [], None]
ok: CONST CAP_PROP_XI_CMS=470

--- Incoming ---
['const cv.CAP_PROP_XI_APPLY_CMS', '471', [], [], None]
ok: CONST CAP_PROP_XI_APPLY_CMS=471

--- Incoming ---
['const cv.CAP_PROP_XI_IMAGE_IS_COLOR', '474', [], [], None]
ok: CONST CAP_PROP_XI_IMAGE_IS_COLOR=474

--- Incoming ---
['const cv.CAP_PROP_XI_COLOR_FILTER_ARRAY', '475', [], [], None]
ok: CONST CAP_PROP_XI_COLOR_FILTER_ARRAY=475

--- Incoming ---
['const cv.CAP_PROP_XI_GAMMAY', '476', [], [], None]
ok: CONST CAP_PROP_XI_GAMMAY=476

--- Incoming ---
['const cv.CAP_PROP_XI_GAMMAC', '477', [], [], None]
ok: CONST CAP_PROP_XI_GAMMAC=477

--- Incoming ---
['const cv.CAP_PROP_XI_SHARPNESS', '478', [], [], None]
ok: CONST CAP_PROP_XI_SHARPNESS=478

--- Incoming ---
['const cv.CAP_PROP_XI_CC_MATRIX_00', '479', [], [], None]
ok: CONST CAP_PROP_XI_CC_MATRIX_00=479

--- Incoming ---
['const cv.CAP_PROP_XI_CC_MATRIX_01', '480', [], [], None]
ok: CONST CAP_PROP_XI_CC_MATRIX_01=480

--- Incoming ---
['const cv.CAP_PROP_XI_CC_MATRIX_02', '481', [], [], None]
ok: CONST CAP_PROP_XI_CC_MATRIX_02=481

--- Incoming ---
['const cv.CAP_PROP_XI_CC_MATRIX_03', '482', [], [], None]
ok: CONST CAP_PROP_XI_CC_MATRIX_03=482

--- Incoming ---
['const cv.CAP_PROP_XI_CC_MATRIX_10', '483', [], [], None]
ok: CONST CAP_PROP_XI_CC_MATRIX_10=483

--- Incoming ---
['const cv.CAP_PROP_XI_CC_MATRIX_11', '484', [], [], None]
ok: CONST CAP_PROP_XI_CC_MATRIX_11=484

--- Incoming ---
['const cv.CAP_PROP_XI_CC_MATRIX_12', '485', [], [], None]
ok: CONST CAP_PROP_XI_CC_MATRIX_12=485

--- Incoming ---
['const cv.CAP_PROP_XI_CC_MATRIX_13', '486', [], [], None]
ok: CONST CAP_PROP_XI_CC_MATRIX_13=486

--- Incoming ---
['const cv.CAP_PROP_XI_CC_MATRIX_20', '487', [], [], None]
ok: CONST CAP_PROP_XI_CC_MATRIX_20=487

--- Incoming ---
['const cv.CAP_PROP_XI_CC_MATRIX_21', '488', [], [], None]
ok: CONST CAP_PROP_XI_CC_MATRIX_21=488

--- Incoming ---
['const cv.CAP_PROP_XI_CC_MATRIX_22', '489', [], [], None]
ok: CONST CAP_PROP_XI_CC_MATRIX_22=489

--- Incoming ---
['const cv.CAP_PROP_XI_CC_MATRIX_23', '490', [], [], None]
ok: CONST CAP_PROP_XI_CC_MATRIX_23=490

--- Incoming ---
['const cv.CAP_PROP_XI_CC_MATRIX_30', '491', [], [], None]
ok: CONST CAP_PROP_XI_CC_MATRIX_30=491

--- Incoming ---
['const cv.CAP_PROP_XI_CC_MATRIX_31', '492', [], [], None]
ok: CONST CAP_PROP_XI_CC_MATRIX_31=492

--- Incoming ---
['const cv.CAP_PROP_XI_CC_MATRIX_32', '493', [], [], None]
ok: CONST CAP_PROP_XI_CC_MATRIX_32=493

--- Incoming ---
['const cv.CAP_PROP_XI_CC_MATRIX_33', '494', [], [], None]
ok: CONST CAP_PROP_XI_CC_MATRIX_33=494

--- Incoming ---
['const cv.CAP_PROP_XI_DEFAULT_CC_MATRIX', '495', [], [], None]
ok: CONST CAP_PROP_XI_DEFAULT_CC_MATRIX=495

--- Incoming ---
['const cv.CAP_PROP_XI_TRG_SELECTOR', '498', [], [], None]
ok: CONST CAP_PROP_XI_TRG_SELECTOR=498

--- Incoming ---
['const cv.CAP_PROP_XI_ACQ_FRAME_BURST_COUNT', '499', [], [], None]
ok: CONST CAP_PROP_XI_ACQ_FRAME_BURST_COUNT=499

--- Incoming ---
['const cv.CAP_PROP_XI_DEBOUNCE_EN', '507', [], [], None]
ok: CONST CAP_PROP_XI_DEBOUNCE_EN=507

--- Incoming ---
['const cv.CAP_PROP_XI_DEBOUNCE_T0', '508', [], [], None]
ok: CONST CAP_PROP_XI_DEBOUNCE_T0=508

--- Incoming ---
['const cv.CAP_PROP_XI_DEBOUNCE_T1', '509', [], [], None]
ok: CONST CAP_PROP_XI_DEBOUNCE_T1=509

--- Incoming ---
['const cv.CAP_PROP_XI_DEBOUNCE_POL', '510', [], [], None]
ok: CONST CAP_PROP_XI_DEBOUNCE_POL=510

--- Incoming ---
['const cv.CAP_PROP_XI_LENS_MODE', '511', [], [], None]
ok: CONST CAP_PROP_XI_LENS_MODE=511

--- Incoming ---
['const cv.CAP_PROP_XI_LENS_APERTURE_VALUE', '512', [], [], None]
ok: CONST CAP_PROP_XI_LENS_APERTURE_VALUE=512

--- Incoming ---
['const cv.CAP_PROP_XI_LENS_FOCUS_MOVEMENT_VALUE', '513', [], [], None]
ok: CONST CAP_PROP_XI_LENS_FOCUS_MOVEMENT_VALUE=513

--- Incoming ---
['const cv.CAP_PROP_XI_LENS_FOCUS_MOVE', '514', [], [], None]
ok: CONST CAP_PROP_XI_LENS_FOCUS_MOVE=514

--- Incoming ---
['const cv.CAP_PROP_XI_LENS_FOCUS_DISTANCE', '515', [], [], None]
ok: CONST CAP_PROP_XI_LENS_FOCUS_DISTANCE=515

--- Incoming ---
['const cv.CAP_PROP_XI_LENS_FOCAL_LENGTH', '516', [], [], None]
ok: CONST CAP_PROP_XI_LENS_FOCAL_LENGTH=516

--- Incoming ---
['const cv.CAP_PROP_XI_LENS_FEATURE_SELECTOR', '517', [], [], None]
ok: CONST CAP_PROP_XI_LENS_FEATURE_SELECTOR=517

--- Incoming ---
['const cv.CAP_PROP_XI_LENS_FEATURE', '518', [], [], None]
ok: CONST CAP_PROP_XI_LENS_FEATURE=518

--- Incoming ---
['const cv.CAP_PROP_XI_DEVICE_MODEL_ID', '521', [], [], None]
ok: CONST CAP_PROP_XI_DEVICE_MODEL_ID=521

--- Incoming ---
['const cv.CAP_PROP_XI_DEVICE_SN', '522', [], [], None]
ok: CONST CAP_PROP_XI_DEVICE_SN=522

--- Incoming ---
['const cv.CAP_PROP_XI_IMAGE_DATA_FORMAT_RGB32_ALPHA', '529', [], [], None]
ok: CONST CAP_PROP_XI_IMAGE_DATA_FORMAT_RGB32_ALPHA=529

--- Incoming ---
['const cv.CAP_PROP_XI_IMAGE_PAYLOAD_SIZE', '530', [], [], None]
ok: CONST CAP_PROP_XI_IMAGE_PAYLOAD_SIZE=530

--- Incoming ---
['const cv.CAP_PROP_XI_TRANSPORT_PIXEL_FORMAT', '531', [], [], None]
ok: CONST CAP_PROP_XI_TRANSPORT_PIXEL_FORMAT=531

--- Incoming ---
['const cv.CAP_PROP_XI_SENSOR_CLOCK_FREQ_HZ', '532', [], [], None]
ok: CONST CAP_PROP_XI_SENSOR_CLOCK_FREQ_HZ=532

--- Incoming ---
['const cv.CAP_PROP_XI_SENSOR_CLOCK_FREQ_INDEX', '533', [], [], None]
ok: CONST CAP_PROP_XI_SENSOR_CLOCK_FREQ_INDEX=533

--- Incoming ---
['const cv.CAP_PROP_XI_SENSOR_OUTPUT_CHANNEL_COUNT', '534', [], [], None]
ok: CONST CAP_PROP_XI_SENSOR_OUTPUT_CHANNEL_COUNT=534

--- Incoming ---
['const cv.CAP_PROP_XI_FRAMERATE', '535', [], [], None]
ok: CONST CAP_PROP_XI_FRAMERATE=535

--- Incoming ---
['const cv.CAP_PROP_XI_COUNTER_SELECTOR', '536', [], [], None]
ok: CONST CAP_PROP_XI_COUNTER_SELECTOR=536

--- Incoming ---
['const cv.CAP_PROP_XI_COUNTER_VALUE', '537', [], [], None]
ok: CONST CAP_PROP_XI_COUNTER_VALUE=537

--- Incoming ---
['const cv.CAP_PROP_XI_ACQ_TIMING_MODE', '538', [], [], None]
ok: CONST CAP_PROP_XI_ACQ_TIMING_MODE=538

--- Incoming ---
['const cv.CAP_PROP_XI_AVAILABLE_BANDWIDTH', '539', [], [], None]
ok: CONST CAP_PROP_XI_AVAILABLE_BANDWIDTH=539

--- Incoming ---
['const cv.CAP_PROP_XI_BUFFER_POLICY', '540', [], [], None]
ok: CONST CAP_PROP_XI_BUFFER_POLICY=540

--- Incoming ---
['const cv.CAP_PROP_XI_LUT_EN', '541', [], [], None]
ok: CONST CAP_PROP_XI_LUT_EN=541

--- Incoming ---
['const cv.CAP_PROP_XI_LUT_INDEX', '542', [], [], None]
ok: CONST CAP_PROP_XI_LUT_INDEX=542

--- Incoming ---
['const cv.CAP_PROP_XI_LUT_VALUE', '543', [], [], None]
ok: CONST CAP_PROP_XI_LUT_VALUE=543

--- Incoming ---
['const cv.CAP_PROP_XI_TRG_DELAY', '544', [], [], None]
ok: CONST CAP_PROP_XI_TRG_DELAY=544

--- Incoming ---
['const cv.CAP_PROP_XI_TS_RST_MODE', '545', [], [], None]
ok: CONST CAP_PROP_XI_TS_RST_MODE=545

--- Incoming ---
['const cv.CAP_PROP_XI_TS_RST_SOURCE', '546', [], [], None]
ok: CONST CAP_PROP_XI_TS_RST_SOURCE=546

--- Incoming ---
['const cv.CAP_PROP_XI_IS_DEVICE_EXIST', '547', [], [], None]
ok: CONST CAP_PROP_XI_IS_DEVICE_EXIST=547

--- Incoming ---
['const cv.CAP_PROP_XI_ACQ_BUFFER_SIZE', '548', [], [], None]
ok: CONST CAP_PROP_XI_ACQ_BUFFER_SIZE=548

--- Incoming ---
['const cv.CAP_PROP_XI_ACQ_BUFFER_SIZE_UNIT', '549', [], [], None]
ok: CONST CAP_PROP_XI_ACQ_BUFFER_SIZE_UNIT=549

--- Incoming ---
['const cv.CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_SIZE', '550', [], [], None]
ok: CONST CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_SIZE=550

--- Incoming ---
['const cv.CAP_PROP_XI_BUFFERS_QUEUE_SIZE', '551', [], [], None]
ok: CONST CAP_PROP_XI_BUFFERS_QUEUE_SIZE=551

--- Incoming ---
['const cv.CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_COMMIT', '552', [], [], None]
ok: CONST CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_COMMIT=552

--- Incoming ---
['const cv.CAP_PROP_XI_RECENT_FRAME', '553', [], [], None]
ok: CONST CAP_PROP_XI_RECENT_FRAME=553

--- Incoming ---
['const cv.CAP_PROP_XI_DEVICE_RESET', '554', [], [], None]
ok: CONST CAP_PROP_XI_DEVICE_RESET=554

--- Incoming ---
['const cv.CAP_PROP_XI_COLUMN_FPN_CORRECTION', '555', [], [], None]
ok: CONST CAP_PROP_XI_COLUMN_FPN_CORRECTION=555

--- Incoming ---
['const cv.CAP_PROP_XI_ROW_FPN_CORRECTION', '591', [], [], None]
ok: CONST CAP_PROP_XI_ROW_FPN_CORRECTION=591

--- Incoming ---
['const cv.CAP_PROP_XI_SENSOR_MODE', '558', [], [], None]
ok: CONST CAP_PROP_XI_SENSOR_MODE=558

--- Incoming ---
['const cv.CAP_PROP_XI_HDR', '559', [], [], None]
ok: CONST CAP_PROP_XI_HDR=559

--- Incoming ---
['const cv.CAP_PROP_XI_HDR_KNEEPOINT_COUNT', '560', [], [], None]
ok: CONST CAP_PROP_XI_HDR_KNEEPOINT_COUNT=560

--- Incoming ---
['const cv.CAP_PROP_XI_HDR_T1', '561', [], [], None]
ok: CONST CAP_PROP_XI_HDR_T1=561

--- Incoming ---
['const cv.CAP_PROP_XI_HDR_T2', '562', [], [], None]
ok: CONST CAP_PROP_XI_HDR_T2=562

--- Incoming ---
['const cv.CAP_PROP_XI_KNEEPOINT1', '563', [], [], None]
ok: CONST CAP_PROP_XI_KNEEPOINT1=563

--- Incoming ---
['const cv.CAP_PROP_XI_KNEEPOINT2', '564', [], [], None]
ok: CONST CAP_PROP_XI_KNEEPOINT2=564

--- Incoming ---
['const cv.CAP_PROP_XI_IMAGE_BLACK_LEVEL', '565', [], [], None]
ok: CONST CAP_PROP_XI_IMAGE_BLACK_LEVEL=565

--- Incoming ---
['const cv.CAP_PROP_XI_HW_REVISION', '571', [], [], None]
ok: CONST CAP_PROP_XI_HW_REVISION=571

--- Incoming ---
['const cv.CAP_PROP_XI_DEBUG_LEVEL', '572', [], [], None]
ok: CONST CAP_PROP_XI_DEBUG_LEVEL=572

--- Incoming ---
['const cv.CAP_PROP_XI_AUTO_BANDWIDTH_CALCULATION', '573', [], [], None]
ok: CONST CAP_PROP_XI_AUTO_BANDWIDTH_CALCULATION=573

--- Incoming ---
['const cv.CAP_PROP_XI_FFS_FILE_ID', '594', [], [], None]
ok: CONST CAP_PROP_XI_FFS_FILE_ID=594

--- Incoming ---
['const cv.CAP_PROP_XI_FFS_FILE_SIZE', '580', [], [], None]
ok: CONST CAP_PROP_XI_FFS_FILE_SIZE=580

--- Incoming ---
['const cv.CAP_PROP_XI_FREE_FFS_SIZE', '581', [], [], None]
ok: CONST CAP_PROP_XI_FREE_FFS_SIZE=581

--- Incoming ---
['const cv.CAP_PROP_XI_USED_FFS_SIZE', '582', [], [], None]
ok: CONST CAP_PROP_XI_USED_FFS_SIZE=582

--- Incoming ---
['const cv.CAP_PROP_XI_FFS_ACCESS_KEY', '583', [], [], None]
ok: CONST CAP_PROP_XI_FFS_ACCESS_KEY=583

--- Incoming ---
['const cv.CAP_PROP_XI_SENSOR_FEATURE_SELECTOR', '585', [], [], None]
ok: CONST CAP_PROP_XI_SENSOR_FEATURE_SELECTOR=585

--- Incoming ---
['const cv.CAP_PROP_XI_SENSOR_FEATURE_VALUE', '586', [], [], None]
ok: CONST CAP_PROP_XI_SENSOR_FEATURE_VALUE=586

--- Incoming ---
['const cv.CAP_PROP_IOS_DEVICE_FOCUS', '9001', [], [], None]
ok: CONST CAP_PROP_IOS_DEVICE_FOCUS=9001

--- Incoming ---
['const cv.CAP_PROP_IOS_DEVICE_EXPOSURE', '9002', [], [], None]
ok: CONST CAP_PROP_IOS_DEVICE_EXPOSURE=9002

--- Incoming ---
['const cv.CAP_PROP_IOS_DEVICE_FLASH', '9003', [], [], None]
ok: CONST CAP_PROP_IOS_DEVICE_FLASH=9003

--- Incoming ---
['const cv.CAP_PROP_IOS_DEVICE_WHITEBALANCE', '9004', [], [], None]
ok: CONST CAP_PROP_IOS_DEVICE_WHITEBALANCE=9004

--- Incoming ---
['const cv.CAP_PROP_IOS_DEVICE_TORCH', '9005', [], [], None]
ok: CONST CAP_PROP_IOS_DEVICE_TORCH=9005

--- Incoming ---
['const cv.CAP_PROP_GIGA_FRAME_OFFSET_X', '10001', [], [], None]
ok: CONST CAP_PROP_GIGA_FRAME_OFFSET_X=10001

--- Incoming ---
['const cv.CAP_PROP_GIGA_FRAME_OFFSET_Y', '10002', [], [], None]
ok: CONST CAP_PROP_GIGA_FRAME_OFFSET_Y=10002

--- Incoming ---
['const cv.CAP_PROP_GIGA_FRAME_WIDTH_MAX', '10003', [], [], None]
ok: CONST CAP_PROP_GIGA_FRAME_WIDTH_MAX=10003

--- Incoming ---
['const cv.CAP_PROP_GIGA_FRAME_HEIGH_MAX', '10004', [], [], None]
ok: CONST CAP_PROP_GIGA_FRAME_HEIGH_MAX=10004

--- Incoming ---
['const cv.CAP_PROP_GIGA_FRAME_SENS_WIDTH', '10005', [], [], None]
ok: CONST CAP_PROP_GIGA_FRAME_SENS_WIDTH=10005

--- Incoming ---
['const cv.CAP_PROP_GIGA_FRAME_SENS_HEIGH', '10006', [], [], None]
ok: CONST CAP_PROP_GIGA_FRAME_SENS_HEIGH=10006

--- Incoming ---
['const cv.CAP_PROP_INTELPERC_PROFILE_COUNT', '11001', [], [], None]
ok: CONST CAP_PROP_INTELPERC_PROFILE_COUNT=11001

--- Incoming ---
['const cv.CAP_PROP_INTELPERC_PROFILE_IDX', '11002', [], [], None]
ok: CONST CAP_PROP_INTELPERC_PROFILE_IDX=11002

--- Incoming ---
[   'const cv.CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE',
    '11003',
    [],
    [],
    None]
ok: CONST CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE=11003

--- Incoming ---
['const cv.CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE', '11004', [], [], None]
ok: CONST CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE=11004

--- Incoming ---
[   'const cv.CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD',
    '11005',
    [],
    [],
    None]
ok: CONST CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD=11005

--- Incoming ---
['const cv.CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ', '11006', [], [], None]
ok: CONST CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ=11006

--- Incoming ---
['const cv.CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT', '11007', [], [], None]
ok: CONST CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT=11007

--- Incoming ---
['const cv.CAP_INTELPERC_DEPTH_GENERATOR', '1 << 29', [], [], None]
ok: CONST CAP_INTELPERC_DEPTH_GENERATOR=1 << 29

--- Incoming ---
['const cv.CAP_INTELPERC_IMAGE_GENERATOR', '1 << 28', [], [], None]
ok: CONST CAP_INTELPERC_IMAGE_GENERATOR=1 << 28

--- Incoming ---
[   'const cv.CAP_INTELPERC_GENERATORS_MASK',
    'CAP_INTELPERC_DEPTH_GENERATOR + CAP_INTELPERC_IMAGE_GENERATOR',
    [],
    [],
    None]
ok: CONST CAP_INTELPERC_GENERATORS_MASK=CAP_INTELPERC_DEPTH_GENERATOR + CAP_INTELPERC_IMAGE_GENERATOR

--- Incoming ---
['const cv.CAP_INTELPERC_DEPTH_MAP', '0', [], [], None]
ok: CONST CAP_INTELPERC_DEPTH_MAP=0

--- Incoming ---
['const cv.CAP_INTELPERC_UVDEPTH_MAP', '1', [], [], None]
ok: CONST CAP_INTELPERC_UVDEPTH_MAP=1

--- Incoming ---
['const cv.CAP_INTELPERC_IR_MAP', '2', [], [], None]
ok: CONST CAP_INTELPERC_IR_MAP=2

--- Incoming ---
['const cv.CAP_INTELPERC_IMAGE', '3', [], [], None]
ok: CONST CAP_INTELPERC_IMAGE=3

--- Incoming ---
['const cv.CAP_PROP_GPHOTO2_PREVIEW', '17001', [], [], None]
ok: CONST CAP_PROP_GPHOTO2_PREVIEW=17001

--- Incoming ---
['const cv.CAP_PROP_GPHOTO2_WIDGET_ENUMERATE', '17002', [], [], None]
ok: CONST CAP_PROP_GPHOTO2_WIDGET_ENUMERATE=17002

--- Incoming ---
['const cv.CAP_PROP_GPHOTO2_RELOAD_CONFIG', '17003', [], [], None]
ok: CONST CAP_PROP_GPHOTO2_RELOAD_CONFIG=17003

--- Incoming ---
['const cv.CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE', '17004', [], [], None]
ok: CONST CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE=17004

--- Incoming ---
['const cv.CAP_PROP_GPHOTO2_COLLECT_MSGS', '17005', [], [], None]
ok: CONST CAP_PROP_GPHOTO2_COLLECT_MSGS=17005

--- Incoming ---
['const cv.CAP_PROP_GPHOTO2_FLUSH_MSGS', '17006', [], [], None]
ok: CONST CAP_PROP_GPHOTO2_FLUSH_MSGS=17006

--- Incoming ---
['const cv.CAP_PROP_SPEED', '17007', [], [], None]
ok: CONST CAP_PROP_SPEED=17007

--- Incoming ---
['const cv.CAP_PROP_APERTURE', '17008', [], [], None]
ok: CONST CAP_PROP_APERTURE=17008

--- Incoming ---
['const cv.CAP_PROP_EXPOSUREPROGRAM', '17009', [], [], None]
ok: CONST CAP_PROP_EXPOSUREPROGRAM=17009

--- Incoming ---
['const cv.CAP_PROP_VIEWFINDER', '17010', [], [], None]
ok: CONST CAP_PROP_VIEWFINDER=17010

--- Incoming ---
['const cv.CAP_PROP_IMAGES_BASE', '18000', [], [], None]
ok: CONST CAP_PROP_IMAGES_BASE=18000

--- Incoming ---
['const cv.CAP_PROP_IMAGES_LAST', '19000', [], [], None]
ok: CONST CAP_PROP_IMAGES_LAST=19000

--- Incoming ---
['class cv.VideoCapture', '', [], [], None]
ok: class CLASS cv::.VideoCapture : , name: VideoCapture, base: 

--- Incoming ---
['cv.VideoCapture.VideoCapture', '', [], [], None]
ok: FUNC < cv.VideoCapture.VideoCapture []>

--- Incoming ---
[   'cv.VideoCapture.VideoCapture',
    '',
    [],
    [['String', 'filename', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.VideoCapture.VideoCapture [ARG String filename=]>

--- Incoming ---
[   'cv.VideoCapture.VideoCapture',
    '',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref']],
        ['int', 'apiPreference', '', []]],
    None]
ok: FUNC < cv.VideoCapture.VideoCapture [ARG String filename=, ARG int apiPreference=]>

--- Incoming ---
['cv.VideoCapture.VideoCapture', '', [], [['int', 'index', '', []]], None]
ok: FUNC < cv.VideoCapture.VideoCapture [ARG int index=]>

--- Incoming ---
[   'cv.VideoCapture.open',
    'bool',
    ['/V'],
    [['String', 'filename', '', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv.VideoCapture.open [ARG String filename=]>

--- Incoming ---
['cv.VideoCapture.open', 'bool', ['/V'], [['int', 'index', '', []]], 'bool']
ok: FUNC <bool cv.VideoCapture.open [ARG int index=]>

--- Incoming ---
[   'cv.VideoCapture.open',
    'bool',
    [],
    [['int', 'cameraNum', '', []], ['int', 'apiPreference', '', []]],
    'bool']
ok: FUNC <bool cv.VideoCapture.open [ARG int cameraNum=, ARG int apiPreference=]>

--- Incoming ---
['cv.VideoCapture.isOpened', 'bool', ['/C', '/V'], [], 'bool']
ok: FUNC <bool cv.VideoCapture.isOpened []>

--- Incoming ---
['cv.VideoCapture.release', 'void', ['/V'], [], 'void']
ok: FUNC <void cv.VideoCapture.release []>

--- Incoming ---
['cv.VideoCapture.grab', 'bool', ['/V'], [], 'bool']
ok: FUNC <bool cv.VideoCapture.grab []>

--- Incoming ---
[   'cv.VideoCapture.retrieve',
    'bool',
    ['/V'],
    [['Mat', 'image', '', ['/O']], ['int', 'flag', '0', []]],
    'bool']
ok: FUNC <bool cv.VideoCapture.retrieve [ARG Mat image=, ARG int flag=0]>

--- Incoming ---
['cv.VideoCapture.read', 'bool', ['/V'], [['Mat', 'image', '', ['/O']]], 'bool']
ok: FUNC <bool cv.VideoCapture.read [ARG Mat image=]>

--- Incoming ---
[   'cv.VideoCapture.set',
    'bool',
    ['/V'],
    [['int', 'propId', '', []], ['double', 'value', '', []]],
    'bool']
ok: FUNC <bool cv.VideoCapture.set [ARG int propId=, ARG double value=]>

--- Incoming ---
[   'cv.VideoCapture.get',
    'double',
    ['/C', '/V'],
    [['int', 'propId', '', []]],
    'double']
ok: FUNC <double cv.VideoCapture.get [ARG int propId=]>

--- Incoming ---
[   'cv.VideoCapture.open',
    'bool',
    ['/V'],
    [   ['String', 'filename', '', ['/C', '/Ref']],
        ['int', 'apiPreference', '', []]],
    'bool']
ok: FUNC <bool cv.VideoCapture.open [ARG String filename=, ARG int apiPreference=]>

--- Incoming ---
['class cv.VideoWriter', '', [], [], None]
ok: class CLASS cv::.VideoWriter : , name: VideoWriter, base: 

--- Incoming ---
['cv.VideoWriter.VideoWriter', '', [], [], None]
ok: FUNC < cv.VideoWriter.VideoWriter []>

--- Incoming ---
[   'cv.VideoWriter.VideoWriter',
    '',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref']],
        ['int', 'fourcc', '', []],
        ['double', 'fps', '', []],
        ['Size', 'frameSize', '', []],
        ['bool', 'isColor', 'true', []]],
    None]
ok: FUNC < cv.VideoWriter.VideoWriter [ARG String filename=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG bool isColor=true]>

--- Incoming ---
[   'cv.VideoWriter.VideoWriter',
    '',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref']],
        ['int', 'apiPreference', '', []],
        ['int', 'fourcc', '', []],
        ['double', 'fps', '', []],
        ['Size', 'frameSize', '', []],
        ['bool', 'isColor', 'true', []]],
    None]
ok: FUNC < cv.VideoWriter.VideoWriter [ARG String filename=, ARG int apiPreference=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG bool isColor=true]>

--- Incoming ---
[   'cv.VideoWriter.open',
    'bool',
    ['/V'],
    [   ['String', 'filename', '', ['/C', '/Ref']],
        ['int', 'fourcc', '', []],
        ['double', 'fps', '', []],
        ['Size', 'frameSize', '', []],
        ['bool', 'isColor', 'true', []]],
    'bool']
ok: FUNC <bool cv.VideoWriter.open [ARG String filename=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG bool isColor=true]>

--- Incoming ---
[   'cv.VideoWriter.open',
    'bool',
    [],
    [   ['String', 'filename', '', ['/C', '/Ref']],
        ['int', 'apiPreference', '', []],
        ['int', 'fourcc', '', []],
        ['double', 'fps', '', []],
        ['Size', 'frameSize', '', []],
        ['bool', 'isColor', 'true', []]],
    'bool']
ok: FUNC <bool cv.VideoWriter.open [ARG String filename=, ARG int apiPreference=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG bool isColor=true]>

--- Incoming ---
['cv.VideoWriter.isOpened', 'bool', ['/C', '/V'], [], 'bool']
ok: FUNC <bool cv.VideoWriter.isOpened []>

--- Incoming ---
['cv.VideoWriter.release', 'void', ['/V'], [], 'void']
ok: FUNC <void cv.VideoWriter.release []>

--- Incoming ---
[   'cv.VideoWriter.write',
    'void',
    ['/V'],
    [['Mat', 'image', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.VideoWriter.write [ARG Mat image=]>

--- Incoming ---
[   'cv.VideoWriter.set',
    'bool',
    ['/V'],
    [['int', 'propId', '', []], ['double', 'value', '', []]],
    'bool']
ok: FUNC <bool cv.VideoWriter.set [ARG int propId=, ARG double value=]>

--- Incoming ---
[   'cv.VideoWriter.get',
    'double',
    ['/C', '/V'],
    [['int', 'propId', '', []]],
    'double']
ok: FUNC <double cv.VideoWriter.get [ARG int propId=]>

--- Incoming ---
[   'cv.VideoWriter.fourcc',
    'int',
    ['/S'],
    [   ['char', 'c1', '', []],
        ['char', 'c2', '', []],
        ['char', 'c3', '', []],
        ['char', 'c4', '', []]],
    'int']
ok: FUNC <int cv.VideoWriter.fourcc [ARG char c1=, ARG char c2=, ARG char c3=, ARG char c4=]>


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/videoio\include\opencv2\videoio\videoio.hpp =====
Namespaces: {'', 'cv'}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/videoio\include\opencv2\videoio\videoio.hpp


===== Generating... =====
CLASS ::.Videoio : 
[CONST CV_CAP_ANY=0, CONST CV_CAP_MIL=100, CONST CV_CAP_VFW=200, CONST CV_CAP_V4L=200, CONST CV_CAP_V4L2=200, CONST CV_CAP_FIREWARE=300, CONST CV_CAP_FIREWIRE=300, CONST CV_CAP_IEEE1394=300, CONST CV_CAP_DC1394=300, CONST CV_CAP_CMU1394=300, CONST CV_CAP_STEREO=400, CONST CV_CAP_TYZX=400, CONST CV_TYZX_LEFT=400, CONST CV_TYZX_RIGHT=401, CONST CV_TYZX_COLOR=402, CONST CV_TYZX_Z=403, CONST CV_CAP_QT=500, CONST CV_CAP_UNICAP=600, CONST CV_CAP_DSHOW=700, CONST CV_CAP_MSMF=1400, CONST CV_CAP_PVAPI=800, CONST CV_CAP_OPENNI=900, CONST CV_CAP_OPENNI_ASUS=910, CONST CV_CAP_ANDROID=1000, CONST CV_CAP_ANDROID_BACK=CV_CAP_ANDROID+99, CONST CV_CAP_ANDROID_FRONT=CV_CAP_ANDROID+98, CONST CV_CAP_XIAPI=1100, CONST CV_CAP_AVFOUNDATION=1200, CONST CV_CAP_GIGANETIX=1300, CONST CV_CAP_INTELPERC=1500, CONST CV_CAP_OPENNI2=1600, CONST CV_CAP_GPHOTO2=1700, CONST CV_CAP_GSTREAMER=1800, CONST CV_CAP_FFMPEG=1900, CONST CV_CAP_IMAGES=2000, CONST CV_CAP_ARAVIS=2100, CONST CV_CAP_PROP_DC1394_OFF=-4, CONST CV_CAP_PROP_DC1394_MODE_MANUAL=-3, CONST CV_CAP_PROP_DC1394_MODE_AUTO=-2, CONST CV_CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO=-1, CONST CV_CAP_PROP_POS_MSEC=0, CONST CV_CAP_PROP_POS_FRAMES=1, CONST CV_CAP_PROP_POS_AVI_RATIO=2, CONST CV_CAP_PROP_FRAME_WIDTH=3, CONST CV_CAP_PROP_FRAME_HEIGHT=4, CONST CV_CAP_PROP_FPS=5, CONST CV_CAP_PROP_FOURCC=6, CONST CV_CAP_PROP_FRAME_COUNT=7, CONST CV_CAP_PROP_FORMAT=8, CONST CV_CAP_PROP_MODE=9, CONST CV_CAP_PROP_BRIGHTNESS=10, CONST CV_CAP_PROP_CONTRAST=11, CONST CV_CAP_PROP_SATURATION=12, CONST CV_CAP_PROP_HUE=13, CONST CV_CAP_PROP_GAIN=14, CONST CV_CAP_PROP_EXPOSURE=15, CONST CV_CAP_PROP_CONVERT_RGB=16, CONST CV_CAP_PROP_WHITE_BALANCE_BLUE_U=17, CONST CV_CAP_PROP_RECTIFICATION=18, CONST CV_CAP_PROP_MONOCHROME=19, CONST CV_CAP_PROP_SHARPNESS=20, CONST CV_CAP_PROP_AUTO_EXPOSURE=21, CONST CV_CAP_PROP_GAMMA=22, CONST CV_CAP_PROP_TEMPERATURE=23, CONST CV_CAP_PROP_TRIGGER=24, CONST CV_CAP_PROP_TRIGGER_DELAY=25, CONST CV_CAP_PROP_WHITE_BALANCE_RED_V=26, CONST CV_CAP_PROP_ZOOM=27, CONST CV_CAP_PROP_FOCUS=28, CONST CV_CAP_PROP_GUID=29, CONST CV_CAP_PROP_ISO_SPEED=30, CONST CV_CAP_PROP_MAX_DC1394=31, CONST CV_CAP_PROP_BACKLIGHT=32, CONST CV_CAP_PROP_PAN=33, CONST CV_CAP_PROP_TILT=34, CONST CV_CAP_PROP_ROLL=35, CONST CV_CAP_PROP_IRIS=36, CONST CV_CAP_PROP_SETTINGS=37, CONST CV_CAP_PROP_BUFFERSIZE=38, CONST CV_CAP_PROP_AUTOFOCUS=39, CONST CV_CAP_PROP_SAR_NUM=40, CONST CV_CAP_PROP_SAR_DEN=41, CONST CV_CAP_PROP_AUTOGRAB=1024, CONST CV_CAP_PROP_SUPPORTED_PREVIEW_SIZES_STRING=1025, CONST CV_CAP_PROP_PREVIEW_FORMAT=1026, CONST CV_CAP_OPENNI_DEPTH_GENERATOR=1 << 31, CONST CV_CAP_OPENNI_IMAGE_GENERATOR=1 << 30, CONST CV_CAP_OPENNI_IR_GENERATOR=1 << 29, CONST CV_CAP_OPENNI_GENERATORS_MASK=CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_OPENNI_IMAGE_GENERATOR + CV_CAP_OPENNI_IR_GENERATOR, CONST CV_CAP_PROP_OPENNI_OUTPUT_MODE=100, CONST CV_CAP_PROP_OPENNI_FRAME_MAX_DEPTH=101, CONST CV_CAP_PROP_OPENNI_BASELINE=102, CONST CV_CAP_PROP_OPENNI_FOCAL_LENGTH=103, CONST CV_CAP_PROP_OPENNI_REGISTRATION=104, CONST CV_CAP_PROP_OPENNI_REGISTRATION_ON=CV_CAP_PROP_OPENNI_REGISTRATION, CONST CV_CAP_PROP_OPENNI_APPROX_FRAME_SYNC=105, CONST CV_CAP_PROP_OPENNI_MAX_BUFFER_SIZE=106, CONST CV_CAP_PROP_OPENNI_CIRCLE_BUFFER=107, CONST CV_CAP_PROP_OPENNI_MAX_TIME_DURATION=108, CONST CV_CAP_PROP_OPENNI_GENERATOR_PRESENT=109, CONST CV_CAP_PROP_OPENNI2_SYNC=110, CONST CV_CAP_PROP_OPENNI2_MIRROR=111, CONST CV_CAP_OPENNI_IMAGE_GENERATOR_PRESENT=CV_CAP_OPENNI_IMAGE_GENERATOR + CV_CAP_PROP_OPENNI_GENERATOR_PRESENT, CONST CV_CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE=CV_CAP_OPENNI_IMAGE_GENERATOR + CV_CAP_PROP_OPENNI_OUTPUT_MODE, CONST CV_CAP_OPENNI_DEPTH_GENERATOR_PRESENT=CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_GENERATOR_PRESENT, CONST CV_CAP_OPENNI_DEPTH_GENERATOR_BASELINE=CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_BASELINE, CONST CV_CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH=CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_FOCAL_LENGTH, CONST CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION=CV_CAP_OPENNI_DEPTH_GENERATOR + CV_CAP_PROP_OPENNI_REGISTRATION, CONST CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON=CV_CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION, CONST CV_CAP_OPENNI_IR_GENERATOR_PRESENT=CV_CAP_OPENNI_IR_GENERATOR + CV_CAP_PROP_OPENNI_GENERATOR_PRESENT, CONST CV_CAP_GSTREAMER_QUEUE_LENGTH=200, CONST CV_CAP_PROP_PVAPI_MULTICASTIP=300, CONST CV_CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE=301, CONST CV_CAP_PROP_PVAPI_DECIMATIONHORIZONTAL=302, CONST CV_CAP_PROP_PVAPI_DECIMATIONVERTICAL=303, CONST CV_CAP_PROP_PVAPI_BINNINGX=304, CONST CV_CAP_PROP_PVAPI_BINNINGY=305, CONST CV_CAP_PROP_PVAPI_PIXELFORMAT=306, CONST CV_CAP_PROP_XI_DOWNSAMPLING=400, CONST CV_CAP_PROP_XI_DATA_FORMAT=401, CONST CV_CAP_PROP_XI_OFFSET_X=402, CONST CV_CAP_PROP_XI_OFFSET_Y=403, CONST CV_CAP_PROP_XI_TRG_SOURCE=404, CONST CV_CAP_PROP_XI_TRG_SOFTWARE=405, CONST CV_CAP_PROP_XI_GPI_SELECTOR=406, CONST CV_CAP_PROP_XI_GPI_MODE=407, CONST CV_CAP_PROP_XI_GPI_LEVEL=408, CONST CV_CAP_PROP_XI_GPO_SELECTOR=409, CONST CV_CAP_PROP_XI_GPO_MODE=410, CONST CV_CAP_PROP_XI_LED_SELECTOR=411, CONST CV_CAP_PROP_XI_LED_MODE=412, CONST CV_CAP_PROP_XI_MANUAL_WB=413, CONST CV_CAP_PROP_XI_AUTO_WB=414, CONST CV_CAP_PROP_XI_AEAG=415, CONST CV_CAP_PROP_XI_EXP_PRIORITY=416, CONST CV_CAP_PROP_XI_AE_MAX_LIMIT=417, CONST CV_CAP_PROP_XI_AG_MAX_LIMIT=418, CONST CV_CAP_PROP_XI_AEAG_LEVEL=419, CONST CV_CAP_PROP_XI_TIMEOUT=420, CONST CV_CAP_PROP_XI_EXPOSURE=421, CONST CV_CAP_PROP_XI_EXPOSURE_BURST_COUNT=422, CONST CV_CAP_PROP_XI_GAIN_SELECTOR=423, CONST CV_CAP_PROP_XI_GAIN=424, CONST CV_CAP_PROP_XI_DOWNSAMPLING_TYPE=426, CONST CV_CAP_PROP_XI_BINNING_SELECTOR=427, CONST CV_CAP_PROP_XI_BINNING_VERTICAL=428, CONST CV_CAP_PROP_XI_BINNING_HORIZONTAL=429, CONST CV_CAP_PROP_XI_BINNING_PATTERN=430, CONST CV_CAP_PROP_XI_DECIMATION_SELECTOR=431, CONST CV_CAP_PROP_XI_DECIMATION_VERTICAL=432, CONST CV_CAP_PROP_XI_DECIMATION_HORIZONTAL=433, CONST CV_CAP_PROP_XI_DECIMATION_PATTERN=434, CONST CV_CAP_PROP_XI_TEST_PATTERN_GENERATOR_SELECTOR=587, CONST CV_CAP_PROP_XI_TEST_PATTERN=588, CONST CV_CAP_PROP_XI_IMAGE_DATA_FORMAT=435, CONST CV_CAP_PROP_XI_SHUTTER_TYPE=436, CONST CV_CAP_PROP_XI_SENSOR_TAPS=437, CONST CV_CAP_PROP_XI_AEAG_ROI_OFFSET_X=439, CONST CV_CAP_PROP_XI_AEAG_ROI_OFFSET_Y=440, CONST CV_CAP_PROP_XI_AEAG_ROI_WIDTH=441, CONST CV_CAP_PROP_XI_AEAG_ROI_HEIGHT=442, CONST CV_CAP_PROP_XI_BPC=445, CONST CV_CAP_PROP_XI_WB_KR=448, CONST CV_CAP_PROP_XI_WB_KG=449, CONST CV_CAP_PROP_XI_WB_KB=450, CONST CV_CAP_PROP_XI_WIDTH=451, CONST CV_CAP_PROP_XI_HEIGHT=452, CONST CV_CAP_PROP_XI_REGION_SELECTOR=589, CONST CV_CAP_PROP_XI_REGION_MODE=595, CONST CV_CAP_PROP_XI_LIMIT_BANDWIDTH=459, CONST CV_CAP_PROP_XI_SENSOR_DATA_BIT_DEPTH=460, CONST CV_CAP_PROP_XI_OUTPUT_DATA_BIT_DEPTH=461, CONST CV_CAP_PROP_XI_IMAGE_DATA_BIT_DEPTH=462, CONST CV_CAP_PROP_XI_OUTPUT_DATA_PACKING=463, CONST CV_CAP_PROP_XI_OUTPUT_DATA_PACKING_TYPE=464, CONST CV_CAP_PROP_XI_IS_COOLED=465, CONST CV_CAP_PROP_XI_COOLING=466, CONST CV_CAP_PROP_XI_TARGET_TEMP=467, CONST CV_CAP_PROP_XI_CHIP_TEMP=468, CONST CV_CAP_PROP_XI_HOUS_TEMP=469, CONST CV_CAP_PROP_XI_HOUS_BACK_SIDE_TEMP=590, CONST CV_CAP_PROP_XI_SENSOR_BOARD_TEMP=596, CONST CV_CAP_PROP_XI_CMS=470, CONST CV_CAP_PROP_XI_APPLY_CMS=471, CONST CV_CAP_PROP_XI_IMAGE_IS_COLOR=474, CONST CV_CAP_PROP_XI_COLOR_FILTER_ARRAY=475, CONST CV_CAP_PROP_XI_GAMMAY=476, CONST CV_CAP_PROP_XI_GAMMAC=477, CONST CV_CAP_PROP_XI_SHARPNESS=478, CONST CV_CAP_PROP_XI_CC_MATRIX_00=479, CONST CV_CAP_PROP_XI_CC_MATRIX_01=480, CONST CV_CAP_PROP_XI_CC_MATRIX_02=481, CONST CV_CAP_PROP_XI_CC_MATRIX_03=482, CONST CV_CAP_PROP_XI_CC_MATRIX_10=483, CONST CV_CAP_PROP_XI_CC_MATRIX_11=484, CONST CV_CAP_PROP_XI_CC_MATRIX_12=485, CONST CV_CAP_PROP_XI_CC_MATRIX_13=486, CONST CV_CAP_PROP_XI_CC_MATRIX_20=487, CONST CV_CAP_PROP_XI_CC_MATRIX_21=488, CONST CV_CAP_PROP_XI_CC_MATRIX_22=489, CONST CV_CAP_PROP_XI_CC_MATRIX_23=490, CONST CV_CAP_PROP_XI_CC_MATRIX_30=491, CONST CV_CAP_PROP_XI_CC_MATRIX_31=492, CONST CV_CAP_PROP_XI_CC_MATRIX_32=493, CONST CV_CAP_PROP_XI_CC_MATRIX_33=494, CONST CV_CAP_PROP_XI_DEFAULT_CC_MATRIX=495, CONST CV_CAP_PROP_XI_TRG_SELECTOR=498, CONST CV_CAP_PROP_XI_ACQ_FRAME_BURST_COUNT=499, CONST CV_CAP_PROP_XI_DEBOUNCE_EN=507, CONST CV_CAP_PROP_XI_DEBOUNCE_T0=508, CONST CV_CAP_PROP_XI_DEBOUNCE_T1=509, CONST CV_CAP_PROP_XI_DEBOUNCE_POL=510, CONST CV_CAP_PROP_XI_LENS_MODE=511, CONST CV_CAP_PROP_XI_LENS_APERTURE_VALUE=512, CONST CV_CAP_PROP_XI_LENS_FOCUS_MOVEMENT_VALUE=513, CONST CV_CAP_PROP_XI_LENS_FOCUS_MOVE=514, CONST CV_CAP_PROP_XI_LENS_FOCUS_DISTANCE=515, CONST CV_CAP_PROP_XI_LENS_FOCAL_LENGTH=516, CONST CV_CAP_PROP_XI_LENS_FEATURE_SELECTOR=517, CONST CV_CAP_PROP_XI_LENS_FEATURE=518, CONST CV_CAP_PROP_XI_DEVICE_MODEL_ID=521, CONST CV_CAP_PROP_XI_DEVICE_SN=522, CONST CV_CAP_PROP_XI_IMAGE_DATA_FORMAT_RGB32_ALPHA=529, CONST CV_CAP_PROP_XI_IMAGE_PAYLOAD_SIZE=530, CONST CV_CAP_PROP_XI_TRANSPORT_PIXEL_FORMAT=531, CONST CV_CAP_PROP_XI_SENSOR_CLOCK_FREQ_HZ=532, CONST CV_CAP_PROP_XI_SENSOR_CLOCK_FREQ_INDEX=533, CONST CV_CAP_PROP_XI_SENSOR_OUTPUT_CHANNEL_COUNT=534, CONST CV_CAP_PROP_XI_FRAMERATE=535, CONST CV_CAP_PROP_XI_COUNTER_SELECTOR=536, CONST CV_CAP_PROP_XI_COUNTER_VALUE=537, CONST CV_CAP_PROP_XI_ACQ_TIMING_MODE=538, CONST CV_CAP_PROP_XI_AVAILABLE_BANDWIDTH=539, CONST CV_CAP_PROP_XI_BUFFER_POLICY=540, CONST CV_CAP_PROP_XI_LUT_EN=541, CONST CV_CAP_PROP_XI_LUT_INDEX=542, CONST CV_CAP_PROP_XI_LUT_VALUE=543, CONST CV_CAP_PROP_XI_TRG_DELAY=544, CONST CV_CAP_PROP_XI_TS_RST_MODE=545, CONST CV_CAP_PROP_XI_TS_RST_SOURCE=546, CONST CV_CAP_PROP_XI_IS_DEVICE_EXIST=547, CONST CV_CAP_PROP_XI_ACQ_BUFFER_SIZE=548, CONST CV_CAP_PROP_XI_ACQ_BUFFER_SIZE_UNIT=549, CONST CV_CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_SIZE=550, CONST CV_CAP_PROP_XI_BUFFERS_QUEUE_SIZE=551, CONST CV_CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_COMMIT=552, CONST CV_CAP_PROP_XI_RECENT_FRAME=553, CONST CV_CAP_PROP_XI_DEVICE_RESET=554, CONST CV_CAP_PROP_XI_COLUMN_FPN_CORRECTION=555, CONST CV_CAP_PROP_XI_ROW_FPN_CORRECTION=591, CONST CV_CAP_PROP_XI_SENSOR_MODE=558, CONST CV_CAP_PROP_XI_HDR=559, CONST CV_CAP_PROP_XI_HDR_KNEEPOINT_COUNT=560, CONST CV_CAP_PROP_XI_HDR_T1=561, CONST CV_CAP_PROP_XI_HDR_T2=562, CONST CV_CAP_PROP_XI_KNEEPOINT1=563, CONST CV_CAP_PROP_XI_KNEEPOINT2=564, CONST CV_CAP_PROP_XI_IMAGE_BLACK_LEVEL=565, CONST CV_CAP_PROP_XI_HW_REVISION=571, CONST CV_CAP_PROP_XI_DEBUG_LEVEL=572, CONST CV_CAP_PROP_XI_AUTO_BANDWIDTH_CALCULATION=573, CONST CV_CAP_PROP_XI_FFS_FILE_ID=594, CONST CV_CAP_PROP_XI_FFS_FILE_SIZE=580, CONST CV_CAP_PROP_XI_FREE_FFS_SIZE=581, CONST CV_CAP_PROP_XI_USED_FFS_SIZE=582, CONST CV_CAP_PROP_XI_FFS_ACCESS_KEY=583, CONST CV_CAP_PROP_XI_SENSOR_FEATURE_SELECTOR=585, CONST CV_CAP_PROP_XI_SENSOR_FEATURE_VALUE=586, CONST CV_CAP_PROP_ANDROID_FLASH_MODE=8001, CONST CV_CAP_PROP_ANDROID_FOCUS_MODE=8002, CONST CV_CAP_PROP_ANDROID_WHITE_BALANCE=8003, CONST CV_CAP_PROP_ANDROID_ANTIBANDING=8004, CONST CV_CAP_PROP_ANDROID_FOCAL_LENGTH=8005, CONST CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_NEAR=8006, CONST CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_OPTIMAL=8007, CONST CV_CAP_PROP_ANDROID_FOCUS_DISTANCE_FAR=8008, CONST CV_CAP_PROP_ANDROID_EXPOSE_LOCK=8009, CONST CV_CAP_PROP_ANDROID_WHITEBALANCE_LOCK=8010, CONST CV_CAP_PROP_IOS_DEVICE_FOCUS=9001, CONST CV_CAP_PROP_IOS_DEVICE_EXPOSURE=9002, CONST CV_CAP_PROP_IOS_DEVICE_FLASH=9003, CONST CV_CAP_PROP_IOS_DEVICE_WHITEBALANCE=9004, CONST CV_CAP_PROP_IOS_DEVICE_TORCH=9005, CONST CV_CAP_PROP_GIGA_FRAME_OFFSET_X=10001, CONST CV_CAP_PROP_GIGA_FRAME_OFFSET_Y=10002, CONST CV_CAP_PROP_GIGA_FRAME_WIDTH_MAX=10003, CONST CV_CAP_PROP_GIGA_FRAME_HEIGH_MAX=10004, CONST CV_CAP_PROP_GIGA_FRAME_SENS_WIDTH=10005, CONST CV_CAP_PROP_GIGA_FRAME_SENS_HEIGH=10006, CONST CV_CAP_PROP_INTELPERC_PROFILE_COUNT=11001, CONST CV_CAP_PROP_INTELPERC_PROFILE_IDX=11002, CONST CV_CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE=11003, CONST CV_CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE=11004, CONST CV_CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD=11005, CONST CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ=11006, CONST CV_CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT=11007, CONST CV_CAP_INTELPERC_DEPTH_GENERATOR=1 << 29, CONST CV_CAP_INTELPERC_IMAGE_GENERATOR=1 << 28, CONST CV_CAP_INTELPERC_GENERATORS_MASK=CV_CAP_INTELPERC_DEPTH_GENERATOR + CV_CAP_INTELPERC_IMAGE_GENERATOR, CONST CV_CAP_MODE_BGR=0, CONST CV_CAP_MODE_RGB=1, CONST CV_CAP_MODE_GRAY=2, CONST CV_CAP_MODE_YUYV=3, CONST CV_CAP_OPENNI_DEPTH_MAP=0, CONST CV_CAP_OPENNI_POINT_CLOUD_MAP=1, CONST CV_CAP_OPENNI_DISPARITY_MAP=2, CONST CV_CAP_OPENNI_DISPARITY_MAP_32F=3, CONST CV_CAP_OPENNI_VALID_DEPTH_MASK=4, CONST CV_CAP_OPENNI_BGR_IMAGE=5, CONST CV_CAP_OPENNI_GRAY_IMAGE=6, CONST CV_CAP_OPENNI_IR_IMAGE=7, CONST CV_CAP_OPENNI_VGA_30HZ=0, CONST CV_CAP_OPENNI_SXGA_15HZ=1, CONST CV_CAP_OPENNI_SXGA_30HZ=2, CONST CV_CAP_OPENNI_QVGA_30HZ=3, CONST CV_CAP_OPENNI_QVGA_60HZ=4, CONST CV_CAP_INTELPERC_DEPTH_MAP=0, CONST CV_CAP_INTELPERC_UVDEPTH_MAP=1, CONST CV_CAP_INTELPERC_IR_MAP=2, CONST CV_CAP_INTELPERC_IMAGE=3, CONST CV_CAP_PROP_GPHOTO2_PREVIEW=17001, CONST CV_CAP_PROP_GPHOTO2_WIDGET_ENUMERATE=17002, CONST CV_CAP_PROP_GPHOTO2_RELOAD_CONFIG=17003, CONST CV_CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE=17004, CONST CV_CAP_PROP_GPHOTO2_COLLECT_MSGS=17005, CONST CV_CAP_PROP_GPHOTO2_FLUSH_MSGS=17006, CONST CV_CAP_PROP_SPEED=17007, CONST CV_CAP_PROP_APERTURE=17008, CONST CV_CAP_PROP_EXPOSUREPROGRAM=17009, CONST CV_CAP_PROP_VIEWFINDER=17010, CONST CAP_ANY=0, CONST CAP_VFW=200, CONST CAP_V4L=200, CONST CAP_V4L2=CAP_V4L, CONST CAP_FIREWIRE=300, CONST CAP_FIREWARE=CAP_FIREWIRE, CONST CAP_IEEE1394=CAP_FIREWIRE, CONST CAP_DC1394=CAP_FIREWIRE, CONST CAP_CMU1394=CAP_FIREWIRE, CONST CAP_QT=500, CONST CAP_UNICAP=600, CONST CAP_DSHOW=700, CONST CAP_PVAPI=800, CONST CAP_OPENNI=900, CONST CAP_OPENNI_ASUS=910, CONST CAP_ANDROID=1000, CONST CAP_XIAPI=1100, CONST CAP_AVFOUNDATION=1200, CONST CAP_GIGANETIX=1300, CONST CAP_MSMF=1400, CONST CAP_WINRT=1410, CONST CAP_INTELPERC=1500, CONST CAP_OPENNI2=1600, CONST CAP_OPENNI2_ASUS=1610, CONST CAP_GPHOTO2=1700, CONST CAP_GSTREAMER=1800, CONST CAP_FFMPEG=1900, CONST CAP_IMAGES=2000, CONST CAP_ARAVIS=2100, CONST CAP_OPENCV_MJPEG=2200, CONST CAP_INTEL_MFX=2300, CONST CAP_XINE=2400, CONST CAP_PROP_POS_MSEC=0, CONST CAP_PROP_POS_FRAMES=1, CONST CAP_PROP_POS_AVI_RATIO=2, CONST CAP_PROP_FRAME_WIDTH=3, CONST CAP_PROP_FRAME_HEIGHT=4, CONST CAP_PROP_FPS=5, CONST CAP_PROP_FOURCC=6, CONST CAP_PROP_FRAME_COUNT=7, CONST CAP_PROP_FORMAT=8, CONST CAP_PROP_MODE=9, CONST CAP_PROP_BRIGHTNESS=10, CONST CAP_PROP_CONTRAST=11, CONST CAP_PROP_SATURATION=12, CONST CAP_PROP_HUE=13, CONST CAP_PROP_GAIN=14, CONST CAP_PROP_EXPOSURE=15, CONST CAP_PROP_CONVERT_RGB=16, CONST CAP_PROP_WHITE_BALANCE_BLUE_U=17, CONST CAP_PROP_RECTIFICATION=18, CONST CAP_PROP_MONOCHROME=19, CONST CAP_PROP_SHARPNESS=20, CONST CAP_PROP_AUTO_EXPOSURE=21, CONST CAP_PROP_GAMMA=22, CONST CAP_PROP_TEMPERATURE=23, CONST CAP_PROP_TRIGGER=24, CONST CAP_PROP_TRIGGER_DELAY=25, CONST CAP_PROP_WHITE_BALANCE_RED_V=26, CONST CAP_PROP_ZOOM=27, CONST CAP_PROP_FOCUS=28, CONST CAP_PROP_GUID=29, CONST CAP_PROP_ISO_SPEED=30, CONST CAP_PROP_BACKLIGHT=32, CONST CAP_PROP_PAN=33, CONST CAP_PROP_TILT=34, CONST CAP_PROP_ROLL=35, CONST CAP_PROP_IRIS=36, CONST CAP_PROP_SETTINGS=37, CONST CAP_PROP_BUFFERSIZE=38, CONST CAP_PROP_AUTOFOCUS=39, CONST CAP_PROP_SAR_NUM=40, CONST CAP_PROP_SAR_DEN=41, CONST CAP_MODE_BGR=0, CONST CAP_MODE_RGB=1, CONST CAP_MODE_GRAY=2, CONST CAP_MODE_YUYV=3, CONST VIDEOWRITER_PROP_QUALITY=1, CONST VIDEOWRITER_PROP_FRAMEBYTES=2, CONST VIDEOWRITER_PROP_NSTRIPES=3, CONST CAP_PROP_DC1394_OFF=-4, CONST CAP_PROP_DC1394_MODE_MANUAL=-3, CONST CAP_PROP_DC1394_MODE_AUTO=-2, CONST CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO=-1, CONST CAP_PROP_DC1394_MAX=31, CONST CAP_OPENNI_DEPTH_GENERATOR=1 << 31, CONST CAP_OPENNI_IMAGE_GENERATOR=1 << 30, CONST CAP_OPENNI_IR_GENERATOR=1 << 29, CONST CAP_OPENNI_GENERATORS_MASK=CAP_OPENNI_DEPTH_GENERATOR + CAP_OPENNI_IMAGE_GENERATOR + CAP_OPENNI_IR_GENERATOR, CONST CAP_PROP_OPENNI_OUTPUT_MODE=100, CONST CAP_PROP_OPENNI_FRAME_MAX_DEPTH=101, CONST CAP_PROP_OPENNI_BASELINE=102, CONST CAP_PROP_OPENNI_FOCAL_LENGTH=103, CONST CAP_PROP_OPENNI_REGISTRATION=104, CONST CAP_PROP_OPENNI_REGISTRATION_ON=CAP_PROP_OPENNI_REGISTRATION, CONST CAP_PROP_OPENNI_APPROX_FRAME_SYNC=105, CONST CAP_PROP_OPENNI_MAX_BUFFER_SIZE=106, CONST CAP_PROP_OPENNI_CIRCLE_BUFFER=107, CONST CAP_PROP_OPENNI_MAX_TIME_DURATION=108, CONST CAP_PROP_OPENNI_GENERATOR_PRESENT=109, CONST CAP_PROP_OPENNI2_SYNC=110, CONST CAP_PROP_OPENNI2_MIRROR=111, CONST CAP_OPENNI_IMAGE_GENERATOR_PRESENT=CAP_OPENNI_IMAGE_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT, CONST CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE=CAP_OPENNI_IMAGE_GENERATOR + CAP_PROP_OPENNI_OUTPUT_MODE, CONST CAP_OPENNI_DEPTH_GENERATOR_PRESENT=CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT, CONST CAP_OPENNI_DEPTH_GENERATOR_BASELINE=CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_BASELINE, CONST CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH=CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_FOCAL_LENGTH, CONST CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION=CAP_OPENNI_DEPTH_GENERATOR + CAP_PROP_OPENNI_REGISTRATION, CONST CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON=CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION, CONST CAP_OPENNI_IR_GENERATOR_PRESENT=CAP_OPENNI_IR_GENERATOR + CAP_PROP_OPENNI_GENERATOR_PRESENT, CONST CAP_OPENNI_DEPTH_MAP=0, CONST CAP_OPENNI_POINT_CLOUD_MAP=1, CONST CAP_OPENNI_DISPARITY_MAP=2, CONST CAP_OPENNI_DISPARITY_MAP_32F=3, CONST CAP_OPENNI_VALID_DEPTH_MASK=4, CONST CAP_OPENNI_BGR_IMAGE=5, CONST CAP_OPENNI_GRAY_IMAGE=6, CONST CAP_OPENNI_IR_IMAGE=7, CONST CAP_OPENNI_VGA_30HZ=0, CONST CAP_OPENNI_SXGA_15HZ=1, CONST CAP_OPENNI_SXGA_30HZ=2, CONST CAP_OPENNI_QVGA_30HZ=3, CONST CAP_OPENNI_QVGA_60HZ=4, CONST CAP_PROP_GSTREAMER_QUEUE_LENGTH=200, CONST CAP_PROP_PVAPI_MULTICASTIP=300, CONST CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE=301, CONST CAP_PROP_PVAPI_DECIMATIONHORIZONTAL=302, CONST CAP_PROP_PVAPI_DECIMATIONVERTICAL=303, CONST CAP_PROP_PVAPI_BINNINGX=304, CONST CAP_PROP_PVAPI_BINNINGY=305, CONST CAP_PROP_PVAPI_PIXELFORMAT=306, CONST CAP_PVAPI_FSTRIGMODE_FREERUN=0, CONST CAP_PVAPI_FSTRIGMODE_SYNCIN1=1, CONST CAP_PVAPI_FSTRIGMODE_SYNCIN2=2, CONST CAP_PVAPI_FSTRIGMODE_FIXEDRATE=3, CONST CAP_PVAPI_FSTRIGMODE_SOFTWARE=4, CONST CAP_PVAPI_DECIMATION_OFF=1, CONST CAP_PVAPI_DECIMATION_2OUTOF4=2, CONST CAP_PVAPI_DECIMATION_2OUTOF8=4, CONST CAP_PVAPI_DECIMATION_2OUTOF16=8, CONST CAP_PVAPI_PIXELFORMAT_MONO8=1, CONST CAP_PVAPI_PIXELFORMAT_MONO16=2, CONST CAP_PVAPI_PIXELFORMAT_BAYER8=3, CONST CAP_PVAPI_PIXELFORMAT_BAYER16=4, CONST CAP_PVAPI_PIXELFORMAT_RGB24=5, CONST CAP_PVAPI_PIXELFORMAT_BGR24=6, CONST CAP_PVAPI_PIXELFORMAT_RGBA32=7, CONST CAP_PVAPI_PIXELFORMAT_BGRA32=8, CONST CAP_PROP_XI_DOWNSAMPLING=400, CONST CAP_PROP_XI_DATA_FORMAT=401, CONST CAP_PROP_XI_OFFSET_X=402, CONST CAP_PROP_XI_OFFSET_Y=403, CONST CAP_PROP_XI_TRG_SOURCE=404, CONST CAP_PROP_XI_TRG_SOFTWARE=405, CONST CAP_PROP_XI_GPI_SELECTOR=406, CONST CAP_PROP_XI_GPI_MODE=407, CONST CAP_PROP_XI_GPI_LEVEL=408, CONST CAP_PROP_XI_GPO_SELECTOR=409, CONST CAP_PROP_XI_GPO_MODE=410, CONST CAP_PROP_XI_LED_SELECTOR=411, CONST CAP_PROP_XI_LED_MODE=412, CONST CAP_PROP_XI_MANUAL_WB=413, CONST CAP_PROP_XI_AUTO_WB=414, CONST CAP_PROP_XI_AEAG=415, CONST CAP_PROP_XI_EXP_PRIORITY=416, CONST CAP_PROP_XI_AE_MAX_LIMIT=417, CONST CAP_PROP_XI_AG_MAX_LIMIT=418, CONST CAP_PROP_XI_AEAG_LEVEL=419, CONST CAP_PROP_XI_TIMEOUT=420, CONST CAP_PROP_XI_EXPOSURE=421, CONST CAP_PROP_XI_EXPOSURE_BURST_COUNT=422, CONST CAP_PROP_XI_GAIN_SELECTOR=423, CONST CAP_PROP_XI_GAIN=424, CONST CAP_PROP_XI_DOWNSAMPLING_TYPE=426, CONST CAP_PROP_XI_BINNING_SELECTOR=427, CONST CAP_PROP_XI_BINNING_VERTICAL=428, CONST CAP_PROP_XI_BINNING_HORIZONTAL=429, CONST CAP_PROP_XI_BINNING_PATTERN=430, CONST CAP_PROP_XI_DECIMATION_SELECTOR=431, CONST CAP_PROP_XI_DECIMATION_VERTICAL=432, CONST CAP_PROP_XI_DECIMATION_HORIZONTAL=433, CONST CAP_PROP_XI_DECIMATION_PATTERN=434, CONST CAP_PROP_XI_TEST_PATTERN_GENERATOR_SELECTOR=587, CONST CAP_PROP_XI_TEST_PATTERN=588, CONST CAP_PROP_XI_IMAGE_DATA_FORMAT=435, CONST CAP_PROP_XI_SHUTTER_TYPE=436, CONST CAP_PROP_XI_SENSOR_TAPS=437, CONST CAP_PROP_XI_AEAG_ROI_OFFSET_X=439, CONST CAP_PROP_XI_AEAG_ROI_OFFSET_Y=440, CONST CAP_PROP_XI_AEAG_ROI_WIDTH=441, CONST CAP_PROP_XI_AEAG_ROI_HEIGHT=442, CONST CAP_PROP_XI_BPC=445, CONST CAP_PROP_XI_WB_KR=448, CONST CAP_PROP_XI_WB_KG=449, CONST CAP_PROP_XI_WB_KB=450, CONST CAP_PROP_XI_WIDTH=451, CONST CAP_PROP_XI_HEIGHT=452, CONST CAP_PROP_XI_REGION_SELECTOR=589, CONST CAP_PROP_XI_REGION_MODE=595, CONST CAP_PROP_XI_LIMIT_BANDWIDTH=459, CONST CAP_PROP_XI_SENSOR_DATA_BIT_DEPTH=460, CONST CAP_PROP_XI_OUTPUT_DATA_BIT_DEPTH=461, CONST CAP_PROP_XI_IMAGE_DATA_BIT_DEPTH=462, CONST CAP_PROP_XI_OUTPUT_DATA_PACKING=463, CONST CAP_PROP_XI_OUTPUT_DATA_PACKING_TYPE=464, CONST CAP_PROP_XI_IS_COOLED=465, CONST CAP_PROP_XI_COOLING=466, CONST CAP_PROP_XI_TARGET_TEMP=467, CONST CAP_PROP_XI_CHIP_TEMP=468, CONST CAP_PROP_XI_HOUS_TEMP=469, CONST CAP_PROP_XI_HOUS_BACK_SIDE_TEMP=590, CONST CAP_PROP_XI_SENSOR_BOARD_TEMP=596, CONST CAP_PROP_XI_CMS=470, CONST CAP_PROP_XI_APPLY_CMS=471, CONST CAP_PROP_XI_IMAGE_IS_COLOR=474, CONST CAP_PROP_XI_COLOR_FILTER_ARRAY=475, CONST CAP_PROP_XI_GAMMAY=476, CONST CAP_PROP_XI_GAMMAC=477, CONST CAP_PROP_XI_SHARPNESS=478, CONST CAP_PROP_XI_CC_MATRIX_00=479, CONST CAP_PROP_XI_CC_MATRIX_01=480, CONST CAP_PROP_XI_CC_MATRIX_02=481, CONST CAP_PROP_XI_CC_MATRIX_03=482, CONST CAP_PROP_XI_CC_MATRIX_10=483, CONST CAP_PROP_XI_CC_MATRIX_11=484, CONST CAP_PROP_XI_CC_MATRIX_12=485, CONST CAP_PROP_XI_CC_MATRIX_13=486, CONST CAP_PROP_XI_CC_MATRIX_20=487, CONST CAP_PROP_XI_CC_MATRIX_21=488, CONST CAP_PROP_XI_CC_MATRIX_22=489, CONST CAP_PROP_XI_CC_MATRIX_23=490, CONST CAP_PROP_XI_CC_MATRIX_30=491, CONST CAP_PROP_XI_CC_MATRIX_31=492, CONST CAP_PROP_XI_CC_MATRIX_32=493, CONST CAP_PROP_XI_CC_MATRIX_33=494, CONST CAP_PROP_XI_DEFAULT_CC_MATRIX=495, CONST CAP_PROP_XI_TRG_SELECTOR=498, CONST CAP_PROP_XI_ACQ_FRAME_BURST_COUNT=499, CONST CAP_PROP_XI_DEBOUNCE_EN=507, CONST CAP_PROP_XI_DEBOUNCE_T0=508, CONST CAP_PROP_XI_DEBOUNCE_T1=509, CONST CAP_PROP_XI_DEBOUNCE_POL=510, CONST CAP_PROP_XI_LENS_MODE=511, CONST CAP_PROP_XI_LENS_APERTURE_VALUE=512, CONST CAP_PROP_XI_LENS_FOCUS_MOVEMENT_VALUE=513, CONST CAP_PROP_XI_LENS_FOCUS_MOVE=514, CONST CAP_PROP_XI_LENS_FOCUS_DISTANCE=515, CONST CAP_PROP_XI_LENS_FOCAL_LENGTH=516, CONST CAP_PROP_XI_LENS_FEATURE_SELECTOR=517, CONST CAP_PROP_XI_LENS_FEATURE=518, CONST CAP_PROP_XI_DEVICE_MODEL_ID=521, CONST CAP_PROP_XI_DEVICE_SN=522, CONST CAP_PROP_XI_IMAGE_DATA_FORMAT_RGB32_ALPHA=529, CONST CAP_PROP_XI_IMAGE_PAYLOAD_SIZE=530, CONST CAP_PROP_XI_TRANSPORT_PIXEL_FORMAT=531, CONST CAP_PROP_XI_SENSOR_CLOCK_FREQ_HZ=532, CONST CAP_PROP_XI_SENSOR_CLOCK_FREQ_INDEX=533, CONST CAP_PROP_XI_SENSOR_OUTPUT_CHANNEL_COUNT=534, CONST CAP_PROP_XI_FRAMERATE=535, CONST CAP_PROP_XI_COUNTER_SELECTOR=536, CONST CAP_PROP_XI_COUNTER_VALUE=537, CONST CAP_PROP_XI_ACQ_TIMING_MODE=538, CONST CAP_PROP_XI_AVAILABLE_BANDWIDTH=539, CONST CAP_PROP_XI_BUFFER_POLICY=540, CONST CAP_PROP_XI_LUT_EN=541, CONST CAP_PROP_XI_LUT_INDEX=542, CONST CAP_PROP_XI_LUT_VALUE=543, CONST CAP_PROP_XI_TRG_DELAY=544, CONST CAP_PROP_XI_TS_RST_MODE=545, CONST CAP_PROP_XI_TS_RST_SOURCE=546, CONST CAP_PROP_XI_IS_DEVICE_EXIST=547, CONST CAP_PROP_XI_ACQ_BUFFER_SIZE=548, CONST CAP_PROP_XI_ACQ_BUFFER_SIZE_UNIT=549, CONST CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_SIZE=550, CONST CAP_PROP_XI_BUFFERS_QUEUE_SIZE=551, CONST CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_COMMIT=552, CONST CAP_PROP_XI_RECENT_FRAME=553, CONST CAP_PROP_XI_DEVICE_RESET=554, CONST CAP_PROP_XI_COLUMN_FPN_CORRECTION=555, CONST CAP_PROP_XI_ROW_FPN_CORRECTION=591, CONST CAP_PROP_XI_SENSOR_MODE=558, CONST CAP_PROP_XI_HDR=559, CONST CAP_PROP_XI_HDR_KNEEPOINT_COUNT=560, CONST CAP_PROP_XI_HDR_T1=561, CONST CAP_PROP_XI_HDR_T2=562, CONST CAP_PROP_XI_KNEEPOINT1=563, CONST CAP_PROP_XI_KNEEPOINT2=564, CONST CAP_PROP_XI_IMAGE_BLACK_LEVEL=565, CONST CAP_PROP_XI_HW_REVISION=571, CONST CAP_PROP_XI_DEBUG_LEVEL=572, CONST CAP_PROP_XI_AUTO_BANDWIDTH_CALCULATION=573, CONST CAP_PROP_XI_FFS_FILE_ID=594, CONST CAP_PROP_XI_FFS_FILE_SIZE=580, CONST CAP_PROP_XI_FREE_FFS_SIZE=581, CONST CAP_PROP_XI_USED_FFS_SIZE=582, CONST CAP_PROP_XI_FFS_ACCESS_KEY=583, CONST CAP_PROP_XI_SENSOR_FEATURE_SELECTOR=585, CONST CAP_PROP_XI_SENSOR_FEATURE_VALUE=586, CONST CAP_PROP_IOS_DEVICE_FOCUS=9001, CONST CAP_PROP_IOS_DEVICE_EXPOSURE=9002, CONST CAP_PROP_IOS_DEVICE_FLASH=9003, CONST CAP_PROP_IOS_DEVICE_WHITEBALANCE=9004, CONST CAP_PROP_IOS_DEVICE_TORCH=9005, CONST CAP_PROP_GIGA_FRAME_OFFSET_X=10001, CONST CAP_PROP_GIGA_FRAME_OFFSET_Y=10002, CONST CAP_PROP_GIGA_FRAME_WIDTH_MAX=10003, CONST CAP_PROP_GIGA_FRAME_HEIGH_MAX=10004, CONST CAP_PROP_GIGA_FRAME_SENS_WIDTH=10005, CONST CAP_PROP_GIGA_FRAME_SENS_HEIGH=10006, CONST CAP_PROP_INTELPERC_PROFILE_COUNT=11001, CONST CAP_PROP_INTELPERC_PROFILE_IDX=11002, CONST CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE=11003, CONST CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE=11004, CONST CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD=11005, CONST CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ=11006, CONST CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT=11007, CONST CAP_INTELPERC_DEPTH_GENERATOR=1 << 29, CONST CAP_INTELPERC_IMAGE_GENERATOR=1 << 28, CONST CAP_INTELPERC_GENERATORS_MASK=CAP_INTELPERC_DEPTH_GENERATOR + CAP_INTELPERC_IMAGE_GENERATOR, CONST CAP_INTELPERC_DEPTH_MAP=0, CONST CAP_INTELPERC_UVDEPTH_MAP=1, CONST CAP_INTELPERC_IR_MAP=2, CONST CAP_INTELPERC_IMAGE=3, CONST CAP_PROP_GPHOTO2_PREVIEW=17001, CONST CAP_PROP_GPHOTO2_WIDGET_ENUMERATE=17002, CONST CAP_PROP_GPHOTO2_RELOAD_CONFIG=17003, CONST CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE=17004, CONST CAP_PROP_GPHOTO2_COLLECT_MSGS=17005, CONST CAP_PROP_GPHOTO2_FLUSH_MSGS=17006, CONST CAP_PROP_SPEED=17007, CONST CAP_PROP_APERTURE=17008, CONST CAP_PROP_EXPOSUREPROGRAM=17009, CONST CAP_PROP_VIEWFINDER=17010, CONST CAP_PROP_IMAGES_BASE=18000, CONST CAP_PROP_IMAGES_LAST=19000]
CLASS cv::.VideoCapture : 
FUNC < cv.VideoCapture.VideoCapture [ARG String filename=, ARG int apiPreference=]>
java:  VideoCapture(String filename, int apiPreference)
FUNC < cv.VideoCapture.VideoCapture [ARG String filename=]>
java:  VideoCapture(String filename)
FUNC < cv.VideoCapture.VideoCapture [ARG int index=]>
java:  VideoCapture(int index)
FUNC < cv.VideoCapture.VideoCapture []>
java:  VideoCapture()
FUNC <bool cv.VideoCapture.grab []>
java: boolean grab()
FUNC <bool cv.VideoCapture.isOpened []>
java: boolean isOpened()
FUNC <bool cv.VideoCapture.open [ARG String filename=, ARG int apiPreference=]>
java: boolean open(String filename, int apiPreference)
FUNC <bool cv.VideoCapture.open [ARG String filename=]>
java: boolean open(String filename)
FUNC <bool cv.VideoCapture.open [ARG int cameraNum=, ARG int apiPreference=]>
java: boolean open(int cameraNum, int apiPreference)
FUNC <bool cv.VideoCapture.open [ARG int index=]>
java: boolean open(int index)
FUNC <bool cv.VideoCapture.read [ARG Mat image=]>
java: boolean read(Mat image)
FUNC <bool cv.VideoCapture.retrieve [ARG Mat image=, ARG int flag=0]>
java: boolean retrieve(Mat image, int flag)
java: boolean retrieve(Mat image)
FUNC <bool cv.VideoCapture.set [ARG int propId=, ARG double value=]>
java: boolean set(int propId, double value)
FUNC <double cv.VideoCapture.get [ARG int propId=]>
java: double get(int propId)
FUNC <void cv.VideoCapture.release []>
java: void release()
CLASS cv::.VideoWriter : 
FUNC < cv.VideoWriter.VideoWriter [ARG String filename=, ARG int apiPreference=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG bool isColor=true]>
java:  VideoWriter(String filename, int apiPreference, int fourcc, double fps, Size frameSize, boolean isColor)
java:  VideoWriter(String filename, int apiPreference, int fourcc, double fps, Size frameSize)
FUNC < cv.VideoWriter.VideoWriter [ARG String filename=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG bool isColor=true]>
java:  VideoWriter(String filename, int fourcc, double fps, Size frameSize, boolean isColor)
java:  VideoWriter(String filename, int fourcc, double fps, Size frameSize)
FUNC < cv.VideoWriter.VideoWriter []>
java:  VideoWriter()
FUNC <bool cv.VideoWriter.isOpened []>
java: boolean isOpened()
FUNC <bool cv.VideoWriter.open [ARG String filename=, ARG int apiPreference=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG bool isColor=true]>
java: boolean open(String filename, int apiPreference, int fourcc, double fps, Size frameSize, boolean isColor)
java: boolean open(String filename, int apiPreference, int fourcc, double fps, Size frameSize)
FUNC <bool cv.VideoWriter.open [ARG String filename=, ARG int fourcc=, ARG double fps=, ARG Size frameSize=, ARG bool isColor=true]>
java: boolean open(String filename, int fourcc, double fps, Size frameSize, boolean isColor)
java: boolean open(String filename, int fourcc, double fps, Size frameSize)
FUNC <bool cv.VideoWriter.set [ARG int propId=, ARG double value=]>
java: boolean set(int propId, double value)
FUNC <double cv.VideoWriter.get [ARG int propId=]>
java: double get(int propId)
FUNC <int cv.VideoWriter.fourcc [ARG char c1=, ARG char c2=, ARG char c3=, ARG char c4=]>
java: int fourcc(char c1, char c2, char c3, char c4)
FUNC <void cv.VideoWriter.release []>
java: void release()
FUNC <void cv.VideoWriter.write [ARG Mat image=]>
java: void write(Mat image)

=== MODULE: highgui (C:/Users/d_dan/Desktop/opencv-master\modules/highgui) ===


Files (0):
[]

Common headers (0):
[]
No generated code for module: highgui

=== MODULE: features2d (C:/Users/d_dan/Desktop/opencv-master\modules/features2d) ===


Files (1):
['C:/Users/d_dan/Desktop/opencv-master\\modules/features2d\\include/opencv2/features2d.hpp']

Common headers (1):
['C:/Users/d_dan/Desktop/opencv-master\\modules/features2d\\misc/java/src/cpp/features2d_converters.hpp']
ok: class CLASS ::.Features2d : , name: Features2d, base: 

===== Common header : C:/Users/d_dan/Desktop/opencv-master\modules/features2d\misc/java/src/cpp/features2d_converters.hpp =====


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/features2d\include/opencv2/features2d.hpp =====
Namespaces: {'cv'}

--- Incoming ---
['class cv.Feature2D', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.Feature2D : Algorithm, name: Feature2D, base: Algorithm

--- Incoming ---
[   'cv.Feature2D.detect',
    'void',
    ['/V'],
    [   ['Mat', 'image', '', []],
        ['vector_KeyPoint', 'keypoints', '', ['/O', '/Ref']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv.Feature2D.detect [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.Feature2D.detect',
    'void',
    ['/V'],
    [   ['vector_Mat', 'images', '', []],
        ['vector_vector_KeyPoint', 'keypoints', '', ['/O', '/Ref']],
        ['vector_Mat', 'masks', 'vector_Mat()', []]],
    'void']
ok: FUNC <void cv.Feature2D.detect [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat masks=vector_Mat()]>

--- Incoming ---
[   'cv.Feature2D.compute',
    'void',
    ['/V'],
    [   ['Mat', 'image', '', []],
        ['vector_KeyPoint', 'keypoints', '', ['/O', '/IO', '/Ref']],
        ['Mat', 'descriptors', '', ['/O']]],
    'void']
ok: FUNC <void cv.Feature2D.compute [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat descriptors=]>

--- Incoming ---
[   'cv.Feature2D.compute',
    'void',
    ['/V'],
    [   ['vector_Mat', 'images', '', []],
        ['vector_vector_KeyPoint', 'keypoints', '', ['/O', '/IO', '/Ref']],
        ['vector_Mat', 'descriptors', '', ['/O']]],
    'void']
ok: FUNC <void cv.Feature2D.compute [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat descriptors=]>

--- Incoming ---
[   'cv.Feature2D.detectAndCompute',
    'void',
    ['/V'],
    [   ['Mat', 'image', '', []],
        ['Mat', 'mask', '', []],
        ['vector_KeyPoint', 'keypoints', '', ['/O', '/Ref']],
        ['Mat', 'descriptors', '', ['/O']],
        ['bool', 'useProvidedKeypoints', 'false', []]],
    'void']
ok: FUNC <void cv.Feature2D.detectAndCompute [ARG Mat image=, ARG Mat mask=, ARG vector_KeyPoint keypoints=, ARG Mat descriptors=, ARG bool useProvidedKeypoints=false]>

--- Incoming ---
['cv.Feature2D.descriptorSize', 'int', ['/C', '/V'], [], 'int']
ok: FUNC <int cv.Feature2D.descriptorSize []>

--- Incoming ---
['cv.Feature2D.descriptorType', 'int', ['/C', '/V'], [], 'int']
ok: FUNC <int cv.Feature2D.descriptorType []>

--- Incoming ---
['cv.Feature2D.defaultNorm', 'int', ['/C', '/V'], [], 'int']
ok: FUNC <int cv.Feature2D.defaultNorm []>

--- Incoming ---
[   'cv.Feature2D.write',
    'void',
    ['/C'],
    [['String', 'fileName', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.Feature2D.write [ARG String fileName=]>

--- Incoming ---
[   'cv.Feature2D.read',
    'void',
    [],
    [['String', 'fileName', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.Feature2D.read [ARG String fileName=]>

--- Incoming ---
[   'cv.Feature2D.read',
    'void',
    ['/V'],
    [['FileNode', 'arg1', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.Feature2D.read [ARG FileNode arg1=]>

--- Incoming ---
['cv.Feature2D.empty', 'bool', ['/C', '/V'], [], 'bool']
ok: FUNC <bool cv.Feature2D.empty []>

--- Incoming ---
['cv.Feature2D.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.Feature2D.getDefaultName []>

--- Incoming ---
[   'cv.Feature2D.write',
    'void',
    ['/C'],
    [   ['Ptr_FileStorage', 'fs', '', ['/C', '/Ref']],
        ['String', 'name', 'String()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.Feature2D.write [ARG Ptr_FileStorage fs=, ARG String name=String()]>

--- Incoming ---
['class cv.BRISK', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.BRISK : Feature2D, name: BRISK, base: Feature2D

--- Incoming ---
[   'cv.BRISK.create',
    'Ptr_BRISK',
    ['/S'],
    [   ['int', 'thresh', '30', []],
        ['int', 'octaves', '3', []],
        ['float', 'patternScale', '1.0f', []]],
    'Ptr<BRISK>']
ok: FUNC <Ptr_BRISK cv.BRISK.create [ARG int thresh=30, ARG int octaves=3, ARG float patternScale=1.0f]>

--- Incoming ---
[   'cv.BRISK.create',
    'Ptr_BRISK',
    ['/S'],
    [   ['vector_float', 'radiusList', '', ['/C', '/Ref']],
        ['vector_int', 'numberList', '', ['/C', '/Ref']],
        ['float', 'dMax', '5.85f', []],
        ['float', 'dMin', '8.2f', []],
        ['vector_int', 'indexChange', 'std::vector<int>()', ['/C', '/Ref']]],
    'Ptr<BRISK>']
ok: FUNC <Ptr_BRISK cv.BRISK.create [ARG vector_float radiusList=, ARG vector_int numberList=, ARG float dMax=5.85f, ARG float dMin=8.2f, ARG vector_int indexChange=std::vector<int>()]>

--- Incoming ---
[   'cv.BRISK.create',
    'Ptr_BRISK',
    ['/S'],
    [   ['int', 'thresh', '', []],
        ['int', 'octaves', '', []],
        ['vector_float', 'radiusList', '', ['/C', '/Ref']],
        ['vector_int', 'numberList', '', ['/C', '/Ref']],
        ['float', 'dMax', '5.85f', []],
        ['float', 'dMin', '8.2f', []],
        ['vector_int', 'indexChange', 'std::vector<int>()', ['/C', '/Ref']]],
    'Ptr<BRISK>']
ok: FUNC <Ptr_BRISK cv.BRISK.create [ARG int thresh=, ARG int octaves=, ARG vector_float radiusList=, ARG vector_int numberList=, ARG float dMax=5.85f, ARG float dMin=8.2f, ARG vector_int indexChange=std::vector<int>()]>

--- Incoming ---
['cv.BRISK.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.BRISK.getDefaultName []>

--- Incoming ---
['class cv.ORB', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.ORB : Feature2D, name: ORB, base: Feature2D

--- Incoming ---
['const cv.ORB.kBytes', '32', [], [], None]
ok: CONST kBytes=32

--- Incoming ---
['const cv.ORB.HARRIS_SCORE', '0', [], [], None]
ok: CONST HARRIS_SCORE=0

--- Incoming ---
['const cv.ORB.FAST_SCORE', '1', [], [], None]
ok: CONST FAST_SCORE=1

--- Incoming ---
[   'cv.ORB.create',
    'Ptr_ORB',
    ['/S'],
    [   ['int', 'nfeatures', '500', []],
        ['float', 'scaleFactor', '1.2f', []],
        ['int', 'nlevels', '8', []],
        ['int', 'edgeThreshold', '31', []],
        ['int', 'firstLevel', '0', []],
        ['int', 'WTA_K', '2', []],
        ['int', 'scoreType', 'ORB::HARRIS_SCORE', []],
        ['int', 'patchSize', '31', []],
        ['int', 'fastThreshold', '20', []]],
    'Ptr<ORB>']
ok: FUNC <Ptr_ORB cv.ORB.create [ARG int nfeatures=500, ARG float scaleFactor=1.2f, ARG int nlevels=8, ARG int edgeThreshold=31, ARG int firstLevel=0, ARG int WTA_K=2, ARG int scoreType=ORB::HARRIS_SCORE, ARG int patchSize=31, ARG int fastThreshold=20]>

--- Incoming ---
[   'cv.ORB.setMaxFeatures',
    'void',
    ['/V', '/PV'],
    [['int', 'maxFeatures', '', []]],
    'void']
ok: FUNC <void cv.ORB.setMaxFeatures [ARG int maxFeatures=]>

--- Incoming ---
['cv.ORB.getMaxFeatures', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ORB.getMaxFeatures []>

--- Incoming ---
[   'cv.ORB.setScaleFactor',
    'void',
    ['/V', '/PV'],
    [['double', 'scaleFactor', '', []]],
    'void']
ok: FUNC <void cv.ORB.setScaleFactor [ARG double scaleFactor=]>

--- Incoming ---
['cv.ORB.getScaleFactor', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.ORB.getScaleFactor []>

--- Incoming ---
[   'cv.ORB.setNLevels',
    'void',
    ['/V', '/PV'],
    [['int', 'nlevels', '', []]],
    'void']
ok: FUNC <void cv.ORB.setNLevels [ARG int nlevels=]>

--- Incoming ---
['cv.ORB.getNLevels', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ORB.getNLevels []>

--- Incoming ---
[   'cv.ORB.setEdgeThreshold',
    'void',
    ['/V', '/PV'],
    [['int', 'edgeThreshold', '', []]],
    'void']
ok: FUNC <void cv.ORB.setEdgeThreshold [ARG int edgeThreshold=]>

--- Incoming ---
['cv.ORB.getEdgeThreshold', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ORB.getEdgeThreshold []>

--- Incoming ---
[   'cv.ORB.setFirstLevel',
    'void',
    ['/V', '/PV'],
    [['int', 'firstLevel', '', []]],
    'void']
ok: FUNC <void cv.ORB.setFirstLevel [ARG int firstLevel=]>

--- Incoming ---
['cv.ORB.getFirstLevel', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ORB.getFirstLevel []>

--- Incoming ---
['cv.ORB.setWTA_K', 'void', ['/V', '/PV'], [['int', 'wta_k', '', []]], 'void']
ok: FUNC <void cv.ORB.setWTA_K [ARG int wta_k=]>

--- Incoming ---
['cv.ORB.getWTA_K', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ORB.getWTA_K []>

--- Incoming ---
[   'cv.ORB.setScoreType',
    'void',
    ['/V', '/PV'],
    [['int', 'scoreType', '', []]],
    'void']
ok: FUNC <void cv.ORB.setScoreType [ARG int scoreType=]>

--- Incoming ---
['cv.ORB.getScoreType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ORB.getScoreType []>

--- Incoming ---
[   'cv.ORB.setPatchSize',
    'void',
    ['/V', '/PV'],
    [['int', 'patchSize', '', []]],
    'void']
ok: FUNC <void cv.ORB.setPatchSize [ARG int patchSize=]>

--- Incoming ---
['cv.ORB.getPatchSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ORB.getPatchSize []>

--- Incoming ---
[   'cv.ORB.setFastThreshold',
    'void',
    ['/V', '/PV'],
    [['int', 'fastThreshold', '', []]],
    'void']
ok: FUNC <void cv.ORB.setFastThreshold [ARG int fastThreshold=]>

--- Incoming ---
['cv.ORB.getFastThreshold', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.ORB.getFastThreshold []>

--- Incoming ---
['cv.ORB.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.ORB.getDefaultName []>

--- Incoming ---
['class cv.MSER', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.MSER : Feature2D, name: MSER, base: Feature2D

--- Incoming ---
[   'cv.MSER.create',
    'Ptr_MSER',
    ['/S'],
    [   ['int', '_delta', '5', []],
        ['int', '_min_area', '60', []],
        ['int', '_max_area', '14400', []],
        ['double', '_max_variation', '0.25', []],
        ['double', '_min_diversity', '.2', []],
        ['int', '_max_evolution', '200', []],
        ['double', '_area_threshold', '1.01', []],
        ['double', '_min_margin', '0.003', []],
        ['int', '_edge_blur_size', '5', []]],
    'Ptr<MSER>']
ok: FUNC <Ptr_MSER cv.MSER.create [ARG int _delta=5, ARG int _min_area=60, ARG int _max_area=14400, ARG double _max_variation=0.25, ARG double _min_diversity=.2, ARG int _max_evolution=200, ARG double _area_threshold=1.01, ARG double _min_margin=0.003, ARG int _edge_blur_size=5]>

--- Incoming ---
[   'cv.MSER.detectRegions',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'image', '', []],
        ['vector_vector_Point', 'msers', '', ['/O', '/Ref']],
        ['vector_Rect', 'bboxes', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.MSER.detectRegions [ARG Mat image=, ARG vector_vector_Point msers=, ARG vector_Rect bboxes=]>

--- Incoming ---
['cv.MSER.setDelta', 'void', ['/V', '/PV'], [['int', 'delta', '', []]], 'void']
ok: FUNC <void cv.MSER.setDelta [ARG int delta=]>

--- Incoming ---
['cv.MSER.getDelta', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.MSER.getDelta []>

--- Incoming ---
[   'cv.MSER.setMinArea',
    'void',
    ['/V', '/PV'],
    [['int', 'minArea', '', []]],
    'void']
ok: FUNC <void cv.MSER.setMinArea [ARG int minArea=]>

--- Incoming ---
['cv.MSER.getMinArea', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.MSER.getMinArea []>

--- Incoming ---
[   'cv.MSER.setMaxArea',
    'void',
    ['/V', '/PV'],
    [['int', 'maxArea', '', []]],
    'void']
ok: FUNC <void cv.MSER.setMaxArea [ARG int maxArea=]>

--- Incoming ---
['cv.MSER.getMaxArea', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.MSER.getMaxArea []>

--- Incoming ---
['cv.MSER.setPass2Only', 'void', ['/V', '/PV'], [['bool', 'f', '', []]], 'void']
ok: FUNC <void cv.MSER.setPass2Only [ARG bool f=]>

--- Incoming ---
['cv.MSER.getPass2Only', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.MSER.getPass2Only []>

--- Incoming ---
['cv.MSER.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.MSER.getDefaultName []>

--- Incoming ---
['class cv.FastFeatureDetector', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.FastFeatureDetector : Feature2D, name: FastFeatureDetector, base: Feature2D

--- Incoming ---
['const cv.FastFeatureDetector.TYPE_5_8', '0', [], [], None]
ok: CONST TYPE_5_8=0

--- Incoming ---
['const cv.FastFeatureDetector.TYPE_7_12', '1', [], [], None]
ok: CONST TYPE_7_12=1

--- Incoming ---
['const cv.FastFeatureDetector.TYPE_9_16', '2', [], [], None]
ok: CONST TYPE_9_16=2

--- Incoming ---
['const cv.FastFeatureDetector.THRESHOLD', '10000', [], [], None]
ok: CONST THRESHOLD=10000

--- Incoming ---
['const cv.FastFeatureDetector.NONMAX_SUPPRESSION', '10001', [], [], None]
ok: CONST NONMAX_SUPPRESSION=10001

--- Incoming ---
['const cv.FastFeatureDetector.FAST_N', '10002', [], [], None]
ok: CONST FAST_N=10002

--- Incoming ---
[   'cv.FastFeatureDetector.create',
    'Ptr_FastFeatureDetector',
    ['/S'],
    [   ['int', 'threshold', '10', []],
        ['bool', 'nonmaxSuppression', 'true', []],
        ['int', 'type', 'FastFeatureDetector::TYPE_9_16', []]],
    'Ptr<FastFeatureDetector>']
ok: FUNC <Ptr_FastFeatureDetector cv.FastFeatureDetector.create [ARG int threshold=10, ARG bool nonmaxSuppression=true, ARG int type=FastFeatureDetector::TYPE_9_16]>

--- Incoming ---
[   'cv.FastFeatureDetector.setThreshold',
    'void',
    ['/V', '/PV'],
    [['int', 'threshold', '', []]],
    'void']
ok: FUNC <void cv.FastFeatureDetector.setThreshold [ARG int threshold=]>

--- Incoming ---
['cv.FastFeatureDetector.getThreshold', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.FastFeatureDetector.getThreshold []>

--- Incoming ---
[   'cv.FastFeatureDetector.setNonmaxSuppression',
    'void',
    ['/V', '/PV'],
    [['bool', 'f', '', []]],
    'void']
ok: FUNC <void cv.FastFeatureDetector.setNonmaxSuppression [ARG bool f=]>

--- Incoming ---
[   'cv.FastFeatureDetector.getNonmaxSuppression',
    'bool',
    ['/C', '/V', '/PV'],
    [],
    'bool']
ok: FUNC <bool cv.FastFeatureDetector.getNonmaxSuppression []>

--- Incoming ---
[   'cv.FastFeatureDetector.setType',
    'void',
    ['/V', '/PV'],
    [['int', 'type', '', []]],
    'void']
ok: FUNC <void cv.FastFeatureDetector.setType [ARG int type=]>

--- Incoming ---
['cv.FastFeatureDetector.getType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.FastFeatureDetector.getType []>

--- Incoming ---
['cv.FastFeatureDetector.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.FastFeatureDetector.getDefaultName []>

--- Incoming ---
['class cv.AgastFeatureDetector', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.AgastFeatureDetector : Feature2D, name: AgastFeatureDetector, base: Feature2D

--- Incoming ---
['const cv.AgastFeatureDetector.AGAST_5_8', '0', [], [], None]
ok: CONST AGAST_5_8=0

--- Incoming ---
['const cv.AgastFeatureDetector.AGAST_7_12d', '1', [], [], None]
ok: CONST AGAST_7_12d=1

--- Incoming ---
['const cv.AgastFeatureDetector.AGAST_7_12s', '2', [], [], None]
ok: CONST AGAST_7_12s=2

--- Incoming ---
['const cv.AgastFeatureDetector.OAST_9_16', '3', [], [], None]
ok: CONST OAST_9_16=3

--- Incoming ---
['const cv.AgastFeatureDetector.THRESHOLD', '10000', [], [], None]
ok: CONST THRESHOLD=10000

--- Incoming ---
['const cv.AgastFeatureDetector.NONMAX_SUPPRESSION', '10001', [], [], None]
ok: CONST NONMAX_SUPPRESSION=10001

--- Incoming ---
[   'cv.AgastFeatureDetector.create',
    'Ptr_AgastFeatureDetector',
    ['/S'],
    [   ['int', 'threshold', '10', []],
        ['bool', 'nonmaxSuppression', 'true', []],
        ['int', 'type', 'AgastFeatureDetector::OAST_9_16', []]],
    'Ptr<AgastFeatureDetector>']
ok: FUNC <Ptr_AgastFeatureDetector cv.AgastFeatureDetector.create [ARG int threshold=10, ARG bool nonmaxSuppression=true, ARG int type=AgastFeatureDetector::OAST_9_16]>

--- Incoming ---
[   'cv.AgastFeatureDetector.setThreshold',
    'void',
    ['/V', '/PV'],
    [['int', 'threshold', '', []]],
    'void']
ok: FUNC <void cv.AgastFeatureDetector.setThreshold [ARG int threshold=]>

--- Incoming ---
['cv.AgastFeatureDetector.getThreshold', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AgastFeatureDetector.getThreshold []>

--- Incoming ---
[   'cv.AgastFeatureDetector.setNonmaxSuppression',
    'void',
    ['/V', '/PV'],
    [['bool', 'f', '', []]],
    'void']
ok: FUNC <void cv.AgastFeatureDetector.setNonmaxSuppression [ARG bool f=]>

--- Incoming ---
[   'cv.AgastFeatureDetector.getNonmaxSuppression',
    'bool',
    ['/C', '/V', '/PV'],
    [],
    'bool']
ok: FUNC <bool cv.AgastFeatureDetector.getNonmaxSuppression []>

--- Incoming ---
[   'cv.AgastFeatureDetector.setType',
    'void',
    ['/V', '/PV'],
    [['int', 'type', '', []]],
    'void']
ok: FUNC <void cv.AgastFeatureDetector.setType [ARG int type=]>

--- Incoming ---
['cv.AgastFeatureDetector.getType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AgastFeatureDetector.getType []>

--- Incoming ---
['cv.AgastFeatureDetector.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.AgastFeatureDetector.getDefaultName []>

--- Incoming ---
['class cv.GFTTDetector', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.GFTTDetector : Feature2D, name: GFTTDetector, base: Feature2D

--- Incoming ---
[   'cv.GFTTDetector.create',
    'Ptr_GFTTDetector',
    ['/S'],
    [   ['int', 'maxCorners', '1000', []],
        ['double', 'qualityLevel', '0.01', []],
        ['double', 'minDistance', '1', []],
        ['int', 'blockSize', '3', []],
        ['bool', 'useHarrisDetector', 'false', []],
        ['double', 'k', '0.04', []]],
    'Ptr<GFTTDetector>']
ok: FUNC <Ptr_GFTTDetector cv.GFTTDetector.create [ARG int maxCorners=1000, ARG double qualityLevel=0.01, ARG double minDistance=1, ARG int blockSize=3, ARG bool useHarrisDetector=false, ARG double k=0.04]>

--- Incoming ---
[   'cv.GFTTDetector.create',
    'Ptr_GFTTDetector',
    ['/S'],
    [   ['int', 'maxCorners', '', []],
        ['double', 'qualityLevel', '', []],
        ['double', 'minDistance', '', []],
        ['int', 'blockSize', '', []],
        ['int', 'gradiantSize', '', []],
        ['bool', 'useHarrisDetector', 'false', []],
        ['double', 'k', '0.04', []]],
    'Ptr<GFTTDetector>']
ok: FUNC <Ptr_GFTTDetector cv.GFTTDetector.create [ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG int blockSize=, ARG int gradiantSize=, ARG bool useHarrisDetector=false, ARG double k=0.04]>

--- Incoming ---
[   'cv.GFTTDetector.setMaxFeatures',
    'void',
    ['/V', '/PV'],
    [['int', 'maxFeatures', '', []]],
    'void']
ok: FUNC <void cv.GFTTDetector.setMaxFeatures [ARG int maxFeatures=]>

--- Incoming ---
['cv.GFTTDetector.getMaxFeatures', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.GFTTDetector.getMaxFeatures []>

--- Incoming ---
[   'cv.GFTTDetector.setQualityLevel',
    'void',
    ['/V', '/PV'],
    [['double', 'qlevel', '', []]],
    'void']
ok: FUNC <void cv.GFTTDetector.setQualityLevel [ARG double qlevel=]>

--- Incoming ---
['cv.GFTTDetector.getQualityLevel', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.GFTTDetector.getQualityLevel []>

--- Incoming ---
[   'cv.GFTTDetector.setMinDistance',
    'void',
    ['/V', '/PV'],
    [['double', 'minDistance', '', []]],
    'void']
ok: FUNC <void cv.GFTTDetector.setMinDistance [ARG double minDistance=]>

--- Incoming ---
['cv.GFTTDetector.getMinDistance', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.GFTTDetector.getMinDistance []>

--- Incoming ---
[   'cv.GFTTDetector.setBlockSize',
    'void',
    ['/V', '/PV'],
    [['int', 'blockSize', '', []]],
    'void']
ok: FUNC <void cv.GFTTDetector.setBlockSize [ARG int blockSize=]>

--- Incoming ---
['cv.GFTTDetector.getBlockSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.GFTTDetector.getBlockSize []>

--- Incoming ---
[   'cv.GFTTDetector.setHarrisDetector',
    'void',
    ['/V', '/PV'],
    [['bool', 'val', '', []]],
    'void']
ok: FUNC <void cv.GFTTDetector.setHarrisDetector [ARG bool val=]>

--- Incoming ---
['cv.GFTTDetector.getHarrisDetector', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.GFTTDetector.getHarrisDetector []>

--- Incoming ---
[   'cv.GFTTDetector.setK',
    'void',
    ['/V', '/PV'],
    [['double', 'k', '', []]],
    'void']
ok: FUNC <void cv.GFTTDetector.setK [ARG double k=]>

--- Incoming ---
['cv.GFTTDetector.getK', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.GFTTDetector.getK []>

--- Incoming ---
['cv.GFTTDetector.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.GFTTDetector.getDefaultName []>

--- Incoming ---
['class cv.SimpleBlobDetector', ': cv::Feature2D', [], [], None]
ignored: CLASS cv::.SimpleBlobDetector : Feature2D

--- Incoming ---
[   'struct cv.SimpleBlobDetector.Params',
    '',
    ['/Simple'],
    [   ['float', 'thresholdStep', '', ['/RW']],
        ['float', 'minThreshold', '', ['/RW']],
        ['float', 'maxThreshold', '', ['/RW']],
        ['size_t', 'minRepeatability', '', ['/RW']],
        ['float', 'minDistBetweenBlobs', '', ['/RW']],
        ['bool', 'filterByColor', '', ['/RW']],
        ['uchar', 'blobColor', '', ['/RW']],
        ['bool', 'filterByArea', '', ['/RW']],
        ['float', 'minArea', '', ['/RW']],
        ['float', 'maxArea', '', ['/RW']],
        ['bool', 'filterByCircularity', '', ['/RW']],
        ['float', 'minCircularity', '', ['/RW']],
        ['float', 'maxCircularity', '', ['/RW']],
        ['bool', 'filterByInertia', '', ['/RW']],
        ['float', 'minInertiaRatio', '', ['/RW']],
        ['float', 'maxInertiaRatio', '', ['/RW']],
        ['bool', 'filterByConvexity', '', ['/RW']],
        ['float', 'minConvexity', '', ['/RW']],
        ['float', 'maxConvexity', '', ['/RW']]],
    None]
ok: class CLASS cv::SimpleBlobDetector.Params : , name: Params, base: 

--- Incoming ---
['cv.SimpleBlobDetector.Params.Params', '', [], [], None]
ok: FUNC < cv.SimpleBlobDetector.Params.Params []>

--- Incoming ---
[   'cv.SimpleBlobDetector.create',
    'Ptr_SimpleBlobDetector',
    ['/S'],
    [   [   'SimpleBlobDetector_Params',
            'parameters',
            'SimpleBlobDetector::Params()',
            ['/C', '/Ref']]],
    'Ptr<SimpleBlobDetector>']
ignored: FUNC <Ptr_SimpleBlobDetector cv.SimpleBlobDetector.create [ARG SimpleBlobDetector_Params parameters=SimpleBlobDetector::Params()]>

--- Incoming ---
['cv.SimpleBlobDetector.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ignored: FUNC <String cv.SimpleBlobDetector.getDefaultName []>

--- Incoming ---
['class cv.KAZE', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.KAZE : Feature2D, name: KAZE, base: Feature2D

--- Incoming ---
['const cv.KAZE.DIFF_PM_G1', '0', [], [], None]
ok: CONST DIFF_PM_G1=0

--- Incoming ---
['const cv.KAZE.DIFF_PM_G2', '1', [], [], None]
ok: CONST DIFF_PM_G2=1

--- Incoming ---
['const cv.KAZE.DIFF_WEICKERT', '2', [], [], None]
ok: CONST DIFF_WEICKERT=2

--- Incoming ---
['const cv.KAZE.DIFF_CHARBONNIER', '3', [], [], None]
ok: CONST DIFF_CHARBONNIER=3

--- Incoming ---
[   'cv.KAZE.create',
    'Ptr_KAZE',
    ['/S'],
    [   ['bool', 'extended', 'false', []],
        ['bool', 'upright', 'false', []],
        ['float', 'threshold', '0.001f', []],
        ['int', 'nOctaves', '4', []],
        ['int', 'nOctaveLayers', '4', []],
        ['int', 'diffusivity', 'KAZE::DIFF_PM_G2', []]],
    'Ptr<KAZE>']
ok: FUNC <Ptr_KAZE cv.KAZE.create [ARG bool extended=false, ARG bool upright=false, ARG float threshold=0.001f, ARG int nOctaves=4, ARG int nOctaveLayers=4, ARG int diffusivity=KAZE::DIFF_PM_G2]>

--- Incoming ---
[   'cv.KAZE.setExtended',
    'void',
    ['/V', '/PV'],
    [['bool', 'extended', '', []]],
    'void']
ok: FUNC <void cv.KAZE.setExtended [ARG bool extended=]>

--- Incoming ---
['cv.KAZE.getExtended', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.KAZE.getExtended []>

--- Incoming ---
[   'cv.KAZE.setUpright',
    'void',
    ['/V', '/PV'],
    [['bool', 'upright', '', []]],
    'void']
ok: FUNC <void cv.KAZE.setUpright [ARG bool upright=]>

--- Incoming ---
['cv.KAZE.getUpright', 'bool', ['/C', '/V', '/PV'], [], 'bool']
ok: FUNC <bool cv.KAZE.getUpright []>

--- Incoming ---
[   'cv.KAZE.setThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'threshold', '', []]],
    'void']
ok: FUNC <void cv.KAZE.setThreshold [ARG double threshold=]>

--- Incoming ---
['cv.KAZE.getThreshold', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.KAZE.getThreshold []>

--- Incoming ---
[   'cv.KAZE.setNOctaves',
    'void',
    ['/V', '/PV'],
    [['int', 'octaves', '', []]],
    'void']
ok: FUNC <void cv.KAZE.setNOctaves [ARG int octaves=]>

--- Incoming ---
['cv.KAZE.getNOctaves', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.KAZE.getNOctaves []>

--- Incoming ---
[   'cv.KAZE.setNOctaveLayers',
    'void',
    ['/V', '/PV'],
    [['int', 'octaveLayers', '', []]],
    'void']
ok: FUNC <void cv.KAZE.setNOctaveLayers [ARG int octaveLayers=]>

--- Incoming ---
['cv.KAZE.getNOctaveLayers', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.KAZE.getNOctaveLayers []>

--- Incoming ---
[   'cv.KAZE.setDiffusivity',
    'void',
    ['/V', '/PV'],
    [['int', 'diff', '', []]],
    'void']
ok: FUNC <void cv.KAZE.setDiffusivity [ARG int diff=]>

--- Incoming ---
['cv.KAZE.getDiffusivity', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.KAZE.getDiffusivity []>

--- Incoming ---
['cv.KAZE.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.KAZE.getDefaultName []>

--- Incoming ---
['class cv.AKAZE', ': cv::Feature2D', [], [], None]
ok: class CLASS cv::.AKAZE : Feature2D, name: AKAZE, base: Feature2D

--- Incoming ---
['const cv.AKAZE.DESCRIPTOR_KAZE_UPRIGHT', '2', [], [], None]
ok: CONST DESCRIPTOR_KAZE_UPRIGHT=2

--- Incoming ---
['const cv.AKAZE.DESCRIPTOR_KAZE', '3', [], [], None]
ok: CONST DESCRIPTOR_KAZE=3

--- Incoming ---
['const cv.AKAZE.DESCRIPTOR_MLDB_UPRIGHT', '4', [], [], None]
ok: CONST DESCRIPTOR_MLDB_UPRIGHT=4

--- Incoming ---
['const cv.AKAZE.DESCRIPTOR_MLDB', '5', [], [], None]
ok: CONST DESCRIPTOR_MLDB=5

--- Incoming ---
[   'cv.AKAZE.create',
    'Ptr_AKAZE',
    ['/S'],
    [   ['int', 'descriptor_type', 'AKAZE::DESCRIPTOR_MLDB', []],
        ['int', 'descriptor_size', '0', []],
        ['int', 'descriptor_channels', '3', []],
        ['float', 'threshold', '0.001f', []],
        ['int', 'nOctaves', '4', []],
        ['int', 'nOctaveLayers', '4', []],
        ['int', 'diffusivity', 'KAZE::DIFF_PM_G2', []]],
    'Ptr<AKAZE>']
ok: FUNC <Ptr_AKAZE cv.AKAZE.create [ARG int descriptor_type=AKAZE::DESCRIPTOR_MLDB, ARG int descriptor_size=0, ARG int descriptor_channels=3, ARG float threshold=0.001f, ARG int nOctaves=4, ARG int nOctaveLayers=4, ARG int diffusivity=KAZE::DIFF_PM_G2]>

--- Incoming ---
[   'cv.AKAZE.setDescriptorType',
    'void',
    ['/V', '/PV'],
    [['int', 'dtype', '', []]],
    'void']
ok: FUNC <void cv.AKAZE.setDescriptorType [ARG int dtype=]>

--- Incoming ---
['cv.AKAZE.getDescriptorType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AKAZE.getDescriptorType []>

--- Incoming ---
[   'cv.AKAZE.setDescriptorSize',
    'void',
    ['/V', '/PV'],
    [['int', 'dsize', '', []]],
    'void']
ok: FUNC <void cv.AKAZE.setDescriptorSize [ARG int dsize=]>

--- Incoming ---
['cv.AKAZE.getDescriptorSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AKAZE.getDescriptorSize []>

--- Incoming ---
[   'cv.AKAZE.setDescriptorChannels',
    'void',
    ['/V', '/PV'],
    [['int', 'dch', '', []]],
    'void']
ok: FUNC <void cv.AKAZE.setDescriptorChannels [ARG int dch=]>

--- Incoming ---
['cv.AKAZE.getDescriptorChannels', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AKAZE.getDescriptorChannels []>

--- Incoming ---
[   'cv.AKAZE.setThreshold',
    'void',
    ['/V', '/PV'],
    [['double', 'threshold', '', []]],
    'void']
ok: FUNC <void cv.AKAZE.setThreshold [ARG double threshold=]>

--- Incoming ---
['cv.AKAZE.getThreshold', 'double', ['/C', '/V', '/PV'], [], 'double']
ok: FUNC <double cv.AKAZE.getThreshold []>

--- Incoming ---
[   'cv.AKAZE.setNOctaves',
    'void',
    ['/V', '/PV'],
    [['int', 'octaves', '', []]],
    'void']
ok: FUNC <void cv.AKAZE.setNOctaves [ARG int octaves=]>

--- Incoming ---
['cv.AKAZE.getNOctaves', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AKAZE.getNOctaves []>

--- Incoming ---
[   'cv.AKAZE.setNOctaveLayers',
    'void',
    ['/V', '/PV'],
    [['int', 'octaveLayers', '', []]],
    'void']
ok: FUNC <void cv.AKAZE.setNOctaveLayers [ARG int octaveLayers=]>

--- Incoming ---
['cv.AKAZE.getNOctaveLayers', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AKAZE.getNOctaveLayers []>

--- Incoming ---
[   'cv.AKAZE.setDiffusivity',
    'void',
    ['/V', '/PV'],
    [['int', 'diff', '', []]],
    'void']
ok: FUNC <void cv.AKAZE.setDiffusivity [ARG int diff=]>

--- Incoming ---
['cv.AKAZE.getDiffusivity', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.AKAZE.getDiffusivity []>

--- Incoming ---
['cv.AKAZE.getDefaultName', 'String', ['/C', '/V'], [], 'String']
ok: FUNC <String cv.AKAZE.getDefaultName []>

--- Incoming ---
['class cv.DescriptorMatcher', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.DescriptorMatcher : Algorithm, name: DescriptorMatcher, base: Algorithm

--- Incoming ---
['const cv.DescriptorMatcher.FLANNBASED', '1', [], [], None]
ok: CONST FLANNBASED=1

--- Incoming ---
['const cv.DescriptorMatcher.BRUTEFORCE', '2', [], [], None]
ok: CONST BRUTEFORCE=2

--- Incoming ---
['const cv.DescriptorMatcher.BRUTEFORCE_L1', '3', [], [], None]
ok: CONST BRUTEFORCE_L1=3

--- Incoming ---
['const cv.DescriptorMatcher.BRUTEFORCE_HAMMING', '4', [], [], None]
ok: CONST BRUTEFORCE_HAMMING=4

--- Incoming ---
['const cv.DescriptorMatcher.BRUTEFORCE_HAMMINGLUT', '5', [], [], None]
ok: CONST BRUTEFORCE_HAMMINGLUT=5

--- Incoming ---
['const cv.DescriptorMatcher.BRUTEFORCE_SL2', '6', [], [], None]
ok: CONST BRUTEFORCE_SL2=6

--- Incoming ---
[   'cv.DescriptorMatcher.add',
    'void',
    ['/V'],
    [['vector_Mat', 'descriptors', '', []]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.add [ARG vector_Mat descriptors=]>

--- Incoming ---
[   'cv.DescriptorMatcher.getTrainDescriptors',
    'vector_Mat',
    ['/C'],
    [],
    'std::vector<Mat>']
ok: FUNC <vector_Mat cv.DescriptorMatcher.getTrainDescriptors []>

--- Incoming ---
['cv.DescriptorMatcher.clear', 'void', ['/V'], [], 'void']
ok: FUNC <void cv.DescriptorMatcher.clear []>

--- Incoming ---
['cv.DescriptorMatcher.empty', 'bool', ['/C', '/V'], [], 'bool']
ok: FUNC <bool cv.DescriptorMatcher.empty []>

--- Incoming ---
[   'cv.DescriptorMatcher.isMaskSupported',
    'bool',
    ['/C', '/V', '/PV'],
    [],
    'bool']
ok: FUNC <bool cv.DescriptorMatcher.isMaskSupported []>

--- Incoming ---
['cv.DescriptorMatcher.train', 'void', ['/V'], [], 'void']
ok: FUNC <void cv.DescriptorMatcher.train []>

--- Incoming ---
[   'cv.DescriptorMatcher.match',
    'void',
    ['/C'],
    [   ['Mat', 'queryDescriptors', '', []],
        ['Mat', 'trainDescriptors', '', []],
        ['vector_DMatch', 'matches', '', ['/O', '/Ref']],
        ['Mat', 'mask', 'Mat()', []]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.match [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_DMatch matches=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.DescriptorMatcher.knnMatch',
    'void',
    ['/C'],
    [   ['Mat', 'queryDescriptors', '', []],
        ['Mat', 'trainDescriptors', '', []],
        ['vector_vector_DMatch', 'matches', '', ['/O', '/Ref']],
        ['int', 'k', '', []],
        ['Mat', 'mask', 'Mat()', []],
        ['bool', 'compactResult', 'false', []]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.knnMatch [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_vector_DMatch matches=, ARG int k=, ARG Mat mask=Mat(), ARG bool compactResult=false]>

--- Incoming ---
[   'cv.DescriptorMatcher.radiusMatch',
    'void',
    ['/C'],
    [   ['Mat', 'queryDescriptors', '', []],
        ['Mat', 'trainDescriptors', '', []],
        ['vector_vector_DMatch', 'matches', '', ['/O', '/Ref']],
        ['float', 'maxDistance', '', []],
        ['Mat', 'mask', 'Mat()', []],
        ['bool', 'compactResult', 'false', []]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.radiusMatch [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_vector_DMatch matches=, ARG float maxDistance=, ARG Mat mask=Mat(), ARG bool compactResult=false]>

--- Incoming ---
[   'cv.DescriptorMatcher.match',
    'void',
    [],
    [   ['Mat', 'queryDescriptors', '', []],
        ['vector_DMatch', 'matches', '', ['/O', '/Ref']],
        ['vector_Mat', 'masks', 'vector_Mat()', []]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.match [ARG Mat queryDescriptors=, ARG vector_DMatch matches=, ARG vector_Mat masks=vector_Mat()]>

--- Incoming ---
[   'cv.DescriptorMatcher.knnMatch',
    'void',
    [],
    [   ['Mat', 'queryDescriptors', '', []],
        ['vector_vector_DMatch', 'matches', '', ['/O', '/Ref']],
        ['int', 'k', '', []],
        ['vector_Mat', 'masks', 'vector_Mat()', []],
        ['bool', 'compactResult', 'false', []]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.knnMatch [ARG Mat queryDescriptors=, ARG vector_vector_DMatch matches=, ARG int k=, ARG vector_Mat masks=vector_Mat(), ARG bool compactResult=false]>

--- Incoming ---
[   'cv.DescriptorMatcher.radiusMatch',
    'void',
    [],
    [   ['Mat', 'queryDescriptors', '', []],
        ['vector_vector_DMatch', 'matches', '', ['/O', '/Ref']],
        ['float', 'maxDistance', '', []],
        ['vector_Mat', 'masks', 'vector_Mat()', []],
        ['bool', 'compactResult', 'false', []]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.radiusMatch [ARG Mat queryDescriptors=, ARG vector_vector_DMatch matches=, ARG float maxDistance=, ARG vector_Mat masks=vector_Mat(), ARG bool compactResult=false]>

--- Incoming ---
[   'cv.DescriptorMatcher.write',
    'void',
    ['/C'],
    [['String', 'fileName', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.write [ARG String fileName=]>

--- Incoming ---
[   'cv.DescriptorMatcher.read',
    'void',
    [],
    [['String', 'fileName', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.read [ARG String fileName=]>

--- Incoming ---
[   'cv.DescriptorMatcher.read',
    'void',
    ['/V'],
    [['FileNode', 'arg1', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.read [ARG FileNode arg1=]>

--- Incoming ---
[   'cv.DescriptorMatcher.clone',
    'Ptr_DescriptorMatcher',
    ['/C', '/V', '/PV'],
    [['bool', 'emptyTrainData', 'false', []]],
    'Ptr<DescriptorMatcher>']
ok: FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.clone [ARG bool emptyTrainData=false]>

--- Incoming ---
[   'cv.DescriptorMatcher.create',
    'Ptr_DescriptorMatcher',
    ['/S'],
    [['String', 'descriptorMatcherType', '', ['/C', '/Ref']]],
    'Ptr<DescriptorMatcher>']
ok: FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.create [ARG String descriptorMatcherType=]>

--- Incoming ---
[   'cv.DescriptorMatcher.create',
    'Ptr_DescriptorMatcher',
    ['/S'],
    [['int', 'matcherType', '', []]],
    'Ptr<DescriptorMatcher>']
ok: FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.create [ARG int matcherType=]>

--- Incoming ---
[   'cv.DescriptorMatcher.write',
    'void',
    ['/C'],
    [   ['Ptr_FileStorage', 'fs', '', ['/C', '/Ref']],
        ['String', 'name', 'String()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.DescriptorMatcher.write [ARG Ptr_FileStorage fs=, ARG String name=String()]>

--- Incoming ---
['class cv.BFMatcher', ': cv::DescriptorMatcher', [], [], None]
ok: class CLASS cv::.BFMatcher : DescriptorMatcher, name: BFMatcher, base: DescriptorMatcher

--- Incoming ---
[   'cv.BFMatcher.BFMatcher',
    '',
    [],
    [['int', 'normType', 'NORM_L2', []], ['bool', 'crossCheck', 'false', []]],
    None]
ok: FUNC < cv.BFMatcher.BFMatcher [ARG int normType=NORM_L2, ARG bool crossCheck=false]>

--- Incoming ---
[   'cv.BFMatcher.create',
    'Ptr_BFMatcher',
    ['/S'],
    [['int', 'normType', 'NORM_L2', []], ['bool', 'crossCheck', 'false', []]],
    'Ptr<BFMatcher>']
ok: FUNC <Ptr_BFMatcher cv.BFMatcher.create [ARG int normType=NORM_L2, ARG bool crossCheck=false]>

--- Incoming ---
['class cv.FlannBasedMatcher', ': cv::DescriptorMatcher', [], [], None]
ok: class CLASS cv::.FlannBasedMatcher : DescriptorMatcher, name: FlannBasedMatcher, base: DescriptorMatcher

--- Incoming ---
[   'cv.FlannBasedMatcher.FlannBasedMatcher',
    '',
    [],
    [   [   'Ptr_flann_IndexParams',
            'indexParams',
            'makePtr<flann::KDTreeIndexParams>()',
            ['/C', '/Ref']],
        [   'Ptr_flann_SearchParams',
            'searchParams',
            'makePtr<flann::SearchParams>()',
            ['/C', '/Ref']]],
    None]
ok: FUNC < cv.FlannBasedMatcher.FlannBasedMatcher [ARG Ptr_flann_IndexParams indexParams=makePtr<flann::KDTreeIndexParams>(), ARG Ptr_flann_SearchParams searchParams=makePtr<flann::SearchParams>()]>

--- Incoming ---
[   'cv.FlannBasedMatcher.create',
    'Ptr_FlannBasedMatcher',
    ['/S'],
    [],
    'Ptr<FlannBasedMatcher>']
ok: FUNC <Ptr_FlannBasedMatcher cv.FlannBasedMatcher.create []>

--- Incoming ---
['const cv.DrawMatchesFlags.DEFAULT', '0', [], [], None]
class not found: CONST DEFAULT=0

--- Incoming ---
['const cv.DrawMatchesFlags.DRAW_OVER_OUTIMG', '1', [], [], None]
class not found: CONST DRAW_OVER_OUTIMG=1

--- Incoming ---
['const cv.DrawMatchesFlags.NOT_DRAW_SINGLE_POINTS', '2', [], [], None]
class not found: CONST NOT_DRAW_SINGLE_POINTS=2

--- Incoming ---
['const cv.DrawMatchesFlags.DRAW_RICH_KEYPOINTS', '4', [], [], None]
class not found: CONST DRAW_RICH_KEYPOINTS=4

--- Incoming ---
[   'cv.drawKeypoints',
    'void',
    [],
    [   ['Mat', 'image', '', []],
        ['vector_KeyPoint', 'keypoints', '', ['/C', '/Ref']],
        ['Mat', 'outImage', '', ['/IO']],
        ['Scalar', 'color', 'Scalar::all(-1)', ['/C', '/Ref']],
        ['int', 'flags', 'DrawMatchesFlags::DEFAULT', []]],
    'void']
ok: FUNC <void cv..drawKeypoints [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat outImage=, ARG Scalar color=Scalar::all(-1), ARG int flags=DrawMatchesFlags::DEFAULT]>

--- Incoming ---
[   'cv.drawMatches',
    'void',
    [],
    [   ['Mat', 'img1', '', []],
        ['vector_KeyPoint', 'keypoints1', '', ['/C', '/Ref']],
        ['Mat', 'img2', '', []],
        ['vector_KeyPoint', 'keypoints2', '', ['/C', '/Ref']],
        ['vector_DMatch', 'matches1to2', '', ['/C', '/Ref']],
        ['Mat', 'outImg', '', ['/IO']],
        ['Scalar', 'matchColor', 'Scalar::all(-1)', ['/C', '/Ref']],
        ['Scalar', 'singlePointColor', 'Scalar::all(-1)', ['/C', '/Ref']],
        ['vector_char', 'matchesMask', 'std::vector<char>()', ['/C', '/Ref']],
        ['int', 'flags', 'DrawMatchesFlags::DEFAULT', []]],
    'void']
ok: FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_char matchesMask=std::vector<char>(), ARG int flags=DrawMatchesFlags::DEFAULT]>

--- Incoming ---
[   'cv.drawMatches',
    'void',
    ['=drawMatchesKnn'],
    [   ['Mat', 'img1', '', []],
        ['vector_KeyPoint', 'keypoints1', '', ['/C', '/Ref']],
        ['Mat', 'img2', '', []],
        ['vector_KeyPoint', 'keypoints2', '', ['/C', '/Ref']],
        ['vector_vector_DMatch', 'matches1to2', '', ['/C', '/Ref']],
        ['Mat', 'outImg', '', ['/IO']],
        ['Scalar', 'matchColor', 'Scalar::all(-1)', ['/C', '/Ref']],
        ['Scalar', 'singlePointColor', 'Scalar::all(-1)', ['/C', '/Ref']],
        [   'vector_vector_char',
            'matchesMask',
            'std::vector<std::vector<char> >()',
            ['/C', '/Ref']],
        ['int', 'flags', 'DrawMatchesFlags::DEFAULT', []]],
    'void']
ok: FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_vector_char matchesMask=std::vector<std::vector<char> >(), ARG int flags=DrawMatchesFlags::DEFAULT]>

--- Incoming ---
['class cv.BOWTrainer', '', [], [], None]
ok: class CLASS cv::.BOWTrainer : , name: BOWTrainer, base: 

--- Incoming ---
[   'cv.BOWTrainer.add',
    'void',
    [],
    [['Mat', 'descriptors', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.BOWTrainer.add [ARG Mat descriptors=]>

--- Incoming ---
['cv.BOWTrainer.getDescriptors', 'vector_Mat', ['/C'], [], 'std::vector<Mat>']
ok: FUNC <vector_Mat cv.BOWTrainer.getDescriptors []>

--- Incoming ---
['cv.BOWTrainer.descriptorsCount', 'int', ['/C'], [], 'int']
ok: FUNC <int cv.BOWTrainer.descriptorsCount []>

--- Incoming ---
['cv.BOWTrainer.clear', 'void', ['/V'], [], 'void']
ok: FUNC <void cv.BOWTrainer.clear []>

--- Incoming ---
['cv.BOWTrainer.cluster', 'Mat', ['/C', '/V', '/PV'], [], 'Mat']
ok: FUNC <Mat cv.BOWTrainer.cluster []>

--- Incoming ---
[   'cv.BOWTrainer.cluster',
    'Mat',
    ['/C', '/V', '/PV'],
    [['Mat', 'descriptors', '', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv.BOWTrainer.cluster [ARG Mat descriptors=]>

--- Incoming ---
['class cv.BOWKMeansTrainer', ': cv::BOWTrainer', [], [], None]
ok: class CLASS cv::.BOWKMeansTrainer : BOWTrainer, name: BOWKMeansTrainer, base: BOWTrainer

--- Incoming ---
[   'cv.BOWKMeansTrainer.BOWKMeansTrainer',
    '',
    [],
    [   ['int', 'clusterCount', '', []],
        ['TermCriteria', 'termcrit', 'TermCriteria()', ['/C', '/Ref']],
        ['int', 'attempts', '3', []],
        ['int', 'flags', 'KMEANS_PP_CENTERS', []]],
    None]
ok: FUNC < cv.BOWKMeansTrainer.BOWKMeansTrainer [ARG int clusterCount=, ARG TermCriteria termcrit=TermCriteria(), ARG int attempts=3, ARG int flags=KMEANS_PP_CENTERS]>

--- Incoming ---
['cv.BOWKMeansTrainer.cluster', 'Mat', ['/C', '/V'], [], 'Mat']
ok: FUNC <Mat cv.BOWKMeansTrainer.cluster []>

--- Incoming ---
[   'cv.BOWKMeansTrainer.cluster',
    'Mat',
    ['/C', '/V'],
    [['Mat', 'descriptors', '', ['/C', '/Ref']]],
    'Mat']
ok: FUNC <Mat cv.BOWKMeansTrainer.cluster [ARG Mat descriptors=]>

--- Incoming ---
['class cv.BOWImgDescriptorExtractor', '', [], [], None]
ok: class CLASS cv::.BOWImgDescriptorExtractor : , name: BOWImgDescriptorExtractor, base: 

--- Incoming ---
[   'cv.BOWImgDescriptorExtractor.BOWImgDescriptorExtractor',
    '',
    [],
    [   ['Ptr_DescriptorExtractor', 'dextractor', '', ['/C', '/Ref']],
        ['Ptr_DescriptorMatcher', 'dmatcher', '', ['/C', '/Ref']]],
    None]
ok: FUNC < cv.BOWImgDescriptorExtractor.BOWImgDescriptorExtractor [ARG Ptr_DescriptorExtractor dextractor=, ARG Ptr_DescriptorMatcher dmatcher=]>

--- Incoming ---
[   'cv.BOWImgDescriptorExtractor.setVocabulary',
    'void',
    [],
    [['Mat', 'vocabulary', '', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.BOWImgDescriptorExtractor.setVocabulary [ARG Mat vocabulary=]>

--- Incoming ---
['cv.BOWImgDescriptorExtractor.getVocabulary', 'Mat', ['/C'], [], 'Mat']
ok: FUNC <Mat cv.BOWImgDescriptorExtractor.getVocabulary []>

--- Incoming ---
[   'cv.BOWImgDescriptorExtractor.compute2',
    'void',
    ['=compute'],
    [   ['Mat', 'image', '', ['/C', '/Ref']],
        ['vector_KeyPoint', 'keypoints', '', ['/Ref']],
        ['Mat', 'imgDescriptor', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv.BOWImgDescriptorExtractor.compute2 [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat imgDescriptor=]>

--- Incoming ---
['cv.BOWImgDescriptorExtractor.descriptorSize', 'int', ['/C'], [], 'int']
ok: FUNC <int cv.BOWImgDescriptorExtractor.descriptorSize []>

--- Incoming ---
['cv.BOWImgDescriptorExtractor.descriptorType', 'int', ['/C'], [], 'int']
ok: FUNC <int cv.BOWImgDescriptorExtractor.descriptorType []>


===== Generating... =====
CLASS ::.Features2d : 
FUNC <void cv..drawKeypoints [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat outImage=, ARG Scalar color=Scalar::all(-1), ARG int flags=DrawMatchesFlags::DEFAULT]>
java: void drawKeypoints(Mat image, MatOfKeyPoint keypoints, Mat outImage, Scalar color, int flags)
java: void drawKeypoints(Mat image, MatOfKeyPoint keypoints, Mat outImage, Scalar color)
java: void drawKeypoints(Mat image, MatOfKeyPoint keypoints, Mat outImage)
FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_char matchesMask=std::vector<char>(), ARG int flags=DrawMatchesFlags::DEFAULT]>
java: void drawMatches(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, MatOfDMatch matches1to2, Mat outImg, Scalar matchColor, Scalar singlePointColor, MatOfByte matchesMask, int flags)
java: void drawMatches(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, MatOfDMatch matches1to2, Mat outImg, Scalar matchColor, Scalar singlePointColor, MatOfByte matchesMask)
java: void drawMatches(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, MatOfDMatch matches1to2, Mat outImg, Scalar matchColor, Scalar singlePointColor)
java: void drawMatches(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, MatOfDMatch matches1to2, Mat outImg, Scalar matchColor)
java: void drawMatches(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, MatOfDMatch matches1to2, Mat outImg)
FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_vector_char matchesMask=std::vector<std::vector<char> >(), ARG int flags=DrawMatchesFlags::DEFAULT]>
java: void drawMatchesKnn(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, List<MatOfDMatch> matches1to2, Mat outImg, Scalar matchColor, Scalar singlePointColor, List<MatOfByte> matchesMask, int flags)
java: void drawMatchesKnn(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, List<MatOfDMatch> matches1to2, Mat outImg, Scalar matchColor, Scalar singlePointColor, List<MatOfByte> matchesMask)
java: void drawMatchesKnn(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, List<MatOfDMatch> matches1to2, Mat outImg, Scalar matchColor, Scalar singlePointColor)
java: void drawMatchesKnn(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, List<MatOfDMatch> matches1to2, Mat outImg, Scalar matchColor)
java: void drawMatchesKnn(Mat img1, MatOfKeyPoint keypoints1, Mat img2, MatOfKeyPoint keypoints2, List<MatOfDMatch> matches1to2, Mat outImg)
CLASS cv::.Feature2D : Algorithm
FUNC <String cv.Feature2D.getDefaultName []>
java: String getDefaultName()
FUNC <bool cv.Feature2D.empty []>
java: boolean empty()
FUNC <int cv.Feature2D.defaultNorm []>
java: int defaultNorm()
FUNC <int cv.Feature2D.descriptorSize []>
java: int descriptorSize()
FUNC <int cv.Feature2D.descriptorType []>
java: int descriptorType()
FUNC <void cv.Feature2D.compute [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat descriptors=]>
java: void compute(Mat image, MatOfKeyPoint keypoints, Mat descriptors)
FUNC <void cv.Feature2D.compute [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat descriptors=]>
java: void compute(List<Mat> images, List<MatOfKeyPoint> keypoints, List<Mat> descriptors)
FUNC <void cv.Feature2D.detect [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat mask=Mat()]>
java: void detect(Mat image, MatOfKeyPoint keypoints, Mat mask)
java: void detect(Mat image, MatOfKeyPoint keypoints)
FUNC <void cv.Feature2D.detect [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat masks=vector_Mat()]>
java: void detect(List<Mat> images, List<MatOfKeyPoint> keypoints, List<Mat> masks)
java: void detect(List<Mat> images, List<MatOfKeyPoint> keypoints)
FUNC <void cv.Feature2D.detectAndCompute [ARG Mat image=, ARG Mat mask=, ARG vector_KeyPoint keypoints=, ARG Mat descriptors=, ARG bool useProvidedKeypoints=false]>
java: void detectAndCompute(Mat image, Mat mask, MatOfKeyPoint keypoints, Mat descriptors, boolean useProvidedKeypoints)
java: void detectAndCompute(Mat image, Mat mask, MatOfKeyPoint keypoints, Mat descriptors)
FUNC <void cv.Feature2D.read [ARG FileNode arg1=]>
SKIP:void cv::Feature2D::read(FileNode arg1)	 due to ARG typeFileNode/I
FUNC <void cv.Feature2D.read [ARG String fileName=]>
java: void read(String fileName)
FUNC <void cv.Feature2D.write [ARG Ptr_FileStorage fs=, ARG String name=String()]>
SKIP:void cv::Feature2D::write(Ptr_FileStorage fs, String name = String())	 due to ARG typePtr_FileStorage/I
FUNC <void cv.Feature2D.write [ARG String fileName=]>
java: void write(String fileName)
CLASS cv::.BRISK : Feature2D
FUNC <Ptr_BRISK cv.BRISK.create [ARG int thresh=, ARG int octaves=, ARG vector_float radiusList=, ARG vector_int numberList=, ARG float dMax=5.85f, ARG float dMin=8.2f, ARG vector_int indexChange=std::vector<int>()]>
java: BRISK create(int thresh, int octaves, MatOfFloat radiusList, MatOfInt numberList, float dMax, float dMin, MatOfInt indexChange)
java: BRISK create(int thresh, int octaves, MatOfFloat radiusList, MatOfInt numberList, float dMax, float dMin)
java: BRISK create(int thresh, int octaves, MatOfFloat radiusList, MatOfInt numberList, float dMax)
java: BRISK create(int thresh, int octaves, MatOfFloat radiusList, MatOfInt numberList)
FUNC <Ptr_BRISK cv.BRISK.create [ARG int thresh=30, ARG int octaves=3, ARG float patternScale=1.0f]>
java: BRISK create(int thresh, int octaves, float patternScale)
java: BRISK create(int thresh, int octaves)
java: BRISK create(int thresh)
java: BRISK create()
FUNC <Ptr_BRISK cv.BRISK.create [ARG vector_float radiusList=, ARG vector_int numberList=, ARG float dMax=5.85f, ARG float dMin=8.2f, ARG vector_int indexChange=std::vector<int>()]>
java: BRISK create(MatOfFloat radiusList, MatOfInt numberList, float dMax, float dMin, MatOfInt indexChange)
java: BRISK create(MatOfFloat radiusList, MatOfInt numberList, float dMax, float dMin)
java: BRISK create(MatOfFloat radiusList, MatOfInt numberList, float dMax)
java: BRISK create(MatOfFloat radiusList, MatOfInt numberList)
FUNC <String cv.BRISK.getDefaultName []>
java: String getDefaultName()
CLASS cv::.ORB : Feature2D
[CONST kBytes=32, CONST HARRIS_SCORE=0, CONST FAST_SCORE=1]
FUNC <Ptr_ORB cv.ORB.create [ARG int nfeatures=500, ARG float scaleFactor=1.2f, ARG int nlevels=8, ARG int edgeThreshold=31, ARG int firstLevel=0, ARG int WTA_K=2, ARG int scoreType=ORB::HARRIS_SCORE, ARG int patchSize=31, ARG int fastThreshold=20]>
java: ORB create(int nfeatures, float scaleFactor, int nlevels, int edgeThreshold, int firstLevel, int WTA_K, int scoreType, int patchSize, int fastThreshold)
java: ORB create(int nfeatures, float scaleFactor, int nlevels, int edgeThreshold, int firstLevel, int WTA_K, int scoreType, int patchSize)
java: ORB create(int nfeatures, float scaleFactor, int nlevels, int edgeThreshold, int firstLevel, int WTA_K, int scoreType)
java: ORB create(int nfeatures, float scaleFactor, int nlevels, int edgeThreshold, int firstLevel, int WTA_K)
java: ORB create(int nfeatures, float scaleFactor, int nlevels, int edgeThreshold, int firstLevel)
java: ORB create(int nfeatures, float scaleFactor, int nlevels, int edgeThreshold)
java: ORB create(int nfeatures, float scaleFactor, int nlevels)
java: ORB create(int nfeatures, float scaleFactor)
java: ORB create(int nfeatures)
java: ORB create()
FUNC <String cv.ORB.getDefaultName []>
java: String getDefaultName()
FUNC <double cv.ORB.getScaleFactor []>
java: double getScaleFactor()
FUNC <int cv.ORB.getEdgeThreshold []>
java: int getEdgeThreshold()
FUNC <int cv.ORB.getFastThreshold []>
java: int getFastThreshold()
FUNC <int cv.ORB.getFirstLevel []>
java: int getFirstLevel()
FUNC <int cv.ORB.getMaxFeatures []>
java: int getMaxFeatures()
FUNC <int cv.ORB.getNLevels []>
java: int getNLevels()
FUNC <int cv.ORB.getPatchSize []>
java: int getPatchSize()
FUNC <int cv.ORB.getScoreType []>
java: int getScoreType()
FUNC <int cv.ORB.getWTA_K []>
java: int getWTA_K()
FUNC <void cv.ORB.setEdgeThreshold [ARG int edgeThreshold=]>
java: void setEdgeThreshold(int edgeThreshold)
FUNC <void cv.ORB.setFastThreshold [ARG int fastThreshold=]>
java: void setFastThreshold(int fastThreshold)
FUNC <void cv.ORB.setFirstLevel [ARG int firstLevel=]>
java: void setFirstLevel(int firstLevel)
FUNC <void cv.ORB.setMaxFeatures [ARG int maxFeatures=]>
java: void setMaxFeatures(int maxFeatures)
FUNC <void cv.ORB.setNLevels [ARG int nlevels=]>
java: void setNLevels(int nlevels)
FUNC <void cv.ORB.setPatchSize [ARG int patchSize=]>
java: void setPatchSize(int patchSize)
FUNC <void cv.ORB.setScaleFactor [ARG double scaleFactor=]>
java: void setScaleFactor(double scaleFactor)
FUNC <void cv.ORB.setScoreType [ARG int scoreType=]>
java: void setScoreType(int scoreType)
FUNC <void cv.ORB.setWTA_K [ARG int wta_k=]>
java: void setWTA_K(int wta_k)
CLASS cv::.MSER : Feature2D
FUNC <Ptr_MSER cv.MSER.create [ARG int _delta=5, ARG int _min_area=60, ARG int _max_area=14400, ARG double _max_variation=0.25, ARG double _min_diversity=.2, ARG int _max_evolution=200, ARG double _area_threshold=1.01, ARG double _min_margin=0.003, ARG int _edge_blur_size=5]>
java: MSER create(int _delta, int _min_area, int _max_area, double _max_variation, double _min_diversity, int _max_evolution, double _area_threshold, double _min_margin, int _edge_blur_size)
java: MSER create(int _delta, int _min_area, int _max_area, double _max_variation, double _min_diversity, int _max_evolution, double _area_threshold, double _min_margin)
java: MSER create(int _delta, int _min_area, int _max_area, double _max_variation, double _min_diversity, int _max_evolution, double _area_threshold)
java: MSER create(int _delta, int _min_area, int _max_area, double _max_variation, double _min_diversity, int _max_evolution)
java: MSER create(int _delta, int _min_area, int _max_area, double _max_variation, double _min_diversity)
java: MSER create(int _delta, int _min_area, int _max_area, double _max_variation)
java: MSER create(int _delta, int _min_area, int _max_area)
java: MSER create(int _delta, int _min_area)
java: MSER create(int _delta)
java: MSER create()
FUNC <String cv.MSER.getDefaultName []>
java: String getDefaultName()
FUNC <bool cv.MSER.getPass2Only []>
java: boolean getPass2Only()
FUNC <int cv.MSER.getDelta []>
java: int getDelta()
FUNC <int cv.MSER.getMaxArea []>
java: int getMaxArea()
FUNC <int cv.MSER.getMinArea []>
java: int getMinArea()
FUNC <void cv.MSER.detectRegions [ARG Mat image=, ARG vector_vector_Point msers=, ARG vector_Rect bboxes=]>
java: void detectRegions(Mat image, List<MatOfPoint> msers, MatOfRect bboxes)
FUNC <void cv.MSER.setDelta [ARG int delta=]>
java: void setDelta(int delta)
FUNC <void cv.MSER.setMaxArea [ARG int maxArea=]>
java: void setMaxArea(int maxArea)
FUNC <void cv.MSER.setMinArea [ARG int minArea=]>
java: void setMinArea(int minArea)
FUNC <void cv.MSER.setPass2Only [ARG bool f=]>
java: void setPass2Only(boolean f)
CLASS cv::.FastFeatureDetector : Feature2D
[CONST TYPE_5_8=0, CONST TYPE_7_12=1, CONST TYPE_9_16=2, CONST THRESHOLD=10000, CONST NONMAX_SUPPRESSION=10001, CONST FAST_N=10002]
FUNC <Ptr_FastFeatureDetector cv.FastFeatureDetector.create [ARG int threshold=10, ARG bool nonmaxSuppression=true, ARG int type=FastFeatureDetector::TYPE_9_16]>
java: FastFeatureDetector create(int threshold, boolean nonmaxSuppression, int type)
java: FastFeatureDetector create(int threshold, boolean nonmaxSuppression)
java: FastFeatureDetector create(int threshold)
java: FastFeatureDetector create()
FUNC <String cv.FastFeatureDetector.getDefaultName []>
java: String getDefaultName()
FUNC <bool cv.FastFeatureDetector.getNonmaxSuppression []>
java: boolean getNonmaxSuppression()
FUNC <int cv.FastFeatureDetector.getThreshold []>
java: int getThreshold()
FUNC <int cv.FastFeatureDetector.getType []>
java: int getType()
FUNC <void cv.FastFeatureDetector.setNonmaxSuppression [ARG bool f=]>
java: void setNonmaxSuppression(boolean f)
FUNC <void cv.FastFeatureDetector.setThreshold [ARG int threshold=]>
java: void setThreshold(int threshold)
FUNC <void cv.FastFeatureDetector.setType [ARG int type=]>
java: void setType(int type)
CLASS cv::.AgastFeatureDetector : Feature2D
[CONST AGAST_5_8=0, CONST AGAST_7_12d=1, CONST AGAST_7_12s=2, CONST OAST_9_16=3, CONST THRESHOLD=10000, CONST NONMAX_SUPPRESSION=10001]
FUNC <Ptr_AgastFeatureDetector cv.AgastFeatureDetector.create [ARG int threshold=10, ARG bool nonmaxSuppression=true, ARG int type=AgastFeatureDetector::OAST_9_16]>
java: AgastFeatureDetector create(int threshold, boolean nonmaxSuppression, int type)
java: AgastFeatureDetector create(int threshold, boolean nonmaxSuppression)
java: AgastFeatureDetector create(int threshold)
java: AgastFeatureDetector create()
FUNC <String cv.AgastFeatureDetector.getDefaultName []>
java: String getDefaultName()
FUNC <bool cv.AgastFeatureDetector.getNonmaxSuppression []>
java: boolean getNonmaxSuppression()
FUNC <int cv.AgastFeatureDetector.getThreshold []>
java: int getThreshold()
FUNC <int cv.AgastFeatureDetector.getType []>
java: int getType()
FUNC <void cv.AgastFeatureDetector.setNonmaxSuppression [ARG bool f=]>
java: void setNonmaxSuppression(boolean f)
FUNC <void cv.AgastFeatureDetector.setThreshold [ARG int threshold=]>
java: void setThreshold(int threshold)
FUNC <void cv.AgastFeatureDetector.setType [ARG int type=]>
java: void setType(int type)
CLASS cv::.GFTTDetector : Feature2D
FUNC <Ptr_GFTTDetector cv.GFTTDetector.create [ARG int maxCorners=, ARG double qualityLevel=, ARG double minDistance=, ARG int blockSize=, ARG int gradiantSize=, ARG bool useHarrisDetector=false, ARG double k=0.04]>
java: GFTTDetector create(int maxCorners, double qualityLevel, double minDistance, int blockSize, int gradiantSize, boolean useHarrisDetector, double k)
java: GFTTDetector create(int maxCorners, double qualityLevel, double minDistance, int blockSize, int gradiantSize, boolean useHarrisDetector)
java: GFTTDetector create(int maxCorners, double qualityLevel, double minDistance, int blockSize, int gradiantSize)
FUNC <Ptr_GFTTDetector cv.GFTTDetector.create [ARG int maxCorners=1000, ARG double qualityLevel=0.01, ARG double minDistance=1, ARG int blockSize=3, ARG bool useHarrisDetector=false, ARG double k=0.04]>
java: GFTTDetector create(int maxCorners, double qualityLevel, double minDistance, int blockSize, boolean useHarrisDetector, double k)
java: GFTTDetector create(int maxCorners, double qualityLevel, double minDistance, int blockSize, boolean useHarrisDetector)
java: GFTTDetector create(int maxCorners, double qualityLevel, double minDistance, int blockSize)
java: GFTTDetector create(int maxCorners, double qualityLevel, double minDistance)
java: GFTTDetector create(int maxCorners, double qualityLevel)
java: GFTTDetector create(int maxCorners)
java: GFTTDetector create()
FUNC <String cv.GFTTDetector.getDefaultName []>
java: String getDefaultName()
FUNC <bool cv.GFTTDetector.getHarrisDetector []>
java: boolean getHarrisDetector()
FUNC <double cv.GFTTDetector.getK []>
java: double getK()
FUNC <double cv.GFTTDetector.getMinDistance []>
java: double getMinDistance()
FUNC <double cv.GFTTDetector.getQualityLevel []>
java: double getQualityLevel()
FUNC <int cv.GFTTDetector.getBlockSize []>
java: int getBlockSize()
FUNC <int cv.GFTTDetector.getMaxFeatures []>
java: int getMaxFeatures()
FUNC <void cv.GFTTDetector.setBlockSize [ARG int blockSize=]>
java: void setBlockSize(int blockSize)
FUNC <void cv.GFTTDetector.setHarrisDetector [ARG bool val=]>
java: void setHarrisDetector(boolean val)
FUNC <void cv.GFTTDetector.setK [ARG double k=]>
java: void setK(double k)
FUNC <void cv.GFTTDetector.setMaxFeatures [ARG int maxFeatures=]>
java: void setMaxFeatures(int maxFeatures)
FUNC <void cv.GFTTDetector.setMinDistance [ARG double minDistance=]>
java: void setMinDistance(double minDistance)
FUNC <void cv.GFTTDetector.setQualityLevel [ARG double qlevel=]>
java: void setQualityLevel(double qlevel)
CLASS cv::SimpleBlobDetector.Params : 
FUNC < cv.SimpleBlobDetector.Params.Params []>
java:  Params()
FUNC <float cv.SimpleBlobDetector.Params.get_thresholdStep []>
java: float get_thresholdStep()
FUNC <void cv.SimpleBlobDetector.Params.set_thresholdStep [ARG float thresholdStep=]>
java: void set_thresholdStep(float thresholdStep)
FUNC <float cv.SimpleBlobDetector.Params.get_minThreshold []>
java: float get_minThreshold()
FUNC <void cv.SimpleBlobDetector.Params.set_minThreshold [ARG float minThreshold=]>
java: void set_minThreshold(float minThreshold)
FUNC <float cv.SimpleBlobDetector.Params.get_maxThreshold []>
java: float get_maxThreshold()
FUNC <void cv.SimpleBlobDetector.Params.set_maxThreshold [ARG float maxThreshold=]>
java: void set_maxThreshold(float maxThreshold)
FUNC <size_t cv.SimpleBlobDetector.Params.get_minRepeatability []>
java: long get_minRepeatability()
FUNC <void cv.SimpleBlobDetector.Params.set_minRepeatability [ARG size_t minRepeatability=]>
java: void set_minRepeatability(long minRepeatability)
FUNC <float cv.SimpleBlobDetector.Params.get_minDistBetweenBlobs []>
java: float get_minDistBetweenBlobs()
FUNC <void cv.SimpleBlobDetector.Params.set_minDistBetweenBlobs [ARG float minDistBetweenBlobs=]>
java: void set_minDistBetweenBlobs(float minDistBetweenBlobs)
FUNC <bool cv.SimpleBlobDetector.Params.get_filterByColor []>
java: boolean get_filterByColor()
FUNC <void cv.SimpleBlobDetector.Params.set_filterByColor [ARG bool filterByColor=]>
java: void set_filterByColor(boolean filterByColor)
FUNC <uchar cv.SimpleBlobDetector.Params.get_blobColor []>
SKIP:uchar Params::blobColor	 due to RET typeuchar
FUNC <void cv.SimpleBlobDetector.Params.set_blobColor [ARG uchar blobColor=]>
SKIP:void Params::blobColor	 due to ARG typeuchar/I
FUNC <bool cv.SimpleBlobDetector.Params.get_filterByArea []>
java: boolean get_filterByArea()
FUNC <void cv.SimpleBlobDetector.Params.set_filterByArea [ARG bool filterByArea=]>
java: void set_filterByArea(boolean filterByArea)
FUNC <float cv.SimpleBlobDetector.Params.get_minArea []>
java: float get_minArea()
FUNC <void cv.SimpleBlobDetector.Params.set_minArea [ARG float minArea=]>
java: void set_minArea(float minArea)
FUNC <float cv.SimpleBlobDetector.Params.get_maxArea []>
java: float get_maxArea()
FUNC <void cv.SimpleBlobDetector.Params.set_maxArea [ARG float maxArea=]>
java: void set_maxArea(float maxArea)
FUNC <bool cv.SimpleBlobDetector.Params.get_filterByCircularity []>
java: boolean get_filterByCircularity()
FUNC <void cv.SimpleBlobDetector.Params.set_filterByCircularity [ARG bool filterByCircularity=]>
java: void set_filterByCircularity(boolean filterByCircularity)
FUNC <float cv.SimpleBlobDetector.Params.get_minCircularity []>
java: float get_minCircularity()
FUNC <void cv.SimpleBlobDetector.Params.set_minCircularity [ARG float minCircularity=]>
java: void set_minCircularity(float minCircularity)
FUNC <float cv.SimpleBlobDetector.Params.get_maxCircularity []>
java: float get_maxCircularity()
FUNC <void cv.SimpleBlobDetector.Params.set_maxCircularity [ARG float maxCircularity=]>
java: void set_maxCircularity(float maxCircularity)
FUNC <bool cv.SimpleBlobDetector.Params.get_filterByInertia []>
java: boolean get_filterByInertia()
FUNC <void cv.SimpleBlobDetector.Params.set_filterByInertia [ARG bool filterByInertia=]>
java: void set_filterByInertia(boolean filterByInertia)
FUNC <float cv.SimpleBlobDetector.Params.get_minInertiaRatio []>
java: float get_minInertiaRatio()
FUNC <void cv.SimpleBlobDetector.Params.set_minInertiaRatio [ARG float minInertiaRatio=]>
java: void set_minInertiaRatio(float minInertiaRatio)
FUNC <float cv.SimpleBlobDetector.Params.get_maxInertiaRatio []>
java: float get_maxInertiaRatio()
FUNC <void cv.SimpleBlobDetector.Params.set_maxInertiaRatio [ARG float maxInertiaRatio=]>
java: void set_maxInertiaRatio(float maxInertiaRatio)
FUNC <bool cv.SimpleBlobDetector.Params.get_filterByConvexity []>
java: boolean get_filterByConvexity()
FUNC <void cv.SimpleBlobDetector.Params.set_filterByConvexity [ARG bool filterByConvexity=]>
java: void set_filterByConvexity(boolean filterByConvexity)
FUNC <float cv.SimpleBlobDetector.Params.get_minConvexity []>
java: float get_minConvexity()
FUNC <void cv.SimpleBlobDetector.Params.set_minConvexity [ARG float minConvexity=]>
java: void set_minConvexity(float minConvexity)
FUNC <float cv.SimpleBlobDetector.Params.get_maxConvexity []>
java: float get_maxConvexity()
FUNC <void cv.SimpleBlobDetector.Params.set_maxConvexity [ARG float maxConvexity=]>
java: void set_maxConvexity(float maxConvexity)
CLASS cv::.KAZE : Feature2D
[CONST DIFF_PM_G1=0, CONST DIFF_PM_G2=1, CONST DIFF_WEICKERT=2, CONST DIFF_CHARBONNIER=3]
FUNC <Ptr_KAZE cv.KAZE.create [ARG bool extended=false, ARG bool upright=false, ARG float threshold=0.001f, ARG int nOctaves=4, ARG int nOctaveLayers=4, ARG int diffusivity=KAZE::DIFF_PM_G2]>
java: KAZE create(boolean extended, boolean upright, float threshold, int nOctaves, int nOctaveLayers, int diffusivity)
java: KAZE create(boolean extended, boolean upright, float threshold, int nOctaves, int nOctaveLayers)
java: KAZE create(boolean extended, boolean upright, float threshold, int nOctaves)
java: KAZE create(boolean extended, boolean upright, float threshold)
java: KAZE create(boolean extended, boolean upright)
java: KAZE create(boolean extended)
java: KAZE create()
FUNC <String cv.KAZE.getDefaultName []>
java: String getDefaultName()
FUNC <bool cv.KAZE.getExtended []>
java: boolean getExtended()
FUNC <bool cv.KAZE.getUpright []>
java: boolean getUpright()
FUNC <double cv.KAZE.getThreshold []>
java: double getThreshold()
FUNC <int cv.KAZE.getDiffusivity []>
java: int getDiffusivity()
FUNC <int cv.KAZE.getNOctaveLayers []>
java: int getNOctaveLayers()
FUNC <int cv.KAZE.getNOctaves []>
java: int getNOctaves()
FUNC <void cv.KAZE.setDiffusivity [ARG int diff=]>
java: void setDiffusivity(int diff)
FUNC <void cv.KAZE.setExtended [ARG bool extended=]>
java: void setExtended(boolean extended)
FUNC <void cv.KAZE.setNOctaveLayers [ARG int octaveLayers=]>
java: void setNOctaveLayers(int octaveLayers)
FUNC <void cv.KAZE.setNOctaves [ARG int octaves=]>
java: void setNOctaves(int octaves)
FUNC <void cv.KAZE.setThreshold [ARG double threshold=]>
java: void setThreshold(double threshold)
FUNC <void cv.KAZE.setUpright [ARG bool upright=]>
java: void setUpright(boolean upright)
CLASS cv::.AKAZE : Feature2D
[CONST DESCRIPTOR_KAZE_UPRIGHT=2, CONST DESCRIPTOR_KAZE=3, CONST DESCRIPTOR_MLDB_UPRIGHT=4, CONST DESCRIPTOR_MLDB=5]
FUNC <Ptr_AKAZE cv.AKAZE.create [ARG int descriptor_type=AKAZE::DESCRIPTOR_MLDB, ARG int descriptor_size=0, ARG int descriptor_channels=3, ARG float threshold=0.001f, ARG int nOctaves=4, ARG int nOctaveLayers=4, ARG int diffusivity=KAZE::DIFF_PM_G2]>
java: AKAZE create(int descriptor_type, int descriptor_size, int descriptor_channels, float threshold, int nOctaves, int nOctaveLayers, int diffusivity)
java: AKAZE create(int descriptor_type, int descriptor_size, int descriptor_channels, float threshold, int nOctaves, int nOctaveLayers)
java: AKAZE create(int descriptor_type, int descriptor_size, int descriptor_channels, float threshold, int nOctaves)
java: AKAZE create(int descriptor_type, int descriptor_size, int descriptor_channels, float threshold)
java: AKAZE create(int descriptor_type, int descriptor_size, int descriptor_channels)
java: AKAZE create(int descriptor_type, int descriptor_size)
java: AKAZE create(int descriptor_type)
java: AKAZE create()
FUNC <String cv.AKAZE.getDefaultName []>
java: String getDefaultName()
FUNC <double cv.AKAZE.getThreshold []>
java: double getThreshold()
FUNC <int cv.AKAZE.getDescriptorChannels []>
java: int getDescriptorChannels()
FUNC <int cv.AKAZE.getDescriptorSize []>
java: int getDescriptorSize()
FUNC <int cv.AKAZE.getDescriptorType []>
java: int getDescriptorType()
FUNC <int cv.AKAZE.getDiffusivity []>
java: int getDiffusivity()
FUNC <int cv.AKAZE.getNOctaveLayers []>
java: int getNOctaveLayers()
FUNC <int cv.AKAZE.getNOctaves []>
java: int getNOctaves()
FUNC <void cv.AKAZE.setDescriptorChannels [ARG int dch=]>
java: void setDescriptorChannels(int dch)
FUNC <void cv.AKAZE.setDescriptorSize [ARG int dsize=]>
java: void setDescriptorSize(int dsize)
FUNC <void cv.AKAZE.setDescriptorType [ARG int dtype=]>
java: void setDescriptorType(int dtype)
FUNC <void cv.AKAZE.setDiffusivity [ARG int diff=]>
java: void setDiffusivity(int diff)
FUNC <void cv.AKAZE.setNOctaveLayers [ARG int octaveLayers=]>
java: void setNOctaveLayers(int octaveLayers)
FUNC <void cv.AKAZE.setNOctaves [ARG int octaves=]>
java: void setNOctaves(int octaves)
FUNC <void cv.AKAZE.setThreshold [ARG double threshold=]>
java: void setThreshold(double threshold)
CLASS cv::.DescriptorMatcher : Algorithm
[CONST FLANNBASED=1, CONST BRUTEFORCE=2, CONST BRUTEFORCE_L1=3, CONST BRUTEFORCE_HAMMING=4, CONST BRUTEFORCE_HAMMINGLUT=5, CONST BRUTEFORCE_SL2=6]
FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.clone [ARG bool emptyTrainData=false]>
java: DescriptorMatcher clone(boolean emptyTrainData)
java: DescriptorMatcher clone()
FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.create [ARG String descriptorMatcherType=]>
java: DescriptorMatcher create(String descriptorMatcherType)
FUNC <Ptr_DescriptorMatcher cv.DescriptorMatcher.create [ARG int matcherType=]>
java: DescriptorMatcher create(int matcherType)
FUNC <bool cv.DescriptorMatcher.empty []>
java: boolean empty()
FUNC <bool cv.DescriptorMatcher.isMaskSupported []>
java: boolean isMaskSupported()
FUNC <vector_Mat cv.DescriptorMatcher.getTrainDescriptors []>
java: List<Mat> getTrainDescriptors()
FUNC <void cv.DescriptorMatcher.add [ARG vector_Mat descriptors=]>
java: void add(List<Mat> descriptors)
FUNC <void cv.DescriptorMatcher.clear []>
java: void clear()
FUNC <void cv.DescriptorMatcher.knnMatch [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_vector_DMatch matches=, ARG int k=, ARG Mat mask=Mat(), ARG bool compactResult=false]>
java: void knnMatch(Mat queryDescriptors, Mat trainDescriptors, List<MatOfDMatch> matches, int k, Mat mask, boolean compactResult)
java: void knnMatch(Mat queryDescriptors, Mat trainDescriptors, List<MatOfDMatch> matches, int k, Mat mask)
java: void knnMatch(Mat queryDescriptors, Mat trainDescriptors, List<MatOfDMatch> matches, int k)
FUNC <void cv.DescriptorMatcher.knnMatch [ARG Mat queryDescriptors=, ARG vector_vector_DMatch matches=, ARG int k=, ARG vector_Mat masks=vector_Mat(), ARG bool compactResult=false]>
java: void knnMatch(Mat queryDescriptors, List<MatOfDMatch> matches, int k, List<Mat> masks, boolean compactResult)
java: void knnMatch(Mat queryDescriptors, List<MatOfDMatch> matches, int k, List<Mat> masks)
java: void knnMatch(Mat queryDescriptors, List<MatOfDMatch> matches, int k)
FUNC <void cv.DescriptorMatcher.match [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_DMatch matches=, ARG Mat mask=Mat()]>
java: void match(Mat queryDescriptors, Mat trainDescriptors, MatOfDMatch matches, Mat mask)
java: void match(Mat queryDescriptors, Mat trainDescriptors, MatOfDMatch matches)
FUNC <void cv.DescriptorMatcher.match [ARG Mat queryDescriptors=, ARG vector_DMatch matches=, ARG vector_Mat masks=vector_Mat()]>
java: void match(Mat queryDescriptors, MatOfDMatch matches, List<Mat> masks)
java: void match(Mat queryDescriptors, MatOfDMatch matches)
FUNC <void cv.DescriptorMatcher.radiusMatch [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_vector_DMatch matches=, ARG float maxDistance=, ARG Mat mask=Mat(), ARG bool compactResult=false]>
java: void radiusMatch(Mat queryDescriptors, Mat trainDescriptors, List<MatOfDMatch> matches, float maxDistance, Mat mask, boolean compactResult)
java: void radiusMatch(Mat queryDescriptors, Mat trainDescriptors, List<MatOfDMatch> matches, float maxDistance, Mat mask)
java: void radiusMatch(Mat queryDescriptors, Mat trainDescriptors, List<MatOfDMatch> matches, float maxDistance)
FUNC <void cv.DescriptorMatcher.radiusMatch [ARG Mat queryDescriptors=, ARG vector_vector_DMatch matches=, ARG float maxDistance=, ARG vector_Mat masks=vector_Mat(), ARG bool compactResult=false]>
java: void radiusMatch(Mat queryDescriptors, List<MatOfDMatch> matches, float maxDistance, List<Mat> masks, boolean compactResult)
java: void radiusMatch(Mat queryDescriptors, List<MatOfDMatch> matches, float maxDistance, List<Mat> masks)
java: void radiusMatch(Mat queryDescriptors, List<MatOfDMatch> matches, float maxDistance)
FUNC <void cv.DescriptorMatcher.read [ARG FileNode arg1=]>
SKIP:void cv::DescriptorMatcher::read(FileNode arg1)	 due to ARG typeFileNode/I
FUNC <void cv.DescriptorMatcher.read [ARG String fileName=]>
java: void read(String fileName)
FUNC <void cv.DescriptorMatcher.train []>
java: void train()
FUNC <void cv.DescriptorMatcher.write [ARG Ptr_FileStorage fs=, ARG String name=String()]>
SKIP:void cv::DescriptorMatcher::write(Ptr_FileStorage fs, String name = String())	 due to ARG typePtr_FileStorage/I
FUNC <void cv.DescriptorMatcher.write [ARG String fileName=]>
java: void write(String fileName)
CLASS cv::.BFMatcher : DescriptorMatcher
FUNC < cv.BFMatcher.BFMatcher [ARG int normType=NORM_L2, ARG bool crossCheck=false]>
java:  BFMatcher(int normType, boolean crossCheck)
java:  BFMatcher(int normType)
java:  BFMatcher()
FUNC <Ptr_BFMatcher cv.BFMatcher.create [ARG int normType=NORM_L2, ARG bool crossCheck=false]>
java: BFMatcher create(int normType, boolean crossCheck)
java: BFMatcher create(int normType)
java: BFMatcher create()
CLASS cv::.FlannBasedMatcher : DescriptorMatcher
FUNC < cv.FlannBasedMatcher.FlannBasedMatcher [ARG Ptr_flann_IndexParams indexParams=makePtr<flann::KDTreeIndexParams>(), ARG Ptr_flann_SearchParams searchParams=makePtr<flann::SearchParams>()]>
java:  FlannBasedMatcher()
java:  FlannBasedMatcher()
java:  FlannBasedMatcher()
FUNC <Ptr_FlannBasedMatcher cv.FlannBasedMatcher.create []>
java: FlannBasedMatcher create()
CLASS cv::.BOWTrainer : 
FUNC <Mat cv.BOWTrainer.cluster [ARG Mat descriptors=]>
java: Mat cluster(Mat descriptors)
FUNC <Mat cv.BOWTrainer.cluster []>
java: Mat cluster()
FUNC <int cv.BOWTrainer.descriptorsCount []>
java: int descriptorsCount()
FUNC <vector_Mat cv.BOWTrainer.getDescriptors []>
java: List<Mat> getDescriptors()
FUNC <void cv.BOWTrainer.add [ARG Mat descriptors=]>
java: void add(Mat descriptors)
FUNC <void cv.BOWTrainer.clear []>
java: void clear()
CLASS cv::.BOWKMeansTrainer : BOWTrainer
FUNC < cv.BOWKMeansTrainer.BOWKMeansTrainer [ARG int clusterCount=, ARG TermCriteria termcrit=TermCriteria(), ARG int attempts=3, ARG int flags=KMEANS_PP_CENTERS]>
java:  BOWKMeansTrainer(int clusterCount, TermCriteria termcrit, int attempts, int flags)
java:  BOWKMeansTrainer(int clusterCount, TermCriteria termcrit, int attempts)
java:  BOWKMeansTrainer(int clusterCount, TermCriteria termcrit)
java:  BOWKMeansTrainer(int clusterCount)
FUNC <Mat cv.BOWKMeansTrainer.cluster [ARG Mat descriptors=]>
java: Mat cluster(Mat descriptors)
FUNC <Mat cv.BOWKMeansTrainer.cluster []>
java: Mat cluster()
CLASS cv::.BOWImgDescriptorExtractor : 
FUNC < cv.BOWImgDescriptorExtractor.BOWImgDescriptorExtractor [ARG Ptr_DescriptorExtractor dextractor=, ARG Ptr_DescriptorMatcher dmatcher=]>
SKIP:cv::BOWImgDescriptorExtractor::BOWImgDescriptorExtractor(Ptr_DescriptorExtractor dextractor, Ptr_DescriptorMatcher dmatcher)	 due to ARG typePtr_DescriptorExtractor/I
FUNC <Mat cv.BOWImgDescriptorExtractor.getVocabulary []>
java: Mat getVocabulary()
FUNC <int cv.BOWImgDescriptorExtractor.descriptorSize []>
java: int descriptorSize()
FUNC <int cv.BOWImgDescriptorExtractor.descriptorType []>
java: int descriptorType()
FUNC <void cv.BOWImgDescriptorExtractor.compute2 [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat imgDescriptor=]>
java: void compute(Mat image, MatOfKeyPoint keypoints, Mat imgDescriptor)
FUNC <void cv.BOWImgDescriptorExtractor.setVocabulary [ARG Mat vocabulary=]>
java: void setVocabulary(Mat vocabulary)

=== MODULE: calib3d (C:/Users/d_dan/Desktop/opencv-master\modules/calib3d) ===


Files (3):
['C:/Users/d_dan/Desktop/opencv-master\\modules/calib3d\\include\\opencv2\\calib3d\\calib3d_c.h',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/calib3d\\include\\opencv2\\calib3d.hpp',
 'C:/Users/d_dan/Desktop/opencv-master\\modules/calib3d\\include\\opencv2\\calib3d\\calib3d.hpp']

Common headers (0):
[]
ok: class CLASS ::.Calib3d : , name: Calib3d, base: 


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/calib3d\include\opencv2\calib3d\calib3d_c.h =====
Namespaces: {''}

--- Incoming ---
['const CV_ITERATIVE', '0', [], [], None]
ok: CONST CV_ITERATIVE=0

--- Incoming ---
['const CV_EPNP', '1', [], [], None]
ok: CONST CV_EPNP=1

--- Incoming ---
['const CV_P3P', '2', [], [], None]
ok: CONST CV_P3P=2

--- Incoming ---
['const CV_DLS', '3', [], [], None]
ok: CONST CV_DLS=3

--- Incoming ---
['const CvLevMarq.DONE', '0', [], [], None]
class not found: CONST DONE=0

--- Incoming ---
['const CvLevMarq.STARTED', '1', [], [], None]
class not found: CONST STARTED=1

--- Incoming ---
['const CvLevMarq.CALC_J', '2', [], [], None]
class not found: CONST CALC_J=2

--- Incoming ---
['const CvLevMarq.CHECK_ERR', '3', [], [], None]
class not found: CONST CHECK_ERR=3


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/calib3d\include\opencv2\calib3d.hpp =====
Namespaces: {'', 'cv', 'cv.fisheye'}

--- Incoming ---
['const cv.LMEDS', '4', [], [], None]
ok: CONST LMEDS=4

--- Incoming ---
['const cv.RANSAC', '8', [], [], None]
ok: CONST RANSAC=8

--- Incoming ---
['const cv.RHO', '16', [], [], None]
ok: CONST RHO=16

--- Incoming ---
['const cv.SOLVEPNP_ITERATIVE', '0', [], [], None]
ok: CONST SOLVEPNP_ITERATIVE=0

--- Incoming ---
['const cv.SOLVEPNP_EPNP', '1', [], [], None]
ok: CONST SOLVEPNP_EPNP=1

--- Incoming ---
['const cv.SOLVEPNP_P3P', '2', [], [], None]
ok: CONST SOLVEPNP_P3P=2

--- Incoming ---
['const cv.SOLVEPNP_DLS', '3', [], [], None]
ok: CONST SOLVEPNP_DLS=3

--- Incoming ---
['const cv.SOLVEPNP_UPNP', '4', [], [], None]
ok: CONST SOLVEPNP_UPNP=4

--- Incoming ---
['const cv.SOLVEPNP_AP3P', '5', [], [], None]
ok: CONST SOLVEPNP_AP3P=5

--- Incoming ---
['const cv.SOLVEPNP_MAX_COUNT', '5+1', [], [], None]
ok: CONST SOLVEPNP_MAX_COUNT=5+1

--- Incoming ---
['const cv.CALIB_CB_ADAPTIVE_THRESH', '1', [], [], None]
ok: CONST CALIB_CB_ADAPTIVE_THRESH=1

--- Incoming ---
['const cv.CALIB_CB_NORMALIZE_IMAGE', '2', [], [], None]
ok: CONST CALIB_CB_NORMALIZE_IMAGE=2

--- Incoming ---
['const cv.CALIB_CB_FILTER_QUADS', '4', [], [], None]
ok: CONST CALIB_CB_FILTER_QUADS=4

--- Incoming ---
['const cv.CALIB_CB_FAST_CHECK', '8', [], [], None]
ok: CONST CALIB_CB_FAST_CHECK=8

--- Incoming ---
['const cv.CALIB_CB_SYMMETRIC_GRID', '1', [], [], None]
ok: CONST CALIB_CB_SYMMETRIC_GRID=1

--- Incoming ---
['const cv.CALIB_CB_ASYMMETRIC_GRID', '2', [], [], None]
ok: CONST CALIB_CB_ASYMMETRIC_GRID=2

--- Incoming ---
['const cv.CALIB_CB_CLUSTERING', '4', [], [], None]
ok: CONST CALIB_CB_CLUSTERING=4

--- Incoming ---
['const cv.CALIB_USE_INTRINSIC_GUESS', '0x00001', [], [], None]
manual: CONST CALIB_USE_INTRINSIC_GUESS=0x00001

--- Incoming ---
['const cv.CALIB_FIX_ASPECT_RATIO', '0x00002', [], [], None]
ok: CONST CALIB_FIX_ASPECT_RATIO=0x00002

--- Incoming ---
['const cv.CALIB_FIX_PRINCIPAL_POINT', '0x00004', [], [], None]
ok: CONST CALIB_FIX_PRINCIPAL_POINT=0x00004

--- Incoming ---
['const cv.CALIB_ZERO_TANGENT_DIST', '0x00008', [], [], None]
ok: CONST CALIB_ZERO_TANGENT_DIST=0x00008

--- Incoming ---
['const cv.CALIB_FIX_FOCAL_LENGTH', '0x00010', [], [], None]
ok: CONST CALIB_FIX_FOCAL_LENGTH=0x00010

--- Incoming ---
['const cv.CALIB_FIX_K1', '0x00020', [], [], None]
manual: CONST CALIB_FIX_K1=0x00020

--- Incoming ---
['const cv.CALIB_FIX_K2', '0x00040', [], [], None]
manual: CONST CALIB_FIX_K2=0x00040

--- Incoming ---
['const cv.CALIB_FIX_K3', '0x00080', [], [], None]
manual: CONST CALIB_FIX_K3=0x00080

--- Incoming ---
['const cv.CALIB_FIX_K4', '0x00800', [], [], None]
manual: CONST CALIB_FIX_K4=0x00800

--- Incoming ---
['const cv.CALIB_FIX_K5', '0x01000', [], [], None]
ok: CONST CALIB_FIX_K5=0x01000

--- Incoming ---
['const cv.CALIB_FIX_K6', '0x02000', [], [], None]
ok: CONST CALIB_FIX_K6=0x02000

--- Incoming ---
['const cv.CALIB_RATIONAL_MODEL', '0x04000', [], [], None]
ok: CONST CALIB_RATIONAL_MODEL=0x04000

--- Incoming ---
['const cv.CALIB_THIN_PRISM_MODEL', '0x08000', [], [], None]
ok: CONST CALIB_THIN_PRISM_MODEL=0x08000

--- Incoming ---
['const cv.CALIB_FIX_S1_S2_S3_S4', '0x10000', [], [], None]
ok: CONST CALIB_FIX_S1_S2_S3_S4=0x10000

--- Incoming ---
['const cv.CALIB_TILTED_MODEL', '0x40000', [], [], None]
ok: CONST CALIB_TILTED_MODEL=0x40000

--- Incoming ---
['const cv.CALIB_FIX_TAUX_TAUY', '0x80000', [], [], None]
ok: CONST CALIB_FIX_TAUX_TAUY=0x80000

--- Incoming ---
['const cv.CALIB_USE_QR', '0x100000', [], [], None]
ok: CONST CALIB_USE_QR=0x100000

--- Incoming ---
['const cv.CALIB_FIX_TANGENT_DIST', '0x200000', [], [], None]
ok: CONST CALIB_FIX_TANGENT_DIST=0x200000

--- Incoming ---
['const cv.CALIB_FIX_INTRINSIC', '0x00100', [], [], None]
manual: CONST CALIB_FIX_INTRINSIC=0x00100

--- Incoming ---
['const cv.CALIB_SAME_FOCAL_LENGTH', '0x00200', [], [], None]
ok: CONST CALIB_SAME_FOCAL_LENGTH=0x00200

--- Incoming ---
['const cv.CALIB_ZERO_DISPARITY', '0x00400', [], [], None]
ok: CONST CALIB_ZERO_DISPARITY=0x00400

--- Incoming ---
['const cv.CALIB_USE_LU', '(1 << 17)', [], [], None]
ok: CONST CALIB_USE_LU=(1 << 17)

--- Incoming ---
['const cv.CALIB_USE_EXTRINSIC_GUESS', '(1 << 22)', [], [], None]
ok: CONST CALIB_USE_EXTRINSIC_GUESS=(1 << 22)

--- Incoming ---
['const cv.FM_7POINT', '1', [], [], None]
ok: CONST FM_7POINT=1

--- Incoming ---
['const cv.FM_8POINT', '2', [], [], None]
ok: CONST FM_8POINT=2

--- Incoming ---
['const cv.FM_LMEDS', '4', [], [], None]
ok: CONST FM_LMEDS=4

--- Incoming ---
['const cv.FM_RANSAC', '8', [], [], None]
ok: CONST FM_RANSAC=8

--- Incoming ---
[   'cv.Rodrigues',
    'void',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', ['/O']],
        ['Mat', 'jacobian', 'Mat()', ['/O']]],
    'void']
ok: FUNC <void cv..Rodrigues [ARG Mat src=, ARG Mat dst=, ARG Mat jacobian=Mat()]>

--- Incoming ---
[   'cv.findHomography',
    'Mat',
    [],
    [   ['Mat', 'srcPoints', '', []],
        ['Mat', 'dstPoints', '', []],
        ['int', 'method', '0', []],
        ['double', 'ransacReprojThreshold', '3', []],
        ['Mat', 'mask', 'Mat()', ['/O']],
        ['int', 'maxIters', '2000', ['/C']],
        ['double', 'confidence', '0.995', ['/C']]],
    'Mat']
ok: FUNC <Mat cv..findHomography [ARG vector_Point2f srcPoints=, ARG vector_Point2f dstPoints=, ARG int method=0, ARG double ransacReprojThreshold=3, ARG Mat mask=Mat(), ARG int maxIters=2000, ARG double confidence=0.995]>

--- Incoming ---
[   'cv.RQDecomp3x3',
    'Vec3d',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'mtxR', '', ['/O']],
        ['Mat', 'mtxQ', '', ['/O']],
        ['Mat', 'Qx', 'Mat()', ['/O']],
        ['Mat', 'Qy', 'Mat()', ['/O']],
        ['Mat', 'Qz', 'Mat()', ['/O']]],
    'Vec3d']
ok: FUNC <Vec3d cv..RQDecomp3x3 [ARG Mat src=, ARG Mat mtxR=, ARG Mat mtxQ=, ARG Mat Qx=Mat(), ARG Mat Qy=Mat(), ARG Mat Qz=Mat()]>

--- Incoming ---
[   'cv.decomposeProjectionMatrix',
    'void',
    [],
    [   ['Mat', 'projMatrix', '', []],
        ['Mat', 'cameraMatrix', '', ['/O']],
        ['Mat', 'rotMatrix', '', ['/O']],
        ['Mat', 'transVect', '', ['/O']],
        ['Mat', 'rotMatrixX', 'Mat()', ['/O']],
        ['Mat', 'rotMatrixY', 'Mat()', ['/O']],
        ['Mat', 'rotMatrixZ', 'Mat()', ['/O']],
        ['Mat', 'eulerAngles', 'Mat()', ['/O']]],
    'void']
ok: FUNC <void cv..decomposeProjectionMatrix [ARG Mat projMatrix=, ARG Mat cameraMatrix=, ARG Mat rotMatrix=, ARG Mat transVect=, ARG Mat rotMatrixX=Mat(), ARG Mat rotMatrixY=Mat(), ARG Mat rotMatrixZ=Mat(), ARG Mat eulerAngles=Mat()]>

--- Incoming ---
[   'cv.matMulDeriv',
    'void',
    [],
    [   ['Mat', 'A', '', []],
        ['Mat', 'B', '', []],
        ['Mat', 'dABdA', '', ['/O']],
        ['Mat', 'dABdB', '', ['/O']]],
    'void']
ok: FUNC <void cv..matMulDeriv [ARG Mat A=, ARG Mat B=, ARG Mat dABdA=, ARG Mat dABdB=]>

--- Incoming ---
[   'cv.composeRT',
    'void',
    [],
    [   ['Mat', 'rvec1', '', []],
        ['Mat', 'tvec1', '', []],
        ['Mat', 'rvec2', '', []],
        ['Mat', 'tvec2', '', []],
        ['Mat', 'rvec3', '', ['/O']],
        ['Mat', 'tvec3', '', ['/O']],
        ['Mat', 'dr3dr1', 'Mat()', ['/O']],
        ['Mat', 'dr3dt1', 'Mat()', ['/O']],
        ['Mat', 'dr3dr2', 'Mat()', ['/O']],
        ['Mat', 'dr3dt2', 'Mat()', ['/O']],
        ['Mat', 'dt3dr1', 'Mat()', ['/O']],
        ['Mat', 'dt3dt1', 'Mat()', ['/O']],
        ['Mat', 'dt3dr2', 'Mat()', ['/O']],
        ['Mat', 'dt3dt2', 'Mat()', ['/O']]],
    'void']
ok: FUNC <void cv..composeRT [ARG Mat rvec1=, ARG Mat tvec1=, ARG Mat rvec2=, ARG Mat tvec2=, ARG Mat rvec3=, ARG Mat tvec3=, ARG Mat dr3dr1=Mat(), ARG Mat dr3dt1=Mat(), ARG Mat dr3dr2=Mat(), ARG Mat dr3dt2=Mat(), ARG Mat dt3dr1=Mat(), ARG Mat dt3dt1=Mat(), ARG Mat dt3dr2=Mat(), ARG Mat dt3dt2=Mat()]>

--- Incoming ---
[   'cv.projectPoints',
    'void',
    [],
    [   ['Mat', 'objectPoints', '', []],
        ['Mat', 'rvec', '', []],
        ['Mat', 'tvec', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'imagePoints', '', ['/O']],
        ['Mat', 'jacobian', 'Mat()', ['/O']],
        ['double', 'aspectRatio', '0', []]],
    'void']
ok: FUNC <void cv..projectPoints [ARG vector_Point3f objectPoints=, ARG Mat rvec=, ARG Mat tvec=, ARG Mat cameraMatrix=, ARG vector_double distCoeffs=, ARG vector_Point2f imagePoints=, ARG Mat jacobian=Mat(), ARG double aspectRatio=0]>

--- Incoming ---
[   'cv.solvePnP',
    'bool',
    [],
    [   ['Mat', 'objectPoints', '', []],
        ['Mat', 'imagePoints', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'rvec', '', ['/O']],
        ['Mat', 'tvec', '', ['/O']],
        ['bool', 'useExtrinsicGuess', 'false', []],
        ['int', 'flags', 'SOLVEPNP_ITERATIVE', []]],
    'bool']
ok: FUNC <bool cv..solvePnP [ARG vector_Point3f objectPoints=, ARG vector_Point2f imagePoints=, ARG Mat cameraMatrix=, ARG vector_double distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG bool useExtrinsicGuess=false, ARG int flags=SOLVEPNP_ITERATIVE]>

--- Incoming ---
[   'cv.solvePnPRansac',
    'bool',
    [],
    [   ['Mat', 'objectPoints', '', []],
        ['Mat', 'imagePoints', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Mat', 'rvec', '', ['/O']],
        ['Mat', 'tvec', '', ['/O']],
        ['bool', 'useExtrinsicGuess', 'false', []],
        ['int', 'iterationsCount', '100', []],
        ['float', 'reprojectionError', '8.0', []],
        ['double', 'confidence', '0.99', []],
        ['Mat', 'inliers', 'Mat()', ['/O']],
        ['int', 'flags', 'SOLVEPNP_ITERATIVE', []]],
    'bool']
ok: FUNC <bool cv..solvePnPRansac [ARG vector_Point3f objectPoints=, ARG vector_Point2f imagePoints=, ARG Mat cameraMatrix=, ARG vector_double distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG bool useExtrinsicGuess=false, ARG int iterationsCount=100, ARG float reprojectionError=8.0, ARG double confidence=0.99, ARG Mat inliers=Mat(), ARG int flags=SOLVEPNP_ITERATIVE]>

--- Incoming ---
[   'cv.solveP3P',
    'int',
    [],
    [   ['Mat', 'objectPoints', '', []],
        ['Mat', 'imagePoints', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['vector_Mat', 'rvecs', '', ['/O']],
        ['vector_Mat', 'tvecs', '', ['/O']],
        ['int', 'flags', '', []]],
    'int']
ok: FUNC <int cv..solveP3P [ARG Mat objectPoints=, ARG Mat imagePoints=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG int flags=]>

--- Incoming ---
[   'cv.initCameraMatrix2D',
    'Mat',
    [],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints', '', []],
        ['Size', 'imageSize', '', []],
        ['double', 'aspectRatio', '1.0', []]],
    'Mat']
ok: FUNC <Mat cv..initCameraMatrix2D [ARG vector_vector_Point3f objectPoints=, ARG vector_vector_Point2f imagePoints=, ARG Size imageSize=, ARG double aspectRatio=1.0]>

--- Incoming ---
[   'cv.findChessboardCorners',
    'bool',
    [],
    [   ['Mat', 'image', '', []],
        ['Size', 'patternSize', '', []],
        ['Mat', 'corners', '', ['/O']],
        [   'int',
            'flags',
            'CALIB_CB_ADAPTIVE_THRESH + CALIB_CB_NORMALIZE_IMAGE',
            []]],
    'bool']
ok: FUNC <bool cv..findChessboardCorners [ARG Mat image=, ARG Size patternSize=, ARG vector_Point2f corners=, ARG int flags=CALIB_CB_ADAPTIVE_THRESH + CALIB_CB_NORMALIZE_IMAGE]>

--- Incoming ---
[   'cv.drawChessboardCorners',
    'void',
    [],
    [   ['Mat', 'image', '', ['/IO']],
        ['Size', 'patternSize', '', []],
        ['Mat', 'corners', '', []],
        ['bool', 'patternWasFound', '', []]],
    'void']
ok: FUNC <void cv..drawChessboardCorners [ARG Mat image=, ARG Size patternSize=, ARG vector_Point2f corners=, ARG bool patternWasFound=]>

--- Incoming ---
[   'struct cv.CirclesGridFinderParameters',
    '',
    ['/Simple'],
    [   ['Size2f', 'densityNeighborhoodSize', '', ['/RW']],
        ['float', 'minDensity', '', ['/RW']],
        ['int', 'kmeansAttempts', '', ['/RW']],
        ['int', 'minDistanceToAddKeypoint', '', ['/RW']],
        ['int', 'keypointScale', '', ['/RW']],
        ['float', 'minGraphConfidence', '', ['/RW']],
        ['float', 'vertexGain', '', ['/RW']],
        ['float', 'vertexPenalty', '', ['/RW']],
        ['float', 'existingVertexGain', '', ['/RW']],
        ['float', 'edgeGain', '', ['/RW']],
        ['float', 'edgePenalty', '', ['/RW']],
        ['float', 'convexHullFactor', '', ['/RW']],
        ['float', 'minRNGEdgeSwitchDist', '', ['/RW']],
        ['float', 'squareSize', '', ['/RW']],
        ['float', 'maxRectifiedDistance', '', ['/RW']]],
    None]
ignored: CLASS cv::.CirclesGridFinderParameters : 

--- Incoming ---
['cv.CirclesGridFinderParameters.CirclesGridFinderParameters', '', [], [], None]
ignored: FUNC < cv.CirclesGridFinderParameters.CirclesGridFinderParameters []>

--- Incoming ---
['const cv.CirclesGridFinderParameters.SYMMETRIC_GRID', '0', [], [], None]
class not found: CONST SYMMETRIC_GRID=0

--- Incoming ---
['const cv.CirclesGridFinderParameters.ASYMMETRIC_GRID', '1', [], [], None]
class not found: CONST ASYMMETRIC_GRID=1

--- Incoming ---
[   'cv.findCirclesGrid',
    'bool',
    [],
    [   ['Mat', 'image', '', []],
        ['Size', 'patternSize', '', []],
        ['Mat', 'centers', '', ['/O']],
        ['int', 'flags', '', []],
        ['Ptr_FeatureDetector', 'blobDetector', '', ['/C', '/Ref']],
        ['CirclesGridFinderParameters', 'parameters', '', ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv..findCirclesGrid [ARG Mat image=, ARG Size patternSize=, ARG Mat centers=, ARG int flags=, ARG Ptr_FeatureDetector blobDetector=, ARG CirclesGridFinderParameters parameters=]>

--- Incoming ---
[   'cv.findCirclesGrid',
    'bool',
    [],
    [   ['Mat', 'image', '', []],
        ['Size', 'patternSize', '', []],
        ['Mat', 'centers', '', ['/O']],
        ['int', 'flags', 'CALIB_CB_SYMMETRIC_GRID', []],
        [   'Ptr_FeatureDetector',
            'blobDetector',
            'SimpleBlobDetector::create()',
            ['/C', '/Ref']]],
    'bool']
ok: FUNC <bool cv..findCirclesGrid [ARG Mat image=, ARG Size patternSize=, ARG Mat centers=, ARG int flags=CALIB_CB_SYMMETRIC_GRID, ARG Ptr_FeatureDetector blobDetector=SimpleBlobDetector::create()]>

--- Incoming ---
[   'cv.calibrateCamera',
    'double',
    ['=calibrateCameraExtended'],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints', '', []],
        ['Size', 'imageSize', '', []],
        ['Mat', 'cameraMatrix', '', ['/IO']],
        ['Mat', 'distCoeffs', '', ['/IO']],
        ['vector_Mat', 'rvecs', '', ['/O']],
        ['vector_Mat', 'tvecs', '', ['/O']],
        ['Mat', 'stdDeviationsIntrinsics', '', ['/O']],
        ['Mat', 'stdDeviationsExtrinsics', '', ['/O']],
        ['Mat', 'perViewErrors', '', ['/O']],
        ['int', 'flags', '0', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, '
            'DBL_EPSILON)',
            []]],
    'double']
ok: FUNC <double cv..calibrateCamera [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints=, ARG Size imageSize=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG Mat stdDeviationsIntrinsics=, ARG Mat stdDeviationsExtrinsics=, ARG Mat perViewErrors=, ARG int flags=0, ARG TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON)]>

--- Incoming ---
[   'cv.calibrateCamera',
    'double',
    [],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints', '', []],
        ['Size', 'imageSize', '', []],
        ['Mat', 'cameraMatrix', '', ['/IO']],
        ['Mat', 'distCoeffs', '', ['/IO']],
        ['vector_Mat', 'rvecs', '', ['/O']],
        ['vector_Mat', 'tvecs', '', ['/O']],
        ['int', 'flags', '0', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, '
            'DBL_EPSILON)',
            []]],
    'double']
ok: FUNC <double cv..calibrateCamera [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints=, ARG Size imageSize=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG int flags=0, ARG TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON)]>

--- Incoming ---
[   'cv.calibrationMatrixValues',
    'void',
    [],
    [   ['Mat', 'cameraMatrix', '', []],
        ['Size', 'imageSize', '', []],
        ['double', 'apertureWidth', '', []],
        ['double', 'apertureHeight', '', []],
        ['double', 'fovx', '', ['/O', '/Ref']],
        ['double', 'fovy', '', ['/O', '/Ref']],
        ['double', 'focalLength', '', ['/O', '/Ref']],
        ['Point2d', 'principalPoint', '', ['/O', '/Ref']],
        ['double', 'aspectRatio', '', ['/O', '/Ref']]],
    'void']
ok: FUNC <void cv..calibrationMatrixValues [ARG Mat cameraMatrix=, ARG Size imageSize=, ARG double apertureWidth=, ARG double apertureHeight=, ARG double fovx=, ARG double fovy=, ARG double focalLength=, ARG Point2d principalPoint=, ARG double aspectRatio=]>

--- Incoming ---
[   'cv.stereoCalibrate',
    'double',
    ['=stereoCalibrateExtended'],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints1', '', []],
        ['vector_Mat', 'imagePoints2', '', []],
        ['Mat', 'cameraMatrix1', '', ['/IO']],
        ['Mat', 'distCoeffs1', '', ['/IO']],
        ['Mat', 'cameraMatrix2', '', ['/IO']],
        ['Mat', 'distCoeffs2', '', ['/IO']],
        ['Size', 'imageSize', '', []],
        ['Mat', 'R', '', ['/IO']],
        ['Mat', 'T', '', ['/IO']],
        ['Mat', 'E', '', ['/O']],
        ['Mat', 'F', '', ['/O']],
        ['Mat', 'perViewErrors', '', ['/O']],
        ['int', 'flags', 'CALIB_FIX_INTRINSIC', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6)',
            []]],
    'double']
ok: FUNC <double cv..stereoCalibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints1=, ARG vector_Mat imagePoints2=, ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG Mat E=, ARG Mat F=, ARG Mat perViewErrors=, ARG int flags=CALIB_FIX_INTRINSIC, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6)]>

--- Incoming ---
[   'cv.stereoCalibrate',
    'double',
    [],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints1', '', []],
        ['vector_Mat', 'imagePoints2', '', []],
        ['Mat', 'cameraMatrix1', '', ['/IO']],
        ['Mat', 'distCoeffs1', '', ['/IO']],
        ['Mat', 'cameraMatrix2', '', ['/IO']],
        ['Mat', 'distCoeffs2', '', ['/IO']],
        ['Size', 'imageSize', '', []],
        ['Mat', 'R', '', ['/O']],
        ['Mat', 'T', '', ['/O']],
        ['Mat', 'E', '', ['/O']],
        ['Mat', 'F', '', ['/O']],
        ['int', 'flags', 'CALIB_FIX_INTRINSIC', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6)',
            []]],
    'double']
ok: FUNC <double cv..stereoCalibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints1=, ARG vector_Mat imagePoints2=, ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG Mat E=, ARG Mat F=, ARG int flags=CALIB_FIX_INTRINSIC, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6)]>

--- Incoming ---
[   'cv.stereoRectify',
    'void',
    [],
    [   ['Mat', 'cameraMatrix1', '', []],
        ['Mat', 'distCoeffs1', '', []],
        ['Mat', 'cameraMatrix2', '', []],
        ['Mat', 'distCoeffs2', '', []],
        ['Size', 'imageSize', '', []],
        ['Mat', 'R', '', []],
        ['Mat', 'T', '', []],
        ['Mat', 'R1', '', ['/O']],
        ['Mat', 'R2', '', ['/O']],
        ['Mat', 'P1', '', ['/O']],
        ['Mat', 'P2', '', ['/O']],
        ['Mat', 'Q', '', ['/O']],
        ['int', 'flags', 'CALIB_ZERO_DISPARITY', []],
        ['double', 'alpha', '-1', []],
        ['Size', 'newImageSize', 'Size()', []],
        ['Rect*', 'validPixROI1', '0', ['/O']],
        ['Rect*', 'validPixROI2', '0', ['/O']]],
    'void']
ok: FUNC <void cv..stereoRectify [ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG Mat R1=, ARG Mat R2=, ARG Mat P1=, ARG Mat P2=, ARG Mat Q=, ARG int flags=CALIB_ZERO_DISPARITY, ARG double alpha=-1, ARG Size newImageSize=Size(), ARG Rect * validPixROI1=0, ARG Rect * validPixROI2=0]>

--- Incoming ---
[   'cv.stereoRectifyUncalibrated',
    'bool',
    [],
    [   ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['Mat', 'F', '', []],
        ['Size', 'imgSize', '', []],
        ['Mat', 'H1', '', ['/O']],
        ['Mat', 'H2', '', ['/O']],
        ['double', 'threshold', '5', []]],
    'bool']
ok: FUNC <bool cv..stereoRectifyUncalibrated [ARG Mat points1=, ARG Mat points2=, ARG Mat F=, ARG Size imgSize=, ARG Mat H1=, ARG Mat H2=, ARG double threshold=5]>

--- Incoming ---
[   'cv.rectify3Collinear',
    'float',
    [],
    [   ['Mat', 'cameraMatrix1', '', []],
        ['Mat', 'distCoeffs1', '', []],
        ['Mat', 'cameraMatrix2', '', []],
        ['Mat', 'distCoeffs2', '', []],
        ['Mat', 'cameraMatrix3', '', []],
        ['Mat', 'distCoeffs3', '', []],
        ['vector_Mat', 'imgpt1', '', []],
        ['vector_Mat', 'imgpt3', '', []],
        ['Size', 'imageSize', '', []],
        ['Mat', 'R12', '', []],
        ['Mat', 'T12', '', []],
        ['Mat', 'R13', '', []],
        ['Mat', 'T13', '', []],
        ['Mat', 'R1', '', ['/O']],
        ['Mat', 'R2', '', ['/O']],
        ['Mat', 'R3', '', ['/O']],
        ['Mat', 'P1', '', ['/O']],
        ['Mat', 'P2', '', ['/O']],
        ['Mat', 'P3', '', ['/O']],
        ['Mat', 'Q', '', ['/O']],
        ['double', 'alpha', '', []],
        ['Size', 'newImgSize', '', []],
        ['Rect*', 'roi1', '', ['/O']],
        ['Rect*', 'roi2', '', ['/O']],
        ['int', 'flags', '', []]],
    'float']
ok: FUNC <float cv..rectify3Collinear [ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Mat cameraMatrix3=, ARG Mat distCoeffs3=, ARG vector_Mat imgpt1=, ARG vector_Mat imgpt3=, ARG Size imageSize=, ARG Mat R12=, ARG Mat T12=, ARG Mat R13=, ARG Mat T13=, ARG Mat R1=, ARG Mat R2=, ARG Mat R3=, ARG Mat P1=, ARG Mat P2=, ARG Mat P3=, ARG Mat Q=, ARG double alpha=, ARG Size newImgSize=, ARG Rect * roi1=, ARG Rect * roi2=, ARG int flags=]>

--- Incoming ---
[   'cv.getOptimalNewCameraMatrix',
    'Mat',
    [],
    [   ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'distCoeffs', '', []],
        ['Size', 'imageSize', '', []],
        ['double', 'alpha', '', []],
        ['Size', 'newImgSize', 'Size()', []],
        ['Rect*', 'validPixROI', '0', ['/O']],
        ['bool', 'centerPrincipalPoint', 'false', []]],
    'Mat']
ok: FUNC <Mat cv..getOptimalNewCameraMatrix [ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Size imageSize=, ARG double alpha=, ARG Size newImgSize=Size(), ARG Rect * validPixROI=0, ARG bool centerPrincipalPoint=false]>

--- Incoming ---
[   'cv.convertPointsToHomogeneous',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..convertPointsToHomogeneous [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.convertPointsFromHomogeneous',
    'void',
    [],
    [['Mat', 'src', '', []], ['Mat', 'dst', '', ['/O']]],
    'void']
ok: FUNC <void cv..convertPointsFromHomogeneous [ARG Mat src=, ARG Mat dst=]>

--- Incoming ---
[   'cv.findFundamentalMat',
    'Mat',
    [],
    [   ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['int', 'method', 'FM_RANSAC', []],
        ['double', 'ransacReprojThreshold', '3.', []],
        ['double', 'confidence', '0.99', []],
        ['Mat', 'mask', 'Mat()', ['/O']]],
    'Mat']
ok: FUNC <Mat cv..findFundamentalMat [ARG vector_Point2f points1=, ARG vector_Point2f points2=, ARG int method=FM_RANSAC, ARG double ransacReprojThreshold=3., ARG double confidence=0.99, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.findEssentialMat',
    'Mat',
    [],
    [   ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['int', 'method', 'RANSAC', []],
        ['double', 'prob', '0.999', []],
        ['double', 'threshold', '1.0', []],
        ['Mat', 'mask', 'Mat()', ['/O']]],
    'Mat']
ok: FUNC <Mat cv..findEssentialMat [ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix=, ARG int method=RANSAC, ARG double prob=0.999, ARG double threshold=1.0, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.findEssentialMat',
    'Mat',
    [],
    [   ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['double', 'focal', '1.0', []],
        ['Point2d', 'pp', 'Point2d(0, 0)', []],
        ['int', 'method', 'RANSAC', []],
        ['double', 'prob', '0.999', []],
        ['double', 'threshold', '1.0', []],
        ['Mat', 'mask', 'Mat()', ['/O']]],
    'Mat']
ok: FUNC <Mat cv..findEssentialMat [ARG Mat points1=, ARG Mat points2=, ARG double focal=1.0, ARG Point2d pp=Point2d(0, 0), ARG int method=RANSAC, ARG double prob=0.999, ARG double threshold=1.0, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.decomposeEssentialMat',
    'void',
    [],
    [   ['Mat', 'E', '', []],
        ['Mat', 'R1', '', ['/O']],
        ['Mat', 'R2', '', ['/O']],
        ['Mat', 't', '', ['/O']]],
    'void']
ok: FUNC <void cv..decomposeEssentialMat [ARG Mat E=, ARG Mat R1=, ARG Mat R2=, ARG Mat t=]>

--- Incoming ---
[   'cv.recoverPose',
    'int',
    [],
    [   ['Mat', 'E', '', []],
        ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'R', '', ['/O']],
        ['Mat', 't', '', ['/O']],
        ['Mat', 'mask', 'Mat()', ['/IO']]],
    'int']
ok: FUNC <int cv..recoverPose [ARG Mat E=, ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix=, ARG Mat R=, ARG Mat t=, ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.recoverPose',
    'int',
    [],
    [   ['Mat', 'E', '', []],
        ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['Mat', 'R', '', ['/O']],
        ['Mat', 't', '', ['/O']],
        ['double', 'focal', '1.0', []],
        ['Point2d', 'pp', 'Point2d(0, 0)', []],
        ['Mat', 'mask', 'Mat()', ['/IO']]],
    'int']
ok: FUNC <int cv..recoverPose [ARG Mat E=, ARG Mat points1=, ARG Mat points2=, ARG Mat R=, ARG Mat t=, ARG double focal=1.0, ARG Point2d pp=Point2d(0, 0), ARG Mat mask=Mat()]>

--- Incoming ---
[   'cv.recoverPose',
    'int',
    [],
    [   ['Mat', 'E', '', []],
        ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['Mat', 'cameraMatrix', '', []],
        ['Mat', 'R', '', ['/O']],
        ['Mat', 't', '', ['/O']],
        ['double', 'distanceThresh', '', []],
        ['Mat', 'mask', 'Mat()', ['/IO']],
        ['Mat', 'triangulatedPoints', 'Mat()', ['/O']]],
    'int']
ok: FUNC <int cv..recoverPose [ARG Mat E=, ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix=, ARG Mat R=, ARG Mat t=, ARG double distanceThresh=, ARG Mat mask=Mat(), ARG Mat triangulatedPoints=Mat()]>

--- Incoming ---
[   'cv.computeCorrespondEpilines',
    'void',
    [],
    [   ['Mat', 'points', '', []],
        ['int', 'whichImage', '', []],
        ['Mat', 'F', '', []],
        ['Mat', 'lines', '', ['/O']]],
    'void']
ok: FUNC <void cv..computeCorrespondEpilines [ARG Mat points=, ARG int whichImage=, ARG Mat F=, ARG Mat lines=]>

--- Incoming ---
[   'cv.triangulatePoints',
    'void',
    [],
    [   ['Mat', 'projMatr1', '', []],
        ['Mat', 'projMatr2', '', []],
        ['Mat', 'projPoints1', '', []],
        ['Mat', 'projPoints2', '', []],
        ['Mat', 'points4D', '', ['/O']]],
    'void']
ok: FUNC <void cv..triangulatePoints [ARG Mat projMatr1=, ARG Mat projMatr2=, ARG Mat projPoints1=, ARG Mat projPoints2=, ARG Mat points4D=]>

--- Incoming ---
[   'cv.correctMatches',
    'void',
    [],
    [   ['Mat', 'F', '', []],
        ['Mat', 'points1', '', []],
        ['Mat', 'points2', '', []],
        ['Mat', 'newPoints1', '', ['/O']],
        ['Mat', 'newPoints2', '', ['/O']]],
    'void']
ok: FUNC <void cv..correctMatches [ARG Mat F=, ARG Mat points1=, ARG Mat points2=, ARG Mat newPoints1=, ARG Mat newPoints2=]>

--- Incoming ---
[   'cv.filterSpeckles',
    'void',
    [],
    [   ['Mat', 'img', '', ['/IO']],
        ['double', 'newVal', '', []],
        ['int', 'maxSpeckleSize', '', []],
        ['double', 'maxDiff', '', []],
        ['Mat', 'buf', 'Mat()', ['/IO']]],
    'void']
ok: FUNC <void cv..filterSpeckles [ARG Mat img=, ARG double newVal=, ARG int maxSpeckleSize=, ARG double maxDiff=, ARG Mat buf=Mat()]>

--- Incoming ---
[   'cv.getValidDisparityROI',
    'Rect',
    [],
    [   ['Rect', 'roi1', '', []],
        ['Rect', 'roi2', '', []],
        ['int', 'minDisparity', '', []],
        ['int', 'numberOfDisparities', '', []],
        ['int', 'SADWindowSize', '', []]],
    'Rect']
ok: FUNC <Rect cv..getValidDisparityROI [ARG Rect roi1=, ARG Rect roi2=, ARG int minDisparity=, ARG int numberOfDisparities=, ARG int SADWindowSize=]>

--- Incoming ---
[   'cv.validateDisparity',
    'void',
    [],
    [   ['Mat', 'disparity', '', ['/IO']],
        ['Mat', 'cost', '', []],
        ['int', 'minDisparity', '', []],
        ['int', 'numberOfDisparities', '', []],
        ['int', 'disp12MaxDisp', '1', []]],
    'void']
ok: FUNC <void cv..validateDisparity [ARG Mat disparity=, ARG Mat cost=, ARG int minDisparity=, ARG int numberOfDisparities=, ARG int disp12MaxDisp=1]>

--- Incoming ---
[   'cv.reprojectImageTo3D',
    'void',
    [],
    [   ['Mat', 'disparity', '', []],
        ['Mat', '_3dImage', '', ['/O']],
        ['Mat', 'Q', '', []],
        ['bool', 'handleMissingValues', 'false', []],
        ['int', 'ddepth', '-1', []]],
    'void']
ok: FUNC <void cv..reprojectImageTo3D [ARG Mat disparity=, ARG Mat _3dImage=, ARG Mat Q=, ARG bool handleMissingValues=false, ARG int ddepth=-1]>

--- Incoming ---
[   'cv.sampsonDistance',
    'double',
    [],
    [['Mat', 'pt1', '', []], ['Mat', 'pt2', '', []], ['Mat', 'F', '', []]],
    'double']
ok: FUNC <double cv..sampsonDistance [ARG Mat pt1=, ARG Mat pt2=, ARG Mat F=]>

--- Incoming ---
[   'cv.estimateAffine3D',
    'int',
    [],
    [   ['Mat', 'src', '', []],
        ['Mat', 'dst', '', []],
        ['Mat', 'out', '', ['/O']],
        ['Mat', 'inliers', '', ['/O']],
        ['double', 'ransacThreshold', '3', []],
        ['double', 'confidence', '0.99', []]],
    'int']
ok: FUNC <int cv..estimateAffine3D [ARG Mat src=, ARG Mat dst=, ARG Mat out=, ARG Mat inliers=, ARG double ransacThreshold=3, ARG double confidence=0.99]>

--- Incoming ---
[   'cv.estimateAffine2D',
    'Mat',
    [],
    [   ['Mat', 'from', '', []],
        ['Mat', 'to', '', []],
        ['Mat', 'inliers', 'Mat()', ['/O']],
        ['int', 'method', 'RANSAC', []],
        ['double', 'ransacReprojThreshold', '3', []],
        ['size_t', 'maxIters', '2000', []],
        ['double', 'confidence', '0.99', []],
        ['size_t', 'refineIters', '10', []]],
    'cv::Mat']
ok: FUNC <Mat cv..estimateAffine2D [ARG Mat from=, ARG Mat to=, ARG Mat inliers=Mat(), ARG int method=RANSAC, ARG double ransacReprojThreshold=3, ARG size_t maxIters=2000, ARG double confidence=0.99, ARG size_t refineIters=10]>

--- Incoming ---
[   'cv.estimateAffinePartial2D',
    'Mat',
    [],
    [   ['Mat', 'from', '', []],
        ['Mat', 'to', '', []],
        ['Mat', 'inliers', 'Mat()', ['/O']],
        ['int', 'method', 'RANSAC', []],
        ['double', 'ransacReprojThreshold', '3', []],
        ['size_t', 'maxIters', '2000', []],
        ['double', 'confidence', '0.99', []],
        ['size_t', 'refineIters', '10', []]],
    'cv::Mat']
ok: FUNC <Mat cv..estimateAffinePartial2D [ARG Mat from=, ARG Mat to=, ARG Mat inliers=Mat(), ARG int method=RANSAC, ARG double ransacReprojThreshold=3, ARG size_t maxIters=2000, ARG double confidence=0.99, ARG size_t refineIters=10]>

--- Incoming ---
[   'cv.decomposeHomographyMat',
    'int',
    [],
    [   ['Mat', 'H', '', []],
        ['Mat', 'K', '', []],
        ['vector_Mat', 'rotations', '', ['/O']],
        ['vector_Mat', 'translations', '', ['/O']],
        ['vector_Mat', 'normals', '', ['/O']]],
    'int']
ok: FUNC <int cv..decomposeHomographyMat [ARG Mat H=, ARG Mat K=, ARG vector_Mat rotations=, ARG vector_Mat translations=, ARG vector_Mat normals=]>

--- Incoming ---
[   'cv.filterHomographyDecompByVisibleRefpoints',
    'void',
    [],
    [   ['vector_Mat', 'rotations', '', []],
        ['vector_Mat', 'normals', '', []],
        ['Mat', 'beforePoints', '', []],
        ['Mat', 'afterPoints', '', []],
        ['Mat', 'possibleSolutions', '', ['/O']],
        ['Mat', 'pointsMask', 'Mat()', []]],
    'void']
ok: FUNC <void cv..filterHomographyDecompByVisibleRefpoints [ARG vector_Mat rotations=, ARG vector_Mat normals=, ARG Mat beforePoints=, ARG Mat afterPoints=, ARG Mat possibleSolutions=, ARG Mat pointsMask=Mat()]>

--- Incoming ---
['class cv.StereoMatcher', ': cv::Algorithm', [], [], None]
ok: class CLASS cv::.StereoMatcher : Algorithm, name: StereoMatcher, base: Algorithm

--- Incoming ---
['const cv.StereoMatcher.DISP_SHIFT', '4', [], [], None]
ok: CONST DISP_SHIFT=4

--- Incoming ---
['const cv.StereoMatcher.DISP_SCALE', '(1 << DISP_SHIFT)', [], [], None]
ok: CONST DISP_SCALE=(1 << DISP_SHIFT)

--- Incoming ---
[   'cv.StereoMatcher.compute',
    'void',
    ['/V', '/PV'],
    [   ['Mat', 'left', '', []],
        ['Mat', 'right', '', []],
        ['Mat', 'disparity', '', ['/O']]],
    'void']
ok: FUNC <void cv.StereoMatcher.compute [ARG Mat left=, ARG Mat right=, ARG Mat disparity=]>

--- Incoming ---
['cv.StereoMatcher.getMinDisparity', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoMatcher.getMinDisparity []>

--- Incoming ---
[   'cv.StereoMatcher.setMinDisparity',
    'void',
    ['/V', '/PV'],
    [['int', 'minDisparity', '', []]],
    'void']
ok: FUNC <void cv.StereoMatcher.setMinDisparity [ARG int minDisparity=]>

--- Incoming ---
['cv.StereoMatcher.getNumDisparities', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoMatcher.getNumDisparities []>

--- Incoming ---
[   'cv.StereoMatcher.setNumDisparities',
    'void',
    ['/V', '/PV'],
    [['int', 'numDisparities', '', []]],
    'void']
ok: FUNC <void cv.StereoMatcher.setNumDisparities [ARG int numDisparities=]>

--- Incoming ---
['cv.StereoMatcher.getBlockSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoMatcher.getBlockSize []>

--- Incoming ---
[   'cv.StereoMatcher.setBlockSize',
    'void',
    ['/V', '/PV'],
    [['int', 'blockSize', '', []]],
    'void']
ok: FUNC <void cv.StereoMatcher.setBlockSize [ARG int blockSize=]>

--- Incoming ---
['cv.StereoMatcher.getSpeckleWindowSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoMatcher.getSpeckleWindowSize []>

--- Incoming ---
[   'cv.StereoMatcher.setSpeckleWindowSize',
    'void',
    ['/V', '/PV'],
    [['int', 'speckleWindowSize', '', []]],
    'void']
ok: FUNC <void cv.StereoMatcher.setSpeckleWindowSize [ARG int speckleWindowSize=]>

--- Incoming ---
['cv.StereoMatcher.getSpeckleRange', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoMatcher.getSpeckleRange []>

--- Incoming ---
[   'cv.StereoMatcher.setSpeckleRange',
    'void',
    ['/V', '/PV'],
    [['int', 'speckleRange', '', []]],
    'void']
ok: FUNC <void cv.StereoMatcher.setSpeckleRange [ARG int speckleRange=]>

--- Incoming ---
['cv.StereoMatcher.getDisp12MaxDiff', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoMatcher.getDisp12MaxDiff []>

--- Incoming ---
[   'cv.StereoMatcher.setDisp12MaxDiff',
    'void',
    ['/V', '/PV'],
    [['int', 'disp12MaxDiff', '', []]],
    'void']
ok: FUNC <void cv.StereoMatcher.setDisp12MaxDiff [ARG int disp12MaxDiff=]>

--- Incoming ---
['class cv.StereoBM', ': cv::StereoMatcher', [], [], None]
ok: class CLASS cv::.StereoBM : StereoMatcher, name: StereoBM, base: StereoMatcher

--- Incoming ---
['const cv.StereoBM.PREFILTER_NORMALIZED_RESPONSE', '0', [], [], None]
ok: CONST PREFILTER_NORMALIZED_RESPONSE=0

--- Incoming ---
['const cv.StereoBM.PREFILTER_XSOBEL', '1', [], [], None]
ok: CONST PREFILTER_XSOBEL=1

--- Incoming ---
['cv.StereoBM.getPreFilterType', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoBM.getPreFilterType []>

--- Incoming ---
[   'cv.StereoBM.setPreFilterType',
    'void',
    ['/V', '/PV'],
    [['int', 'preFilterType', '', []]],
    'void']
ok: FUNC <void cv.StereoBM.setPreFilterType [ARG int preFilterType=]>

--- Incoming ---
['cv.StereoBM.getPreFilterSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoBM.getPreFilterSize []>

--- Incoming ---
[   'cv.StereoBM.setPreFilterSize',
    'void',
    ['/V', '/PV'],
    [['int', 'preFilterSize', '', []]],
    'void']
ok: FUNC <void cv.StereoBM.setPreFilterSize [ARG int preFilterSize=]>

--- Incoming ---
['cv.StereoBM.getPreFilterCap', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoBM.getPreFilterCap []>

--- Incoming ---
[   'cv.StereoBM.setPreFilterCap',
    'void',
    ['/V', '/PV'],
    [['int', 'preFilterCap', '', []]],
    'void']
ok: FUNC <void cv.StereoBM.setPreFilterCap [ARG int preFilterCap=]>

--- Incoming ---
['cv.StereoBM.getTextureThreshold', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoBM.getTextureThreshold []>

--- Incoming ---
[   'cv.StereoBM.setTextureThreshold',
    'void',
    ['/V', '/PV'],
    [['int', 'textureThreshold', '', []]],
    'void']
ok: FUNC <void cv.StereoBM.setTextureThreshold [ARG int textureThreshold=]>

--- Incoming ---
['cv.StereoBM.getUniquenessRatio', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoBM.getUniquenessRatio []>

--- Incoming ---
[   'cv.StereoBM.setUniquenessRatio',
    'void',
    ['/V', '/PV'],
    [['int', 'uniquenessRatio', '', []]],
    'void']
ok: FUNC <void cv.StereoBM.setUniquenessRatio [ARG int uniquenessRatio=]>

--- Incoming ---
['cv.StereoBM.getSmallerBlockSize', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoBM.getSmallerBlockSize []>

--- Incoming ---
[   'cv.StereoBM.setSmallerBlockSize',
    'void',
    ['/V', '/PV'],
    [['int', 'blockSize', '', []]],
    'void']
ok: FUNC <void cv.StereoBM.setSmallerBlockSize [ARG int blockSize=]>

--- Incoming ---
['cv.StereoBM.getROI1', 'Rect', ['/C', '/V', '/PV'], [], 'Rect']
ok: FUNC <Rect cv.StereoBM.getROI1 []>

--- Incoming ---
[   'cv.StereoBM.setROI1',
    'void',
    ['/V', '/PV'],
    [['Rect', 'roi1', '', []]],
    'void']
ok: FUNC <void cv.StereoBM.setROI1 [ARG Rect roi1=]>

--- Incoming ---
['cv.StereoBM.getROI2', 'Rect', ['/C', '/V', '/PV'], [], 'Rect']
ok: FUNC <Rect cv.StereoBM.getROI2 []>

--- Incoming ---
[   'cv.StereoBM.setROI2',
    'void',
    ['/V', '/PV'],
    [['Rect', 'roi2', '', []]],
    'void']
ok: FUNC <void cv.StereoBM.setROI2 [ARG Rect roi2=]>

--- Incoming ---
[   'cv.StereoBM.create',
    'Ptr_StereoBM',
    ['/S'],
    [['int', 'numDisparities', '0', []], ['int', 'blockSize', '21', []]],
    'Ptr<StereoBM>']
ok: FUNC <Ptr_StereoBM cv.StereoBM.create [ARG int numDisparities=0, ARG int blockSize=21]>

--- Incoming ---
['class cv.StereoSGBM', ': cv::StereoMatcher', [], [], None]
ok: class CLASS cv::.StereoSGBM : StereoMatcher, name: StereoSGBM, base: StereoMatcher

--- Incoming ---
['const cv.StereoSGBM.MODE_SGBM', '0', [], [], None]
ok: CONST MODE_SGBM=0

--- Incoming ---
['const cv.StereoSGBM.MODE_HH', '1', [], [], None]
ok: CONST MODE_HH=1

--- Incoming ---
['const cv.StereoSGBM.MODE_SGBM_3WAY', '2', [], [], None]
ok: CONST MODE_SGBM_3WAY=2

--- Incoming ---
['const cv.StereoSGBM.MODE_HH4', '3', [], [], None]
ok: CONST MODE_HH4=3

--- Incoming ---
['cv.StereoSGBM.getPreFilterCap', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoSGBM.getPreFilterCap []>

--- Incoming ---
[   'cv.StereoSGBM.setPreFilterCap',
    'void',
    ['/V', '/PV'],
    [['int', 'preFilterCap', '', []]],
    'void']
ok: FUNC <void cv.StereoSGBM.setPreFilterCap [ARG int preFilterCap=]>

--- Incoming ---
['cv.StereoSGBM.getUniquenessRatio', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoSGBM.getUniquenessRatio []>

--- Incoming ---
[   'cv.StereoSGBM.setUniquenessRatio',
    'void',
    ['/V', '/PV'],
    [['int', 'uniquenessRatio', '', []]],
    'void']
ok: FUNC <void cv.StereoSGBM.setUniquenessRatio [ARG int uniquenessRatio=]>

--- Incoming ---
['cv.StereoSGBM.getP1', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoSGBM.getP1 []>

--- Incoming ---
['cv.StereoSGBM.setP1', 'void', ['/V', '/PV'], [['int', 'P1', '', []]], 'void']
ok: FUNC <void cv.StereoSGBM.setP1 [ARG int P1=]>

--- Incoming ---
['cv.StereoSGBM.getP2', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoSGBM.getP2 []>

--- Incoming ---
['cv.StereoSGBM.setP2', 'void', ['/V', '/PV'], [['int', 'P2', '', []]], 'void']
ok: FUNC <void cv.StereoSGBM.setP2 [ARG int P2=]>

--- Incoming ---
['cv.StereoSGBM.getMode', 'int', ['/C', '/V', '/PV'], [], 'int']
ok: FUNC <int cv.StereoSGBM.getMode []>

--- Incoming ---
[   'cv.StereoSGBM.setMode',
    'void',
    ['/V', '/PV'],
    [['int', 'mode', '', []]],
    'void']
ok: FUNC <void cv.StereoSGBM.setMode [ARG int mode=]>

--- Incoming ---
[   'cv.StereoSGBM.create',
    'Ptr_StereoSGBM',
    ['/S'],
    [   ['int', 'minDisparity', '0', []],
        ['int', 'numDisparities', '16', []],
        ['int', 'blockSize', '3', []],
        ['int', 'P1', '0', []],
        ['int', 'P2', '0', []],
        ['int', 'disp12MaxDiff', '0', []],
        ['int', 'preFilterCap', '0', []],
        ['int', 'uniquenessRatio', '0', []],
        ['int', 'speckleWindowSize', '0', []],
        ['int', 'speckleRange', '0', []],
        ['int', 'mode', 'StereoSGBM::MODE_SGBM', []]],
    'Ptr<StereoSGBM>']
ok: FUNC <Ptr_StereoSGBM cv.StereoSGBM.create [ARG int minDisparity=0, ARG int numDisparities=16, ARG int blockSize=3, ARG int P1=0, ARG int P2=0, ARG int disp12MaxDiff=0, ARG int preFilterCap=0, ARG int uniquenessRatio=0, ARG int speckleWindowSize=0, ARG int speckleRange=0, ARG int mode=StereoSGBM::MODE_SGBM]>

--- Incoming ---
['const cv.fisheye.CALIB_USE_INTRINSIC_GUESS', '1 << 0', [], [], None]
ok: CONST fisheye_CALIB_USE_INTRINSIC_GUESS=1 << 0

--- Incoming ---
['const cv.fisheye.CALIB_RECOMPUTE_EXTRINSIC', '1 << 1', [], [], None]
ok: CONST fisheye_CALIB_RECOMPUTE_EXTRINSIC=1 << 1

--- Incoming ---
['const cv.fisheye.CALIB_CHECK_COND', '1 << 2', [], [], None]
ok: CONST fisheye_CALIB_CHECK_COND=1 << 2

--- Incoming ---
['const cv.fisheye.CALIB_FIX_SKEW', '1 << 3', [], [], None]
ok: CONST fisheye_CALIB_FIX_SKEW=1 << 3

--- Incoming ---
['const cv.fisheye.CALIB_FIX_K1', '1 << 4', [], [], None]
ok: CONST fisheye_CALIB_FIX_K1=1 << 4

--- Incoming ---
['const cv.fisheye.CALIB_FIX_K2', '1 << 5', [], [], None]
ok: CONST fisheye_CALIB_FIX_K2=1 << 5

--- Incoming ---
['const cv.fisheye.CALIB_FIX_K3', '1 << 6', [], [], None]
ok: CONST fisheye_CALIB_FIX_K3=1 << 6

--- Incoming ---
['const cv.fisheye.CALIB_FIX_K4', '1 << 7', [], [], None]
ok: CONST fisheye_CALIB_FIX_K4=1 << 7

--- Incoming ---
['const cv.fisheye.CALIB_FIX_INTRINSIC', '1 << 8', [], [], None]
ok: CONST fisheye_CALIB_FIX_INTRINSIC=1 << 8

--- Incoming ---
['const cv.fisheye.CALIB_FIX_PRINCIPAL_POINT', '1 << 9', [], [], None]
ok: CONST fisheye_CALIB_FIX_PRINCIPAL_POINT=1 << 9

--- Incoming ---
[   'cv.fisheye.projectPoints',
    'void',
    [],
    [   ['Mat', 'objectPoints', '', []],
        ['Mat', 'imagePoints', '', ['/O']],
        ['Mat', 'rvec', '', []],
        ['Mat', 'tvec', '', []],
        ['Mat', 'K', '', []],
        ['Mat', 'D', '', []],
        ['double', 'alpha', '0', []],
        ['Mat', 'jacobian', 'Mat()', ['/O']]],
    'void']
ok: FUNC <void cv.fisheye..projectPoints [ARG Mat objectPoints=, ARG Mat imagePoints=, ARG Mat rvec=, ARG Mat tvec=, ARG Mat K=, ARG Mat D=, ARG double alpha=0, ARG Mat jacobian=Mat()]>

--- Incoming ---
[   'cv.fisheye.distortPoints',
    'void',
    [],
    [   ['Mat', 'undistorted', '', []],
        ['Mat', 'distorted', '', ['/O']],
        ['Mat', 'K', '', []],
        ['Mat', 'D', '', []],
        ['double', 'alpha', '0', []]],
    'void']
ok: FUNC <void cv.fisheye..distortPoints [ARG Mat undistorted=, ARG Mat distorted=, ARG Mat K=, ARG Mat D=, ARG double alpha=0]>

--- Incoming ---
[   'cv.fisheye.undistortPoints',
    'void',
    [],
    [   ['Mat', 'distorted', '', []],
        ['Mat', 'undistorted', '', ['/O']],
        ['Mat', 'K', '', []],
        ['Mat', 'D', '', []],
        ['Mat', 'R', 'Mat()', []],
        ['Mat', 'P', 'Mat()', []]],
    'void']
ok: FUNC <void cv.fisheye..undistortPoints [ARG Mat distorted=, ARG Mat undistorted=, ARG Mat K=, ARG Mat D=, ARG Mat R=Mat(), ARG Mat P=Mat()]>

--- Incoming ---
[   'cv.fisheye.initUndistortRectifyMap',
    'void',
    [],
    [   ['Mat', 'K', '', []],
        ['Mat', 'D', '', []],
        ['Mat', 'R', '', []],
        ['Mat', 'P', '', []],
        ['Size', 'size', '', ['/C', '/Ref']],
        ['int', 'm1type', '', []],
        ['Mat', 'map1', '', ['/O']],
        ['Mat', 'map2', '', ['/O']]],
    'void']
ok: FUNC <void cv.fisheye..initUndistortRectifyMap [ARG Mat K=, ARG Mat D=, ARG Mat R=, ARG Mat P=, ARG Size size=, ARG int m1type=, ARG Mat map1=, ARG Mat map2=]>

--- Incoming ---
[   'cv.fisheye.undistortImage',
    'void',
    [],
    [   ['Mat', 'distorted', '', []],
        ['Mat', 'undistorted', '', ['/O']],
        ['Mat', 'K', '', []],
        ['Mat', 'D', '', []],
        ['Mat', 'Knew', 'cv::Mat()', []],
        ['Size', 'new_size', 'Size()', ['/C', '/Ref']]],
    'void']
ok: FUNC <void cv.fisheye..undistortImage [ARG Mat distorted=, ARG Mat undistorted=, ARG Mat K=, ARG Mat D=, ARG Mat Knew=cv::Mat(), ARG Size new_size=Size()]>

--- Incoming ---
[   'cv.fisheye.estimateNewCameraMatrixForUndistortRectify',
    'void',
    [],
    [   ['Mat', 'K', '', []],
        ['Mat', 'D', '', []],
        ['Size', 'image_size', '', ['/C', '/Ref']],
        ['Mat', 'R', '', []],
        ['Mat', 'P', '', ['/O']],
        ['double', 'balance', '0.0', []],
        ['Size', 'new_size', 'Size()', ['/C', '/Ref']],
        ['double', 'fov_scale', '1.0', []]],
    'void']
ok: FUNC <void cv.fisheye..estimateNewCameraMatrixForUndistortRectify [ARG Mat K=, ARG Mat D=, ARG Size image_size=, ARG Mat R=, ARG Mat P=, ARG double balance=0.0, ARG Size new_size=Size(), ARG double fov_scale=1.0]>

--- Incoming ---
[   'cv.fisheye.calibrate',
    'double',
    [],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints', '', []],
        ['Size', 'image_size', '', ['/C', '/Ref']],
        ['Mat', 'K', '', ['/IO']],
        ['Mat', 'D', '', ['/IO']],
        ['vector_Mat', 'rvecs', '', ['/O']],
        ['vector_Mat', 'tvecs', '', ['/O']],
        ['int', 'flags', '0', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, '
            'DBL_EPSILON)',
            []]],
    'double']
ok: FUNC <double cv.fisheye..calibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints=, ARG Size image_size=, ARG Mat K=, ARG Mat D=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG int flags=0, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON)]>

--- Incoming ---
[   'cv.fisheye.stereoRectify',
    'void',
    [],
    [   ['Mat', 'K1', '', []],
        ['Mat', 'D1', '', []],
        ['Mat', 'K2', '', []],
        ['Mat', 'D2', '', []],
        ['Size', 'imageSize', '', ['/C', '/Ref']],
        ['Mat', 'R', '', []],
        ['Mat', 'tvec', '', []],
        ['Mat', 'R1', '', ['/O']],
        ['Mat', 'R2', '', ['/O']],
        ['Mat', 'P1', '', ['/O']],
        ['Mat', 'P2', '', ['/O']],
        ['Mat', 'Q', '', ['/O']],
        ['int', 'flags', '', []],
        ['Size', 'newImageSize', 'Size()', ['/C', '/Ref']],
        ['double', 'balance', '0.0', []],
        ['double', 'fov_scale', '1.0', []]],
    'void']
ok: FUNC <void cv.fisheye..stereoRectify [ARG Mat K1=, ARG Mat D1=, ARG Mat K2=, ARG Mat D2=, ARG Size imageSize=, ARG Mat R=, ARG Mat tvec=, ARG Mat R1=, ARG Mat R2=, ARG Mat P1=, ARG Mat P2=, ARG Mat Q=, ARG int flags=, ARG Size newImageSize=Size(), ARG double balance=0.0, ARG double fov_scale=1.0]>

--- Incoming ---
[   'cv.fisheye.stereoCalibrate',
    'double',
    [],
    [   ['vector_Mat', 'objectPoints', '', []],
        ['vector_Mat', 'imagePoints1', '', []],
        ['vector_Mat', 'imagePoints2', '', []],
        ['Mat', 'K1', '', ['/IO']],
        ['Mat', 'D1', '', ['/IO']],
        ['Mat', 'K2', '', ['/IO']],
        ['Mat', 'D2', '', ['/IO']],
        ['Size', 'imageSize', '', []],
        ['Mat', 'R', '', ['/O']],
        ['Mat', 'T', '', ['/O']],
        ['int', 'flags', 'fisheye::CALIB_FIX_INTRINSIC', []],
        [   'TermCriteria',
            'criteria',
            'TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, '
            'DBL_EPSILON)',
            []]],
    'double']
ok: FUNC <double cv.fisheye..stereoCalibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints1=, ARG vector_Mat imagePoints2=, ARG Mat K1=, ARG Mat D1=, ARG Mat K2=, ARG Mat D2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG int flags=fisheye::CALIB_FIX_INTRINSIC, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON)]>


===== Header: C:/Users/d_dan/Desktop/opencv-master\modules/calib3d\include\opencv2\calib3d\calib3d.hpp =====
Namespaces: {'', 'cv', 'cv.fisheye'}
Ignore header: C:/Users/d_dan/Desktop/opencv-master\modules/calib3d\include\opencv2\calib3d\calib3d.hpp


===== Generating... =====
CLASS ::.Calib3d : 
[CONST CALIB_USE_INTRINSIC_GUESS=1(manual), CONST CALIB_RECOMPUTE_EXTRINSIC=2(manual), CONST CALIB_CHECK_COND=4(manual), CONST CALIB_FIX_SKEW=8(manual), CONST CALIB_FIX_K1=16(manual), CONST CALIB_FIX_K2=32(manual), CONST CALIB_FIX_K3=64(manual), CONST CALIB_FIX_K4=128(manual), CONST CALIB_FIX_INTRINSIC=256(manual), CONST CV_ITERATIVE=0, CONST CV_EPNP=1, CONST CV_P3P=2, CONST CV_DLS=3, CONST LMEDS=4, CONST RANSAC=8, CONST RHO=16, CONST SOLVEPNP_ITERATIVE=0, CONST SOLVEPNP_EPNP=1, CONST SOLVEPNP_P3P=2, CONST SOLVEPNP_DLS=3, CONST SOLVEPNP_UPNP=4, CONST SOLVEPNP_AP3P=5, CONST SOLVEPNP_MAX_COUNT=5+1, CONST CALIB_CB_ADAPTIVE_THRESH=1, CONST CALIB_CB_NORMALIZE_IMAGE=2, CONST CALIB_CB_FILTER_QUADS=4, CONST CALIB_CB_FAST_CHECK=8, CONST CALIB_CB_SYMMETRIC_GRID=1, CONST CALIB_CB_ASYMMETRIC_GRID=2, CONST CALIB_CB_CLUSTERING=4, CONST CALIB_FIX_ASPECT_RATIO=0x00002, CONST CALIB_FIX_PRINCIPAL_POINT=0x00004, CONST CALIB_ZERO_TANGENT_DIST=0x00008, CONST CALIB_FIX_FOCAL_LENGTH=0x00010, CONST CALIB_FIX_K5=0x01000, CONST CALIB_FIX_K6=0x02000, CONST CALIB_RATIONAL_MODEL=0x04000, CONST CALIB_THIN_PRISM_MODEL=0x08000, CONST CALIB_FIX_S1_S2_S3_S4=0x10000, CONST CALIB_TILTED_MODEL=0x40000, CONST CALIB_FIX_TAUX_TAUY=0x80000, CONST CALIB_USE_QR=0x100000, CONST CALIB_FIX_TANGENT_DIST=0x200000, CONST CALIB_SAME_FOCAL_LENGTH=0x00200, CONST CALIB_ZERO_DISPARITY=0x00400, CONST CALIB_USE_LU=(1 << 17), CONST CALIB_USE_EXTRINSIC_GUESS=(1 << 22), CONST FM_7POINT=1, CONST FM_8POINT=2, CONST FM_LMEDS=4, CONST FM_RANSAC=8, CONST fisheye_CALIB_USE_INTRINSIC_GUESS=1 << 0, CONST fisheye_CALIB_RECOMPUTE_EXTRINSIC=1 << 1, CONST fisheye_CALIB_CHECK_COND=1 << 2, CONST fisheye_CALIB_FIX_SKEW=1 << 3, CONST fisheye_CALIB_FIX_K1=1 << 4, CONST fisheye_CALIB_FIX_K2=1 << 5, CONST fisheye_CALIB_FIX_K3=1 << 6, CONST fisheye_CALIB_FIX_K4=1 << 7, CONST fisheye_CALIB_FIX_INTRINSIC=1 << 8, CONST fisheye_CALIB_FIX_PRINCIPAL_POINT=1 << 9]
FUNC <Mat cv..estimateAffine2D [ARG Mat from=, ARG Mat to=, ARG Mat inliers=Mat(), ARG int method=RANSAC, ARG double ransacReprojThreshold=3, ARG size_t maxIters=2000, ARG double confidence=0.99, ARG size_t refineIters=10]>
java: Mat estimateAffine2D(Mat from, Mat to, Mat inliers, int method, double ransacReprojThreshold, long maxIters, double confidence, long refineIters)
java: Mat estimateAffine2D(Mat from, Mat to, Mat inliers, int method, double ransacReprojThreshold, long maxIters, double confidence)
java: Mat estimateAffine2D(Mat from, Mat to, Mat inliers, int method, double ransacReprojThreshold, long maxIters)
java: Mat estimateAffine2D(Mat from, Mat to, Mat inliers, int method, double ransacReprojThreshold)
java: Mat estimateAffine2D(Mat from, Mat to, Mat inliers, int method)
java: Mat estimateAffine2D(Mat from, Mat to, Mat inliers)
java: Mat estimateAffine2D(Mat from, Mat to)
FUNC <Mat cv..estimateAffinePartial2D [ARG Mat from=, ARG Mat to=, ARG Mat inliers=Mat(), ARG int method=RANSAC, ARG double ransacReprojThreshold=3, ARG size_t maxIters=2000, ARG double confidence=0.99, ARG size_t refineIters=10]>
java: Mat estimateAffinePartial2D(Mat from, Mat to, Mat inliers, int method, double ransacReprojThreshold, long maxIters, double confidence, long refineIters)
java: Mat estimateAffinePartial2D(Mat from, Mat to, Mat inliers, int method, double ransacReprojThreshold, long maxIters, double confidence)
java: Mat estimateAffinePartial2D(Mat from, Mat to, Mat inliers, int method, double ransacReprojThreshold, long maxIters)
java: Mat estimateAffinePartial2D(Mat from, Mat to, Mat inliers, int method, double ransacReprojThreshold)
java: Mat estimateAffinePartial2D(Mat from, Mat to, Mat inliers, int method)
java: Mat estimateAffinePartial2D(Mat from, Mat to, Mat inliers)
java: Mat estimateAffinePartial2D(Mat from, Mat to)
FUNC <Mat cv..findEssentialMat [ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix=, ARG int method=RANSAC, ARG double prob=0.999, ARG double threshold=1.0, ARG Mat mask=Mat()]>
java: Mat findEssentialMat(Mat points1, Mat points2, Mat cameraMatrix, int method, double prob, double threshold, Mat mask)
java: Mat findEssentialMat(Mat points1, Mat points2, Mat cameraMatrix, int method, double prob, double threshold)
java: Mat findEssentialMat(Mat points1, Mat points2, Mat cameraMatrix, int method, double prob)
java: Mat findEssentialMat(Mat points1, Mat points2, Mat cameraMatrix, int method)
java: Mat findEssentialMat(Mat points1, Mat points2, Mat cameraMatrix)
FUNC <Mat cv..findEssentialMat [ARG Mat points1=, ARG Mat points2=, ARG double focal=1.0, ARG Point2d pp=Point2d(0, 0), ARG int method=RANSAC, ARG double prob=0.999, ARG double threshold=1.0, ARG Mat mask=Mat()]>
java: Mat findEssentialMat(Mat points1, Mat points2, double focal, Point pp, int method, double prob, double threshold, Mat mask)
java: Mat findEssentialMat(Mat points1, Mat points2, double focal, Point pp, int method, double prob, double threshold)
java: Mat findEssentialMat(Mat points1, Mat points2, double focal, Point pp, int method, double prob)
java: Mat findEssentialMat(Mat points1, Mat points2, double focal, Point pp, int method)
java: Mat findEssentialMat(Mat points1, Mat points2, double focal, Point pp)
java: Mat findEssentialMat(Mat points1, Mat points2, double focal)
java: Mat findEssentialMat(Mat points1, Mat points2)
FUNC <Mat cv..findFundamentalMat [ARG vector_Point2f points1=, ARG vector_Point2f points2=, ARG int method=FM_RANSAC, ARG double ransacReprojThreshold=3., ARG double confidence=0.99, ARG Mat mask=Mat()]>
java: Mat findFundamentalMat(MatOfPoint2f points1, MatOfPoint2f points2, int method, double ransacReprojThreshold, double confidence, Mat mask)
java: Mat findFundamentalMat(MatOfPoint2f points1, MatOfPoint2f points2, int method, double ransacReprojThreshold, double confidence)
java: Mat findFundamentalMat(MatOfPoint2f points1, MatOfPoint2f points2, int method, double ransacReprojThreshold)
java: Mat findFundamentalMat(MatOfPoint2f points1, MatOfPoint2f points2, int method)
java: Mat findFundamentalMat(MatOfPoint2f points1, MatOfPoint2f points2)
FUNC <Mat cv..findHomography [ARG vector_Point2f srcPoints=, ARG vector_Point2f dstPoints=, ARG int method=0, ARG double ransacReprojThreshold=3, ARG Mat mask=Mat(), ARG int maxIters=2000, ARG double confidence=0.995]>
java: Mat findHomography(MatOfPoint2f srcPoints, MatOfPoint2f dstPoints, int method, double ransacReprojThreshold, Mat mask, int maxIters, double confidence)
java: Mat findHomography(MatOfPoint2f srcPoints, MatOfPoint2f dstPoints, int method, double ransacReprojThreshold, Mat mask, int maxIters)
java: Mat findHomography(MatOfPoint2f srcPoints, MatOfPoint2f dstPoints, int method, double ransacReprojThreshold, Mat mask)
java: Mat findHomography(MatOfPoint2f srcPoints, MatOfPoint2f dstPoints, int method, double ransacReprojThreshold)
java: Mat findHomography(MatOfPoint2f srcPoints, MatOfPoint2f dstPoints, int method)
java: Mat findHomography(MatOfPoint2f srcPoints, MatOfPoint2f dstPoints)
FUNC <Mat cv..getOptimalNewCameraMatrix [ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG Size imageSize=, ARG double alpha=, ARG Size newImgSize=Size(), ARG Rect * validPixROI=0, ARG bool centerPrincipalPoint=false]>
java: Mat getOptimalNewCameraMatrix(Mat cameraMatrix, Mat distCoeffs, Size imageSize, double alpha, Size newImgSize, Rect validPixROI, boolean centerPrincipalPoint)
java: Mat getOptimalNewCameraMatrix(Mat cameraMatrix, Mat distCoeffs, Size imageSize, double alpha, Size newImgSize, Rect validPixROI)
java: Mat getOptimalNewCameraMatrix(Mat cameraMatrix, Mat distCoeffs, Size imageSize, double alpha, Size newImgSize)
java: Mat getOptimalNewCameraMatrix(Mat cameraMatrix, Mat distCoeffs, Size imageSize, double alpha)
FUNC <Mat cv..initCameraMatrix2D [ARG vector_vector_Point3f objectPoints=, ARG vector_vector_Point2f imagePoints=, ARG Size imageSize=, ARG double aspectRatio=1.0]>
java: Mat initCameraMatrix2D(List<MatOfPoint3f> objectPoints, List<MatOfPoint2f> imagePoints, Size imageSize, double aspectRatio)
java: Mat initCameraMatrix2D(List<MatOfPoint3f> objectPoints, List<MatOfPoint2f> imagePoints, Size imageSize)
FUNC <Rect cv..getValidDisparityROI [ARG Rect roi1=, ARG Rect roi2=, ARG int minDisparity=, ARG int numberOfDisparities=, ARG int SADWindowSize=]>
java: Rect getValidDisparityROI(Rect roi1, Rect roi2, int minDisparity, int numberOfDisparities, int SADWindowSize)
FUNC <Vec3d cv..RQDecomp3x3 [ARG Mat src=, ARG Mat mtxR=, ARG Mat mtxQ=, ARG Mat Qx=Mat(), ARG Mat Qy=Mat(), ARG Mat Qz=Mat()]>
java: double[] RQDecomp3x3(Mat src, Mat mtxR, Mat mtxQ, Mat Qx, Mat Qy, Mat Qz)
java: double[] RQDecomp3x3(Mat src, Mat mtxR, Mat mtxQ, Mat Qx, Mat Qy)
java: double[] RQDecomp3x3(Mat src, Mat mtxR, Mat mtxQ, Mat Qx)
java: double[] RQDecomp3x3(Mat src, Mat mtxR, Mat mtxQ)
FUNC <bool cv..findChessboardCorners [ARG Mat image=, ARG Size patternSize=, ARG vector_Point2f corners=, ARG int flags=CALIB_CB_ADAPTIVE_THRESH + CALIB_CB_NORMALIZE_IMAGE]>
java: boolean findChessboardCorners(Mat image, Size patternSize, MatOfPoint2f corners, int flags)
java: boolean findChessboardCorners(Mat image, Size patternSize, MatOfPoint2f corners)
FUNC <bool cv..findCirclesGrid [ARG Mat image=, ARG Size patternSize=, ARG Mat centers=, ARG int flags=, ARG Ptr_FeatureDetector blobDetector=, ARG CirclesGridFinderParameters parameters=]>
SKIP:bool cv::findCirclesGrid(Mat image, Size patternSize, Mat& centers, int flags, Ptr_FeatureDetector blobDetector, CirclesGridFinderParameters parameters)	 due to ARG typePtr_FeatureDetector/I
FUNC <bool cv..findCirclesGrid [ARG Mat image=, ARG Size patternSize=, ARG Mat centers=, ARG int flags=CALIB_CB_SYMMETRIC_GRID, ARG Ptr_FeatureDetector blobDetector=SimpleBlobDetector::create()]>
java: boolean findCirclesGrid(Mat image, Size patternSize, Mat centers, int flags)
java: boolean findCirclesGrid(Mat image, Size patternSize, Mat centers, int flags)
java: boolean findCirclesGrid(Mat image, Size patternSize, Mat centers)
FUNC <bool cv..solvePnP [ARG vector_Point3f objectPoints=, ARG vector_Point2f imagePoints=, ARG Mat cameraMatrix=, ARG vector_double distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG bool useExtrinsicGuess=false, ARG int flags=SOLVEPNP_ITERATIVE]>
java: boolean solvePnP(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess, int flags)
java: boolean solvePnP(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess)
java: boolean solvePnP(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec)
FUNC <bool cv..solvePnPRansac [ARG vector_Point3f objectPoints=, ARG vector_Point2f imagePoints=, ARG Mat cameraMatrix=, ARG vector_double distCoeffs=, ARG Mat rvec=, ARG Mat tvec=, ARG bool useExtrinsicGuess=false, ARG int iterationsCount=100, ARG float reprojectionError=8.0, ARG double confidence=0.99, ARG Mat inliers=Mat(), ARG int flags=SOLVEPNP_ITERATIVE]>
java: boolean solvePnPRansac(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess, int iterationsCount, float reprojectionError, double confidence, Mat inliers, int flags)
java: boolean solvePnPRansac(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess, int iterationsCount, float reprojectionError, double confidence, Mat inliers)
java: boolean solvePnPRansac(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess, int iterationsCount, float reprojectionError, double confidence)
java: boolean solvePnPRansac(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess, int iterationsCount, float reprojectionError)
java: boolean solvePnPRansac(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess, int iterationsCount)
java: boolean solvePnPRansac(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec, boolean useExtrinsicGuess)
java: boolean solvePnPRansac(MatOfPoint3f objectPoints, MatOfPoint2f imagePoints, Mat cameraMatrix, MatOfDouble distCoeffs, Mat rvec, Mat tvec)
FUNC <bool cv..stereoRectifyUncalibrated [ARG Mat points1=, ARG Mat points2=, ARG Mat F=, ARG Size imgSize=, ARG Mat H1=, ARG Mat H2=, ARG double threshold=5]>
java: boolean stereoRectifyUncalibrated(Mat points1, Mat points2, Mat F, Size imgSize, Mat H1, Mat H2, double threshold)
java: boolean stereoRectifyUncalibrated(Mat points1, Mat points2, Mat F, Size imgSize, Mat H1, Mat H2)
FUNC <double cv..calibrateCamera [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints=, ARG Size imageSize=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG Mat stdDeviationsIntrinsics=, ARG Mat stdDeviationsExtrinsics=, ARG Mat perViewErrors=, ARG int flags=0, ARG TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON)]>
java: double calibrateCameraExtended(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, Mat stdDeviationsIntrinsics, Mat stdDeviationsExtrinsics, Mat perViewErrors, int flags, TermCriteria criteria)
java: double calibrateCameraExtended(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, Mat stdDeviationsIntrinsics, Mat stdDeviationsExtrinsics, Mat perViewErrors, int flags)
java: double calibrateCameraExtended(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, Mat stdDeviationsIntrinsics, Mat stdDeviationsExtrinsics, Mat perViewErrors)
FUNC <double cv..calibrateCamera [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints=, ARG Size imageSize=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG int flags=0, ARG TermCriteria criteria=TermCriteria( TermCriteria::COUNT + TermCriteria::EPS, 30, DBL_EPSILON)]>
java: double calibrateCamera(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, int flags, TermCriteria criteria)
java: double calibrateCamera(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, int flags)
java: double calibrateCamera(List<Mat> objectPoints, List<Mat> imagePoints, Size imageSize, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs)
FUNC <double cv..sampsonDistance [ARG Mat pt1=, ARG Mat pt2=, ARG Mat F=]>
java: double sampsonDistance(Mat pt1, Mat pt2, Mat F)
FUNC <double cv..stereoCalibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints1=, ARG vector_Mat imagePoints2=, ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG Mat E=, ARG Mat F=, ARG Mat perViewErrors=, ARG int flags=CALIB_FIX_INTRINSIC, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6)]>
java: double stereoCalibrateExtended(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E, Mat F, Mat perViewErrors, int flags, TermCriteria criteria)
java: double stereoCalibrateExtended(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E, Mat F, Mat perViewErrors, int flags)
java: double stereoCalibrateExtended(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E, Mat F, Mat perViewErrors)
FUNC <double cv..stereoCalibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints1=, ARG vector_Mat imagePoints2=, ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG Mat E=, ARG Mat F=, ARG int flags=CALIB_FIX_INTRINSIC, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT+TermCriteria::EPS, 30, 1e-6)]>
java: double stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E, Mat F, int flags, TermCriteria criteria)
java: double stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E, Mat F, int flags)
java: double stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat E, Mat F)
FUNC <double cv.fisheye..calibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints=, ARG Size image_size=, ARG Mat K=, ARG Mat D=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG int flags=0, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON)]>
java: double fisheye_calibrate(List<Mat> objectPoints, List<Mat> imagePoints, Size image_size, Mat K, Mat D, List<Mat> rvecs, List<Mat> tvecs, int flags, TermCriteria criteria)
java: double fisheye_calibrate(List<Mat> objectPoints, List<Mat> imagePoints, Size image_size, Mat K, Mat D, List<Mat> rvecs, List<Mat> tvecs, int flags)
java: double fisheye_calibrate(List<Mat> objectPoints, List<Mat> imagePoints, Size image_size, Mat K, Mat D, List<Mat> rvecs, List<Mat> tvecs)
FUNC <double cv.fisheye..stereoCalibrate [ARG vector_Mat objectPoints=, ARG vector_Mat imagePoints1=, ARG vector_Mat imagePoints2=, ARG Mat K1=, ARG Mat D1=, ARG Mat K2=, ARG Mat D2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG int flags=fisheye::CALIB_FIX_INTRINSIC, ARG TermCriteria criteria=TermCriteria(TermCriteria::COUNT + TermCriteria::EPS, 100, DBL_EPSILON)]>
java: double fisheye_stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat K1, Mat D1, Mat K2, Mat D2, Size imageSize, Mat R, Mat T, int flags, TermCriteria criteria)
java: double fisheye_stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat K1, Mat D1, Mat K2, Mat D2, Size imageSize, Mat R, Mat T, int flags)
java: double fisheye_stereoCalibrate(List<Mat> objectPoints, List<Mat> imagePoints1, List<Mat> imagePoints2, Mat K1, Mat D1, Mat K2, Mat D2, Size imageSize, Mat R, Mat T)
FUNC <float cv..rectify3Collinear [ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Mat cameraMatrix3=, ARG Mat distCoeffs3=, ARG vector_Mat imgpt1=, ARG vector_Mat imgpt3=, ARG Size imageSize=, ARG Mat R12=, ARG Mat T12=, ARG Mat R13=, ARG Mat T13=, ARG Mat R1=, ARG Mat R2=, ARG Mat R3=, ARG Mat P1=, ARG Mat P2=, ARG Mat P3=, ARG Mat Q=, ARG double alpha=, ARG Size newImgSize=, ARG Rect * roi1=, ARG Rect * roi2=, ARG int flags=]>
java: float rectify3Collinear(Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Mat cameraMatrix3, Mat distCoeffs3, List<Mat> imgpt1, List<Mat> imgpt3, Size imageSize, Mat R12, Mat T12, Mat R13, Mat T13, Mat R1, Mat R2, Mat R3, Mat P1, Mat P2, Mat P3, Mat Q, double alpha, Size newImgSize, Rect roi1, Rect roi2, int flags)
FUNC <int cv..decomposeHomographyMat [ARG Mat H=, ARG Mat K=, ARG vector_Mat rotations=, ARG vector_Mat translations=, ARG vector_Mat normals=]>
java: int decomposeHomographyMat(Mat H, Mat K, List<Mat> rotations, List<Mat> translations, List<Mat> normals)
FUNC <int cv..estimateAffine3D [ARG Mat src=, ARG Mat dst=, ARG Mat out=, ARG Mat inliers=, ARG double ransacThreshold=3, ARG double confidence=0.99]>
java: int estimateAffine3D(Mat src, Mat dst, Mat out, Mat inliers, double ransacThreshold, double confidence)
java: int estimateAffine3D(Mat src, Mat dst, Mat out, Mat inliers, double ransacThreshold)
java: int estimateAffine3D(Mat src, Mat dst, Mat out, Mat inliers)
FUNC <int cv..recoverPose [ARG Mat E=, ARG Mat points1=, ARG Mat points2=, ARG Mat R=, ARG Mat t=, ARG double focal=1.0, ARG Point2d pp=Point2d(0, 0), ARG Mat mask=Mat()]>
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat R, Mat t, double focal, Point pp, Mat mask)
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat R, Mat t, double focal, Point pp)
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat R, Mat t, double focal)
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat R, Mat t)
FUNC <int cv..recoverPose [ARG Mat E=, ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix=, ARG Mat R=, ARG Mat t=, ARG Mat mask=Mat()]>
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat cameraMatrix, Mat R, Mat t, Mat mask)
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat cameraMatrix, Mat R, Mat t)
FUNC <int cv..recoverPose [ARG Mat E=, ARG Mat points1=, ARG Mat points2=, ARG Mat cameraMatrix=, ARG Mat R=, ARG Mat t=, ARG double distanceThresh=, ARG Mat mask=Mat(), ARG Mat triangulatedPoints=Mat()]>
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat cameraMatrix, Mat R, Mat t, double distanceThresh, Mat mask, Mat triangulatedPoints)
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat cameraMatrix, Mat R, Mat t, double distanceThresh, Mat mask)
java: int recoverPose(Mat E, Mat points1, Mat points2, Mat cameraMatrix, Mat R, Mat t, double distanceThresh)
FUNC <int cv..solveP3P [ARG Mat objectPoints=, ARG Mat imagePoints=, ARG Mat cameraMatrix=, ARG Mat distCoeffs=, ARG vector_Mat rvecs=, ARG vector_Mat tvecs=, ARG int flags=]>
java: int solveP3P(Mat objectPoints, Mat imagePoints, Mat cameraMatrix, Mat distCoeffs, List<Mat> rvecs, List<Mat> tvecs, int flags)
FUNC <void cv..Rodrigues [ARG Mat src=, ARG Mat dst=, ARG Mat jacobian=Mat()]>
java: void Rodrigues(Mat src, Mat dst, Mat jacobian)
java: void Rodrigues(Mat src, Mat dst)
FUNC <void cv..calibrationMatrixValues [ARG Mat cameraMatrix=, ARG Size imageSize=, ARG double apertureWidth=, ARG double apertureHeight=, ARG double fovx=, ARG double fovy=, ARG double focalLength=, ARG Point2d principalPoint=, ARG double aspectRatio=]>
java: void calibrationMatrixValues(Mat cameraMatrix, Size imageSize, double apertureWidth, double apertureHeight, double[] fovx, double[] fovy, double[] focalLength, Point principalPoint, double[] aspectRatio)
FUNC <void cv..composeRT [ARG Mat rvec1=, ARG Mat tvec1=, ARG Mat rvec2=, ARG Mat tvec2=, ARG Mat rvec3=, ARG Mat tvec3=, ARG Mat dr3dr1=Mat(), ARG Mat dr3dt1=Mat(), ARG Mat dr3dr2=Mat(), ARG Mat dr3dt2=Mat(), ARG Mat dt3dr1=Mat(), ARG Mat dt3dt1=Mat(), ARG Mat dt3dr2=Mat(), ARG Mat dt3dt2=Mat()]>
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1, Mat dr3dt1, Mat dr3dr2, Mat dr3dt2, Mat dt3dr1, Mat dt3dt1, Mat dt3dr2, Mat dt3dt2)
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1, Mat dr3dt1, Mat dr3dr2, Mat dr3dt2, Mat dt3dr1, Mat dt3dt1, Mat dt3dr2)
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1, Mat dr3dt1, Mat dr3dr2, Mat dr3dt2, Mat dt3dr1, Mat dt3dt1)
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1, Mat dr3dt1, Mat dr3dr2, Mat dr3dt2, Mat dt3dr1)
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1, Mat dr3dt1, Mat dr3dr2, Mat dr3dt2)
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1, Mat dr3dt1, Mat dr3dr2)
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1, Mat dr3dt1)
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3, Mat dr3dr1)
java: void composeRT(Mat rvec1, Mat tvec1, Mat rvec2, Mat tvec2, Mat rvec3, Mat tvec3)
FUNC <void cv..computeCorrespondEpilines [ARG Mat points=, ARG int whichImage=, ARG Mat F=, ARG Mat lines=]>
java: void computeCorrespondEpilines(Mat points, int whichImage, Mat F, Mat lines)
FUNC <void cv..convertPointsFromHomogeneous [ARG Mat src=, ARG Mat dst=]>
java: void convertPointsFromHomogeneous(Mat src, Mat dst)
FUNC <void cv..convertPointsToHomogeneous [ARG Mat src=, ARG Mat dst=]>
java: void convertPointsToHomogeneous(Mat src, Mat dst)
FUNC <void cv..correctMatches [ARG Mat F=, ARG Mat points1=, ARG Mat points2=, ARG Mat newPoints1=, ARG Mat newPoints2=]>
java: void correctMatches(Mat F, Mat points1, Mat points2, Mat newPoints1, Mat newPoints2)
FUNC <void cv..decomposeEssentialMat [ARG Mat E=, ARG Mat R1=, ARG Mat R2=, ARG Mat t=]>
java: void decomposeEssentialMat(Mat E, Mat R1, Mat R2, Mat t)
FUNC <void cv..decomposeProjectionMatrix [ARG Mat projMatrix=, ARG Mat cameraMatrix=, ARG Mat rotMatrix=, ARG Mat transVect=, ARG Mat rotMatrixX=Mat(), ARG Mat rotMatrixY=Mat(), ARG Mat rotMatrixZ=Mat(), ARG Mat eulerAngles=Mat()]>
java: void decomposeProjectionMatrix(Mat projMatrix, Mat cameraMatrix, Mat rotMatrix, Mat transVect, Mat rotMatrixX, Mat rotMatrixY, Mat rotMatrixZ, Mat eulerAngles)
java: void decomposeProjectionMatrix(Mat projMatrix, Mat cameraMatrix, Mat rotMatrix, Mat transVect, Mat rotMatrixX, Mat rotMatrixY, Mat rotMatrixZ)
java: void decomposeProjectionMatrix(Mat projMatrix, Mat cameraMatrix, Mat rotMatrix, Mat transVect, Mat rotMatrixX, Mat rotMatrixY)
java: void decomposeProjectionMatrix(Mat projMatrix, Mat cameraMatrix, Mat rotMatrix, Mat transVect, Mat rotMatrixX)
java: void decomposeProjectionMatrix(Mat projMatrix, Mat cameraMatrix, Mat rotMatrix, Mat transVect)
FUNC <void cv..drawChessboardCorners [ARG Mat image=, ARG Size patternSize=, ARG vector_Point2f corners=, ARG bool patternWasFound=]>
java: void drawChessboardCorners(Mat image, Size patternSize, MatOfPoint2f corners, boolean patternWasFound)
FUNC <void cv..filterHomographyDecompByVisibleRefpoints [ARG vector_Mat rotations=, ARG vector_Mat normals=, ARG Mat beforePoints=, ARG Mat afterPoints=, ARG Mat possibleSolutions=, ARG Mat pointsMask=Mat()]>
java: void filterHomographyDecompByVisibleRefpoints(List<Mat> rotations, List<Mat> normals, Mat beforePoints, Mat afterPoints, Mat possibleSolutions, Mat pointsMask)
java: void filterHomographyDecompByVisibleRefpoints(List<Mat> rotations, List<Mat> normals, Mat beforePoints, Mat afterPoints, Mat possibleSolutions)
FUNC <void cv..filterSpeckles [ARG Mat img=, ARG double newVal=, ARG int maxSpeckleSize=, ARG double maxDiff=, ARG Mat buf=Mat()]>
java: void filterSpeckles(Mat img, double newVal, int maxSpeckleSize, double maxDiff, Mat buf)
java: void filterSpeckles(Mat img, double newVal, int maxSpeckleSize, double maxDiff)
FUNC <void cv..matMulDeriv [ARG Mat A=, ARG Mat B=, ARG Mat dABdA=, ARG Mat dABdB=]>
java: void matMulDeriv(Mat A, Mat B, Mat dABdA, Mat dABdB)
FUNC <void cv..projectPoints [ARG vector_Point3f objectPoints=, ARG Mat rvec=, ARG Mat tvec=, ARG Mat cameraMatrix=, ARG vector_double distCoeffs=, ARG vector_Point2f imagePoints=, ARG Mat jacobian=Mat(), ARG double aspectRatio=0]>
java: void projectPoints(MatOfPoint3f objectPoints, Mat rvec, Mat tvec, Mat cameraMatrix, MatOfDouble distCoeffs, MatOfPoint2f imagePoints, Mat jacobian, double aspectRatio)
java: void projectPoints(MatOfPoint3f objectPoints, Mat rvec, Mat tvec, Mat cameraMatrix, MatOfDouble distCoeffs, MatOfPoint2f imagePoints, Mat jacobian)
java: void projectPoints(MatOfPoint3f objectPoints, Mat rvec, Mat tvec, Mat cameraMatrix, MatOfDouble distCoeffs, MatOfPoint2f imagePoints)
FUNC <void cv..reprojectImageTo3D [ARG Mat disparity=, ARG Mat _3dImage=, ARG Mat Q=, ARG bool handleMissingValues=false, ARG int ddepth=-1]>
java: void reprojectImageTo3D(Mat disparity, Mat _3dImage, Mat Q, boolean handleMissingValues, int ddepth)
java: void reprojectImageTo3D(Mat disparity, Mat _3dImage, Mat Q, boolean handleMissingValues)
java: void reprojectImageTo3D(Mat disparity, Mat _3dImage, Mat Q)
FUNC <void cv..stereoRectify [ARG Mat cameraMatrix1=, ARG Mat distCoeffs1=, ARG Mat cameraMatrix2=, ARG Mat distCoeffs2=, ARG Size imageSize=, ARG Mat R=, ARG Mat T=, ARG Mat R1=, ARG Mat R2=, ARG Mat P1=, ARG Mat P2=, ARG Mat Q=, ARG int flags=CALIB_ZERO_DISPARITY, ARG double alpha=-1, ARG Size newImageSize=Size(), ARG Rect * validPixROI1=0, ARG Rect * validPixROI2=0]>
java: void stereoRectify(Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags, double alpha, Size newImageSize, Rect validPixROI1, Rect validPixROI2)
java: void stereoRectify(Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags, double alpha, Size newImageSize, Rect validPixROI1)
java: void stereoRectify(Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags, double alpha, Size newImageSize)
java: void stereoRectify(Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags, double alpha)
java: void stereoRectify(Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags)
java: void stereoRectify(Mat cameraMatrix1, Mat distCoeffs1, Mat cameraMatrix2, Mat distCoeffs2, Size imageSize, Mat R, Mat T, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q)
FUNC <void cv..triangulatePoints [ARG Mat projMatr1=, ARG Mat projMatr2=, ARG Mat projPoints1=, ARG Mat projPoints2=, ARG Mat points4D=]>
java: void triangulatePoints(Mat projMatr1, Mat projMatr2, Mat projPoints1, Mat projPoints2, Mat points4D)
FUNC <void cv..validateDisparity [ARG Mat disparity=, ARG Mat cost=, ARG int minDisparity=, ARG int numberOfDisparities=, ARG int disp12MaxDisp=1]>
java: void validateDisparity(Mat disparity, Mat cost, int minDisparity, int numberOfDisparities, int disp12MaxDisp)
java: void validateDisparity(Mat disparity, Mat cost, int minDisparity, int numberOfDisparities)
FUNC <void cv.fisheye..distortPoints [ARG Mat undistorted=, ARG Mat distorted=, ARG Mat K=, ARG Mat D=, ARG double alpha=0]>
java: void fisheye_distortPoints(Mat undistorted, Mat distorted, Mat K, Mat D, double alpha)
java: void fisheye_distortPoints(Mat undistorted, Mat distorted, Mat K, Mat D)
FUNC <void cv.fisheye..estimateNewCameraMatrixForUndistortRectify [ARG Mat K=, ARG Mat D=, ARG Size image_size=, ARG Mat R=, ARG Mat P=, ARG double balance=0.0, ARG Size new_size=Size(), ARG double fov_scale=1.0]>
java: void fisheye_estimateNewCameraMatrixForUndistortRectify(Mat K, Mat D, Size image_size, Mat R, Mat P, double balance, Size new_size, double fov_scale)
java: void fisheye_estimateNewCameraMatrixForUndistortRectify(Mat K, Mat D, Size image_size, Mat R, Mat P, double balance, Size new_size)
java: void fisheye_estimateNewCameraMatrixForUndistortRectify(Mat K, Mat D, Size image_size, Mat R, Mat P, double balance)
java: void fisheye_estimateNewCameraMatrixForUndistortRectify(Mat K, Mat D, Size image_size, Mat R, Mat P)
FUNC <void cv.fisheye..initUndistortRectifyMap [ARG Mat K=, ARG Mat D=, ARG Mat R=, ARG Mat P=, ARG Size size=, ARG int m1type=, ARG Mat map1=, ARG Mat map2=]>
java: void fisheye_initUndistortRectifyMap(Mat K, Mat D, Mat R, Mat P, Size size, int m1type, Mat map1, Mat map2)
FUNC <void cv.fisheye..projectPoints [ARG Mat objectPoints=, ARG Mat imagePoints=, ARG Mat rvec=, ARG Mat tvec=, ARG Mat K=, ARG Mat D=, ARG double alpha=0, ARG Mat jacobian=Mat()]>
java: void fisheye_projectPoints(Mat objectPoints, Mat imagePoints, Mat rvec, Mat tvec, Mat K, Mat D, double alpha, Mat jacobian)
java: void fisheye_projectPoints(Mat objectPoints, Mat imagePoints, Mat rvec, Mat tvec, Mat K, Mat D, double alpha)
java: void fisheye_projectPoints(Mat objectPoints, Mat imagePoints, Mat rvec, Mat tvec, Mat K, Mat D)
FUNC <void cv.fisheye..stereoRectify [ARG Mat K1=, ARG Mat D1=, ARG Mat K2=, ARG Mat D2=, ARG Size imageSize=, ARG Mat R=, ARG Mat tvec=, ARG Mat R1=, ARG Mat R2=, ARG Mat P1=, ARG Mat P2=, ARG Mat Q=, ARG int flags=, ARG Size newImageSize=Size(), ARG double balance=0.0, ARG double fov_scale=1.0]>
java: void fisheye_stereoRectify(Mat K1, Mat D1, Mat K2, Mat D2, Size imageSize, Mat R, Mat tvec, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags, Size newImageSize, double balance, double fov_scale)
java: void fisheye_stereoRectify(Mat K1, Mat D1, Mat K2, Mat D2, Size imageSize, Mat R, Mat tvec, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags, Size newImageSize, double balance)
java: void fisheye_stereoRectify(Mat K1, Mat D1, Mat K2, Mat D2, Size imageSize, Mat R, Mat tvec, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags, Size newImageSize)
java: void fisheye_stereoRectify(Mat K1, Mat D1, Mat K2, Mat D2, Size imageSize, Mat R, Mat tvec, Mat R1, Mat R2, Mat P1, Mat P2, Mat Q, int flags)
FUNC <void cv.fisheye..undistortImage [ARG Mat distorted=, ARG Mat undistorted=, ARG Mat K=, ARG Mat D=, ARG Mat Knew=cv::Mat(), ARG Size new_size=Size()]>
java: void fisheye_undistortImage(Mat distorted, Mat undistorted, Mat K, Mat D, Mat Knew, Size new_size)
java: void fisheye_undistortImage(Mat distorted, Mat undistorted, Mat K, Mat D, Mat Knew)
java: void fisheye_undistortImage(Mat distorted, Mat undistorted, Mat K, Mat D)
FUNC <void cv.fisheye..undistortPoints [ARG Mat distorted=, ARG Mat undistorted=, ARG Mat K=, ARG Mat D=, ARG Mat R=Mat(), ARG Mat P=Mat()]>
java: void fisheye_undistortPoints(Mat distorted, Mat undistorted, Mat K, Mat D, Mat R, Mat P)
java: void fisheye_undistortPoints(Mat distorted, Mat undistorted, Mat K, Mat D, Mat R)
java: void fisheye_undistortPoints(Mat distorted, Mat undistorted, Mat K, Mat D)
CLASS cv::.StereoMatcher : Algorithm
[CONST DISP_SHIFT=4, CONST DISP_SCALE=(1 << DISP_SHIFT)]
FUNC <int cv.StereoMatcher.getBlockSize []>
java: int getBlockSize()
FUNC <int cv.StereoMatcher.getDisp12MaxDiff []>
java: int getDisp12MaxDiff()
FUNC <int cv.StereoMatcher.getMinDisparity []>
java: int getMinDisparity()
FUNC <int cv.StereoMatcher.getNumDisparities []>
java: int getNumDisparities()
FUNC <int cv.StereoMatcher.getSpeckleRange []>
java: int getSpeckleRange()
FUNC <int cv.StereoMatcher.getSpeckleWindowSize []>
java: int getSpeckleWindowSize()
FUNC <void cv.StereoMatcher.compute [ARG Mat left=, ARG Mat right=, ARG Mat disparity=]>
java: void compute(Mat left, Mat right, Mat disparity)
FUNC <void cv.StereoMatcher.setBlockSize [ARG int blockSize=]>
java: void setBlockSize(int blockSize)
FUNC <void cv.StereoMatcher.setDisp12MaxDiff [ARG int disp12MaxDiff=]>
java: void setDisp12MaxDiff(int disp12MaxDiff)
FUNC <void cv.StereoMatcher.setMinDisparity [ARG int minDisparity=]>
java: void setMinDisparity(int minDisparity)
FUNC <void cv.StereoMatcher.setNumDisparities [ARG int numDisparities=]>
java: void setNumDisparities(int numDisparities)
FUNC <void cv.StereoMatcher.setSpeckleRange [ARG int speckleRange=]>
java: void setSpeckleRange(int speckleRange)
FUNC <void cv.StereoMatcher.setSpeckleWindowSize [ARG int speckleWindowSize=]>
java: void setSpeckleWindowSize(int speckleWindowSize)
CLASS cv::.StereoBM : StereoMatcher
[CONST PREFILTER_NORMALIZED_RESPONSE=0, CONST PREFILTER_XSOBEL=1]
FUNC <Ptr_StereoBM cv.StereoBM.create [ARG int numDisparities=0, ARG int blockSize=21]>
java: StereoBM create(int numDisparities, int blockSize)
java: StereoBM create(int numDisparities)
java: StereoBM create()
FUNC <Rect cv.StereoBM.getROI1 []>
java: Rect getROI1()
FUNC <Rect cv.StereoBM.getROI2 []>
java: Rect getROI2()
FUNC <int cv.StereoBM.getPreFilterCap []>
java: int getPreFilterCap()
FUNC <int cv.StereoBM.getPreFilterSize []>
java: int getPreFilterSize()
FUNC <int cv.StereoBM.getPreFilterType []>
java: int getPreFilterType()
FUNC <int cv.StereoBM.getSmallerBlockSize []>
java: int getSmallerBlockSize()
FUNC <int cv.StereoBM.getTextureThreshold []>
java: int getTextureThreshold()
FUNC <int cv.StereoBM.getUniquenessRatio []>
java: int getUniquenessRatio()
FUNC <void cv.StereoBM.setPreFilterCap [ARG int preFilterCap=]>
java: void setPreFilterCap(int preFilterCap)
FUNC <void cv.StereoBM.setPreFilterSize [ARG int preFilterSize=]>
java: void setPreFilterSize(int preFilterSize)
FUNC <void cv.StereoBM.setPreFilterType [ARG int preFilterType=]>
java: void setPreFilterType(int preFilterType)
FUNC <void cv.StereoBM.setROI1 [ARG Rect roi1=]>
java: void setROI1(Rect roi1)
FUNC <void cv.StereoBM.setROI2 [ARG Rect roi2=]>
java: void setROI2(Rect roi2)
FUNC <void cv.StereoBM.setSmallerBlockSize [ARG int blockSize=]>
java: void setSmallerBlockSize(int blockSize)
FUNC <void cv.StereoBM.setTextureThreshold [ARG int textureThreshold=]>
java: void setTextureThreshold(int textureThreshold)
FUNC <void cv.StereoBM.setUniquenessRatio [ARG int uniquenessRatio=]>
java: void setUniquenessRatio(int uniquenessRatio)
CLASS cv::.StereoSGBM : StereoMatcher
[CONST MODE_SGBM=0, CONST MODE_HH=1, CONST MODE_SGBM_3WAY=2, CONST MODE_HH4=3]
FUNC <Ptr_StereoSGBM cv.StereoSGBM.create [ARG int minDisparity=0, ARG int numDisparities=16, ARG int blockSize=3, ARG int P1=0, ARG int P2=0, ARG int disp12MaxDiff=0, ARG int preFilterCap=0, ARG int uniquenessRatio=0, ARG int speckleWindowSize=0, ARG int speckleRange=0, ARG int mode=StereoSGBM::MODE_SGBM]>
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize, int P1, int P2, int disp12MaxDiff, int preFilterCap, int uniquenessRatio, int speckleWindowSize, int speckleRange, int mode)
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize, int P1, int P2, int disp12MaxDiff, int preFilterCap, int uniquenessRatio, int speckleWindowSize, int speckleRange)
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize, int P1, int P2, int disp12MaxDiff, int preFilterCap, int uniquenessRatio, int speckleWindowSize)
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize, int P1, int P2, int disp12MaxDiff, int preFilterCap, int uniquenessRatio)
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize, int P1, int P2, int disp12MaxDiff, int preFilterCap)
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize, int P1, int P2, int disp12MaxDiff)
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize, int P1, int P2)
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize, int P1)
java: StereoSGBM create(int minDisparity, int numDisparities, int blockSize)
java: StereoSGBM create(int minDisparity, int numDisparities)
java: StereoSGBM create(int minDisparity)
java: StereoSGBM create()
FUNC <int cv.StereoSGBM.getMode []>
java: int getMode()
FUNC <int cv.StereoSGBM.getP1 []>
java: int getP1()
FUNC <int cv.StereoSGBM.getP2 []>
java: int getP2()
FUNC <int cv.StereoSGBM.getPreFilterCap []>
java: int getPreFilterCap()
FUNC <int cv.StereoSGBM.getUniquenessRatio []>
java: int getUniquenessRatio()
FUNC <void cv.StereoSGBM.setMode [ARG int mode=]>
java: void setMode(int mode)
FUNC <void cv.StereoSGBM.setP1 [ARG int P1=]>
java: void setP1(int P1)
FUNC <void cv.StereoSGBM.setP2 [ARG int P2=]>
java: void setP2(int P2)
FUNC <void cv.StereoSGBM.setPreFilterCap [ARG int preFilterCap=]>
java: void setPreFilterCap(int preFilterCap)
FUNC <void cv.StereoSGBM.setUniquenessRatio [ARG int uniquenessRatio=]>
java: void setUniquenessRatio(int uniquenessRatio)
